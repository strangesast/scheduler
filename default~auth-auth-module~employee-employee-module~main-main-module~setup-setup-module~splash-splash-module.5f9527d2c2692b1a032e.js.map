{"version":3,"sources":["./node_modules/rxjs/_esm2015/internal/operators/distinctUntilChanged.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/collections.js","./node_modules/rxjs/_esm2015/internal/operators/takeUntil.js","./node_modules/@angular/forms/__ivy_ngcc__/fesm2015/forms.js","./node_modules/rxjs/_esm2015/internal/operators/audit.js","./node_modules/rxjs/_esm2015/internal/observable/timer.js","./node_modules/rxjs/_esm2015/internal/operators/auditTime.js","./node_modules/rxjs/_esm2015/internal/util/isObservable.js","./node_modules/rxjs/_esm2015/internal/util/Immediate.js","./node_modules/rxjs/_esm2015/internal/scheduler/AsapAction.js","./node_modules/rxjs/_esm2015/internal/scheduler/AsapScheduler.js","./node_modules/rxjs/_esm2015/internal/scheduler/asap.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/button.js","./src/app/modules/material/material.module.ts","./node_modules/@angular/cdk/fesm2015/coercion.js","./node_modules/@angular/cdk/fesm2015/cdk.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/core.js","./src/app/modules/shared/shared.module.ts","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/keycodes.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/observers.js","./node_modules/rxjs/_esm2015/internal/operators/debounceTime.js","./node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/icon.js","./node_modules/rxjs/_esm2015/internal/operators/shareReplay.js","./node_modules/rxjs/_esm2015/internal/util/isNumeric.js","./node_modules/rxjs/_esm2015/internal/operators/pairwise.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/bidi.js","./node_modules/rxjs/_esm2015/internal/observable/forkJoin.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/scrolling.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/portal.js","./node_modules/rxjs/_esm2015/internal/operators/takeWhile.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/overlay.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/select.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/table.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/button-toggle.js","./node_modules/rxjs/_esm2015/internal/ReplaySubject.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/form-field.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/platform.js","./src/app/util/index.ts","./node_modules/rxjs/_esm2015/internal/operators/observeOn.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/text-field.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/input.js","./node_modules/rxjs/_esm2015/internal/scheduler/QueueAction.js","./node_modules/rxjs/_esm2015/internal/scheduler/QueueScheduler.js","./node_modules/rxjs/_esm2015/internal/scheduler/queue.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/a11y.js"],"names":["distinctUntilChanged","compare","keySelector","source","lift","DistinctUntilChangedOperator","this","subscriber","subscribe","DistinctUntilChangedSubscriber","destination","super","hasKey","x","y","value","key","err","error","result","next","DataSource","isDataSource","connect","ArrayDataSource","_data","SelectionModel","_multiple","initiallySelectedValues","_emitChanges","_selection","Set","_deselectedToEmit","_selectedToEmit","changed","length","forEach","_markSelected","_selected","Array","from","values","_verifyValueAssignment","_emitChangeEvent","_unmarkSelected","isSelected","deselect","select","_unmarkAll","has","size","isEmpty","predicate","selected","sort","added","removed","add","push","delete","Error","takeUntil","notifier","TakeUntilOperator","takeUntilSubscriber","TakeUntilSubscriber","notifierSubscription","seenValue","outerValue","innerValue","outerIndex","innerIndex","innerSub","complete","NG_VALUE_ACCESSOR","CHECKBOX_VALUE_ACCESSOR","provide","useExisting","CheckboxControlValueAccessor","multi","_renderer","_elementRef","onChange","_","onTouched","setProperty","nativeElement","fn","isDisabled","ɵfac","t","ɵdir","type","selectors","hostBindings","rf","ctx","$event","target","checked","features","DEFAULT_VALUE_ACCESSOR","DefaultValueAccessor","COMPOSITION_BUFFER_MODE","_compositionMode","_composing","userAgent","getUserAgent","test","toLowerCase","_isAndroid","_handleInput","_compositionStart","_compositionEnd","AbstractControlDirective","control","valid","invalid","pending","disabled","enabled","errors","pristine","dirty","touched","status","untouched","statusChanges","valueChanges","reset","errorCode","path","hasError","getError","ControlContainer","ɵControlContainer_BaseFactory","unimplemented","NgControl","arguments","_parent","name","valueAccessor","_rawValidators","_rawAsyncValidators","AbstractControlStatus","cd","_cd","NgControlStatus","hostVars","ngClassUntouched","ngClassTouched","ngClassPristine","ngClassDirty","ngClassValid","ngClassInvalid","ngClassPending","NgControlStatusGroup","isEmptyInputValue","hasValidLength","NG_VALIDATORS","NG_ASYNC_VALIDATORS","EMAIL_REGEXP","Validators","min","parseFloat","isNaN","max","minLength","maxLength","pattern","nullValidator","regex","regexStr","charAt","RegExp","toString","validators","presentValidators","filter","isPresent","_mergeErrors","map","v","_executeValidators","observables","_executeAsyncValidators","toObservable","pipe","o","r","obs","arrayOfErrors","res","Object","assign","keys","normalizeValidator","validator","validate","c","normalizeAsyncValidator","NUMBER_VALUE_ACCESSOR","NumberValueAccessor","RADIO_VALUE_ACCESSOR","RadioControlValueAccessor","RadioControlRegistry","_accessors","accessor","i","splice","_isSameGroup","fireUncheck","controlPair","_control","ɵprov","token","factory","_registry","_injector","get","_checkName","remove","_state","_fn","writeValue","formControlName","_throwNameError","inputs","RANGE_VALUE_ACCESSOR","RangeValueAccessor","FormErrorExamples","ReactiveErrors","console","warn","directiveName","SELECT_VALUE_ACCESSOR","SelectControlValueAccessor","_optionMap","Map","_idCounter","_compareWith","is","JSON","stringify","id","_getOptionId","valueString","slice","_buildValueString","_getOptionValue","split","_extractId","compareWith","SELECT_MULTIPLE_VALUE_ACCESSOR","SelectMultipleControlValueAccessor","optionSelectedStateSetter","isArray","ids","opt","_setSelected","indexOf","undefined","selectedOptions","options","item","val","set","_value","_extractId$1","controlPath","parent","setUpControl","dir","_throwError","compose","asyncValidator","composeAsync","registerOnChange","newValue","_pendingValue","_pendingChange","_pendingDirty","updateOn","updateControl","setUpViewChangePipeline","emitModelEvent","viewToModelUpdate","setUpModelChangePipeline","registerOnTouched","_pendingTouched","markAsTouched","setUpBlurPipeline","setDisabledState","registerOnDisabledChange","registerOnValidatorChange","updateValueAndValidity","markAsDirty","setValue","emitModelToViewChange","setUpFormContainer","_noControlError","message","messageEnd","join","composeValidators","composeAsyncValidators","BUILTIN_ACCESSORS","syncPendingControls","form","directives","_syncPendingControls","removeDir","list","el","index","coerceToValidator","validatorOrOpts","isOptionsObj","coerceToAsyncValidator","origAsyncValidator","asyncValidators","AbstractControl","_onCollectionChange","_onDisabledChange","_updateOn","newValidator","opts","onlySelf","_forEachChild","markAllAsTouched","markAsUntouched","_updateTouched","markAsPristine","_updatePristine","emitEvent","emit","markAsPending","skipPristineCheck","_parentMarkedDirty","disable","_updateValue","_updateAncestors","changeFn","enable","_setInitialStatus","_cancelExistingSubscription","_runValidator","_calculateStatus","_runAsyncValidator","ctrl","_updateTreeValidity","_allControlsDisabled","_asyncValidationSubscription","setErrors","unsubscribe","_updateControlsErrors","delimiter","controlToFind","FormGroup","controls","hasOwnProperty","FormArray","at","_find","_anyControlsHaveStatus","_anyControls","_anyControlsDirty","_anyControlsTouched","formState","FormControl","_onChange","_applyFormState","_setUpdateStrategy","_initObservables","emitViewToModelChange","condition","cb","_isBoxedValue","_setUpControls","setParent","_registerOnCollectionChange","registerControl","controlName","_checkAllValuesPresent","_throwIfControlMissing","patchValue","_reduceChildren","acc","getRawValue","subtreeUpdated","updated","child","k","_reduceValue","contains","initValue","_registerControl","reduce","some","formDirectiveProvider","NgForm","resolvedPromise","Promise","resolve","submitted","_directives","ngSubmit","then","container","_findContainer","removeControl","group","resetForm","pop","onSubmit","onReset","outputs","exportAs","AbstractFormGroupDirective","_checkParentType","formDirective","addFormGroup","removeFormGroup","getFormGroup","_validators","_asyncValidators","ɵAbstractFormGroupDirective_BaseFactory","ɵNgNoValidate","hostAttrs","NG_MODEL_WITH_FORM_CONTROL_WARNING","formDirectiveProvider$1","FormGroupDirective","changes","_checkFormPresent","_updateValidators","_updateDomValue","_updateRegistrations","newCtrl","_clearChangeFns","cleanUpControl","_oldForm","sync","async","missingFormException","formGroupNameProvider","FormGroupName","_hasInvalidParent","groupParentException","formArrayNameProvider","FormArrayName","addFormArray","removeFormArray","getFormArray","arrayParentException","controlNameBinding","FormControlName","valueAccessors","_ngModelWarningConfig","_added","update","_ngModelWarningSent","defaultAccessor","builtinAccessor","customAccessor","constructor","a","selectValueAccessor","disabledAttrWarning","warningConfig","_setUpControl","viewModel","change","isFirstChange","currentValue","isPropertyUpdated","_ngModelWarningSentOnce","ngModelWarning","model","updateModel","ngModelGroupException","controlParentException","addControl","ɵInternalFormsSharedModule","ɵmod","ɵinj","FormBuilder","controlsConfig","_reduceControls","isAbstractControlOptions","_createControl","controlConfig","ReactiveFormsModule","ngModule","providers","useValue","warnOnNgModelWithFormControl","imports","AuditOperator","durationSelector","OuterSubscriber","hasValue","throttled","duration","innerSubscription","subscribeToResult","closed","clearThrottle","dispatch","state","period","schedule","auditTime","scheduler","dueTime","periodOrScheduler","isNumeric","Number","isScheduler","Observable","due","now","timer","isObservable","obj","nextHandle","RESOLVED","activeHandles","findAndClearHandle","handle","Immediate","AsyncAction","work","delay","requestAsyncId","actions","scheduled","setImmediate","flush","bind","recycleAsyncId","clearImmediate","AsyncScheduler","action","active","count","shift","execute","asap","MatButtonModule","components","MaterialModule","coerceBooleanProperty","coerceNumberProperty","fallbackValue","_isNumberValue","coerceArray","coerceCssPixelValue","coerceElement","elementOrRef","VERSION","MatOption_mat_pseudo_checkbox_0_Template","ctx_r0","_c2","VERSION$1","MATERIAL_SANITY_CHECKS","providedIn","SUPPORTS_INTL_API","MatCommonModule","highContrastModeDetector","sanityChecks","document","_hasDoneGlobalChecks","_document","_applyBodyHighContrastModeCssClasses","_sanityChecks","_checkDoctypeIsDefined","_checkThemeIsPresent","_checkCdkVersionMatch","doc","_getDocument","win","defaultView","window","_isTestEnv","_getWindow","__karma__","jasmine","isEnabled","_checksAreEnabled","doctype","theme","body","getComputedStyle","testElement","createElement","classList","appendChild","computedStyle","display","removeChild","version","full","mixinDisabled","base","args","_disabled","mixinColor","defaultColor","color","_color","colorPalette","mixinDisableRipple","_disableRipple","mixinTabIndex","defaultTabIndex","_tabIndex","mixinErrorState","errorState","stateChanges","Subject","oldState","newState","errorStateMatcher","_defaultErrorStateMatcher","isErrorState","ngControl","_parentFormGroup","_parentForm","Intl","_a","ErrorStateMatcher","RippleRef","element","config","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","passiveEventOptions","passive","pointerDownEvents","pointerUpEvents","_target","_ngZone","elementOrElementRef","platform","_isPointerDown","_activeRipples","_pointerUpEventsRegistered","isBrowser","_containerElement","containerRect","_containerRect","getBoundingClientRect","animationConfig","animation","centered","left","width","top","height","radius","rect","distX","Math","abs","right","distY","bottom","sqrt","distanceToFurthestCorner","offsetX","offsetY","ripple","style","backgroundColor","transitionDuration","getPropertyValue","transform","rippleRef","persistent","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","fadeOut","wasActive","rippleEl","opacity","parentNode","_triggerElement","_removeTriggerEvents","_registerEvents","event","_onMousedown","_onTouchStart","_onPointerUp","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","Date","rippleDisabled","fadeInRipple","clientX","clientY","rippleConfig","touches","changedTouches","terminateOnPointerUp","runOutsideAngular","setTimeout","eventTypes","addEventListener","removeEventListener","MAT_RIPPLE_GLOBAL_OPTIONS","MatRipple","ngZone","globalOptions","_animationMode","_isInitialized","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","trigger","fadeOutAll","setupTriggerEvents","configOrX","unbounded","MatRippleModule","MatPseudoCheckbox","ɵcmp","decls","vars","template","styles","encapsulation","changeDetection","MatPseudoCheckboxModule","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_MatOptgroupBase","_labelId","ɵ_MatOptgroupBase_BaseFactory","label","MAT_OPTGROUP","_uniqueIdCounter","MatOptionSelectionChange","isUserInput","MAT_OPTION_PARENT_COMPONENT","_MatOptionBase","_element","_changeDetectorRef","_active","_mostRecentViewValue","onSelectionChange","_stateChanges","multiple","disableRipple","_getHostElement","textContent","trim","markForCheck","_emitSelectionChangeEvent","_origin","focus","viewValue","keyCode","_selectViaInteraction","preventDefault","MatOption","changeDetectorRef","_handleKeydown","_getTabIndex","_getAriaSelected","ngContentSelectors","consts","_countGroupLabelsBeforeOption","optionIndex","optionGroups","optionsArray","toArray","groups","groupCounter","_getOptionScrollPosition","optionHeight","currentScrollPosition","panelHeight","optionOffset","MatOptionModule","MAT_LABEL_GLOBAL_OPTIONS","SharedModule","TAB","ENTER","ESCAPE","SPACE","END","HOME","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","ZERO","NINE","A","Z","hasModifierKey","modifiers","modifier","altKey","shiftKey","ctrlKey","metaKey","MutationObserverFactory","callback","MutationObserver","ContentObserver","_mutationObserverFactory","_observedElements","_cleanupObserver","observer","subscription","_observeElement","_unobserveElement","stream","create","mutations","observe","characterData","childList","subtree","disconnect","CdkObserveContent","_contentObserver","_currentSubscription","_unsubscribe","_subscribe","_debounce","debounce","ObserversModule","debounceTime","DebounceTimeOperator","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","dispatchNext","debouncedNext","HttpHandler","HttpHeaders","headers","normalizedNames","lazyUpdate","lazyInit","line","maybeSetNormalizedName","init","clone","op","lcName","copyFrom","applyUpdate","other","concat","toDelete","existing","HttpUrlEncodingCodec","standardEncoding","decodeURIComponent","encodeURIComponent","replace","HttpParams","updates","cloneFrom","encoder","fromString","fromObject","rawParams","codec","param","eqIdx","decodeKey","decodeValue","paramParser","eKey","encodeKey","encodeValue","idx","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","method","url","third","fourth","reportProgress","withCredentials","responseType","toUpperCase","mightHaveBody","params","urlWithParams","qIdx","setHeaders","setParams","HttpEventType","HttpResponse","defaultStatus","defaultStatusText","statusText","ok","Response","addBody","HttpClient","handler","first","req","events$","of","concatMap","res$","request","callbackParam","append","_c0","getMatIconNameNotFoundError","iconName","getMatIconFailedToSanitizeUrlError","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","data","nodeName","svgElement","MatIconRegistry","_httpClient","_sanitizer","_errorHandler","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIconInNamespace","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","HTML","_createSvgElementForSingleIcon","addSvgIconSetInNamespace","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","alias","className","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","throwError","clear","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","handleError","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchIcon","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","attributes","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","inProgressFetch","finalize","share","configNamespace","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","funcIriPattern","MatIcon","elementRef","_iconRegistry","ariaHidden","_inline","_currentIconFetch","Subscription","EMPTY","inline","_fontSet","_cleanupFontValue","_fontIcon","parts","svgIconChanges","svgIcon","_splitIconName","getNamedSvgIcon","take","_setSvgElement","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","MatIconModule","shareReplay","configOrBufferSize","windowTime","bufferSize","refCount","POSITIVE_INFINITY","useRefCount","subject","isComplete","shareReplayOperator","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","pair","prev","DIR_DOCUMENT","Directionality","htmlDir","documentElement","BidiModule","sources","forkJoinInternal","getPrototypeOf","prototype","resultSelector","len","completed","emitted","ScrollDispatcher","_platform","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","scrollable","elementScrolled","scrollableReference","auditTimeInMs","_addGlobalListener","_removeGlobalListener","deregister","ancestors","getAncestorScrollContainers","scrolled","scrollingContainers","_subscription","_scrollableContainsElement","scrollableElement","getElementRef","parentElement","fromEvent","ViewportRuler","_change","_changeListener","_updateViewportSize","_viewportSize","output","scrollPosition","getViewportScrollPosition","getViewportSize","documentRect","scrollTop","scrollY","scrollLeft","scrollX","throttleTime","innerWidth","innerHeight","CdkScrollableModule","ScrollingModule","throwPortalAlreadyAttachedError","Portal","host","throwNullPortalOutletError","hasAttached","_attachedHost","attach","throwNoPortalAttachedError","detach","ComponentPortal","component","viewContainerRef","injector","componentFactoryResolver","TemplatePortal","context","templateRef","DomPortalOutlet","_isDisposed","attachDomPortal","_attachedPortal","portal","throwNullPortalError","throwPortalOutletAlreadyDisposedError","attachComponentPortal","attachTemplatePortal","throwUnknownPortalTypeError","setAttachedHost","_invokeDisposeFn","_disposeFn","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","anchorNode","createComment","insertBefore","setDisposeFn","replaceChild","componentFactory","resolveComponentFactory","componentRef","createComponent","destroy","attachView","hostView","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","rootNodes","rootNode","detectChanges","dispose","PortalModule","TakeWhileOperator","inclusive","Subscriber","nextOrComplete","predicateResult","Boolean","_viewportRuler","_previousHTMLStyles","_isEnabled","_canBeEnabled","root","_previousScrollPosition","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","scroll","viewport","scrollHeight","scrollWidth","getMatScrollStrategyAlreadyAttachedError","CloseScrollStrategy","_scrollDispatcher","_config","_scrollSubscription","_detach","_overlayRef","run","overlayRef","threshold","_initialScrollPosition","updatePosition","NoopScrollStrategy","isElementScrolledOutsideView","containerBounds","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","ScrollStrategyOptions","noop","close","block","reposition","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","excludeFromOutsideClick","configKeys","ConnectionPositionPair","origin","overlay","originX","originY","overlayX","overlayY","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","validateHorizontalPosition","BaseOverlayDispatcher","_attachedOverlays","OverlayKeyboardDispatcher","_keydownListener","overlays","_keydownEvents","observers","_isAttached","OverlayOutsideClickDispatcher","_cursorStyleIsSet","_clickListener","composedPath","_outsidePointerEvents","getConfig","e","IOS","_cursorOriginalValue","cursor","isTestEnvironment","OverlayContainer","_createContainer","oppositePlatformContainers","_portalOutlet","_host","_pane","_keyboardDispatcher","_outsideClickDispatcher","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","_backdropClickHandler","_scrollStrategy","_positionStrategy","positionStrategy","attachResult","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","apply","strategy","sizeConfig","direction","classes","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","requestAnimationFrame","nextSibling","timeoutId","backdropToDetach","finishDetach","clearTimeout","cssClasses","isAdd","cssClass","merge","children","cssUnitPattern","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isInitialRender","_lastPosition","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","originRect","viewportRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","scrollables","positions","margin","flexibleDimensions","growAfterOpen","canPush","isLocked","offset","selector","_transformOriginSelector","startX","_isRtl","endX","overlayStartX","overlayStartY","point","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","horizontalFit","start","overflowRight","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","previousHeight","previousWidth","_hasExactPosition","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","_pushOverlayOnScreen","virtualKeyboardOffset","getContainerElement","clientHeight","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","currentOverflow","axis","Element","input","units","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","overlayContainer","withFlexibleDimensions","withPush","withViewportMargin","withFallbackPosition","_direction","setDirection","withScrollableContainers","withPositions","withDefaultOffsetX","withDefaultOffsetY","withLockedPosition","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","updateSize","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","OverlayPositionBuilder","nextUniqueId","Overlay","scrollStrategies","_positionBuilder","_directionality","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CdkOverlayOrigin","CdkConnectedOverlay","_overlay","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","open","backdropClick","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","_scrollStrategyFactory","_position","_updatePositionStrategy","_attachOverlay","_detachOverlay","_buildConfig","attachments","detachments","keydownEvents","outsidePointerEvents","_createPositionStrategy","currentPosition","withGrowAfterOpen","lockPosition","withTransformOriginOn","transformOriginSelector","flexibleConnectedTo","_createOverlay","takeWhile","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","deps","useFactory","OverlayModule","MatSelect_span_4_Template","ctx_r2","placeholder","MatSelect_span_5_span_1_Template","ctx_r5","triggerValue","MatSelect_span_5_ng_content_2_Template","MatSelect_span_5_Template","ctx_r3","customTrigger","MatSelect_ng_template_8_Template","_r9","_panelDoneAnimatingStream","toState","ctx_r4","_getPanelTheme","_transformOrigin","_triggerFontSize","_c3","matSelectAnimations","transformPanelWrap","optional","transformPanel","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectChange","MatSelectBase","_MatSelectMixinBase","MAT_SELECT_TRIGGER","MatSelect","_parentFormField","tabIndex","_liveAnnouncer","defaults","_panelOpen","_required","_scrollTop","o1","o2","_uid","_destroy","_onTouched","_optionIds","_positions","_disableOptionCentering","_focused","controlType","ariaLabel","optionSelectionChanges","defer","startWith","switchMap","option","openedChange","_openedStream","_closedStream","selectionChange","valueChange","parseInt","disableOptionCentering","typeaheadDebounceInterval","_placeholder","_selectionModel","_initializeSelection","_setSelectionByValue","_typeaheadDebounceInterval","_id","panelOpen","overlayDir","_triggerRect","_initKeyManager","_resetOptions","updateErrorState","_keyManager","withTypeAhead","fontSize","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","empty","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","isTyping","previouslySelectedOption","setFirstItemActive","setLastItemActive","onKeydown","selectedOption","announce","activeItem","hasDeselectedOptions","previouslyFocusedIndex","activeItemIndex","_calculateOverlayOffsetX","panel","_selectValue","_sortValues","correspondingOption","updateActiveItem","find","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","setActiveItem","_propagateChanges","b","sortComparator","valueToEmit","activeOptionIndex","labelCount","_getItemHeight","current","itemHeight","items","_getItemCount","maxScroll","selectedOptionOffset","_getOptionIndex","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","ariaLabelledby","_hasFloatingLabel","_getAriaLabel","viewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_PADDING_X","leftOverflow","rightOverflow","round","optionHeightAdjustment","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_ariaDescribedby","contentQueries","dirIndex","_t","viewQuery","_onFocus","_onBlur","_getAriaLabelledby","required","_getAriaActiveDescendant","toggle","_onAttached","_r0","MatSelectModule","_c1","CdkTextColumn_th_1_Template","justify","headerText","CdkTextColumn_td_2_Template","data_r2","$implicit","ctx_r1","dataAccessor","mixinHasStickyInput","_sticky","_hasStickyChanged","prevValue","hasStickyChanged","CDK_TABLE","TEXT_COLUMN_OPTIONS","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDefBase","_CdkColumnDefBase","CdkColumnDef","_table","_stickyEnd","_name","cssClassFriendlyName","cell","headerCell","footerCell","sticky","stickyEnd","BaseCdkCell","columnDef","CdkHeaderCell","CdkFooterCell","CdkCell","_Schedule","tasks","endTasks","_CoalescedStyleScheduler","_currentSchedule","_destroyed","task","_createScheduleIfNeeded","BaseRowDef","_differs","_columnsDiffer","columns","diff","column","CdkHeaderRowDef","CdkFooterRowDef","CdkHeaderRowDefBase","_CdkHeaderRowDefBase","ngOnChanges","CdkFooterRowDefBase","_CdkFooterRowDefBase","CdkRowDef","when","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","CdkHeaderRow","CdkFooterRow","CdkRow","CdkNoDataRow","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","_coalescedStyleScheduler","_isBrowser","rows","stickyDirections","elementsToClear","row","_removeStickyStyle","stickyStartStates","stickyEndStates","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","end","_addStickyStyle","rowsToStick","stickyStates","states","stickyHeights","elementsToStick","rowIndex","stickyHeight","tableElement","tfoot","zIndex","_getCalculatedZIndex","dirValue","cssText","zIndexIncrements","firstRowCells","widths","nextPosition","getTableUnknownColumnError","DataRowOutlet","HeaderRowOutlet","FooterRowOutlet","NoDataRowOutlet","CdkTable","role","_onDestroy","_columnDefsByName","_customColumnDefs","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_cachedRenderRowsMap","stickyCssClass","_isShowingNoDataRow","_multiTemplateDataRows","viewChange","MAX_VALUE","_trackByFn","_dataSource","dataSource","_switchDataSource","_rowOutlet","_forceRenderDataRows","updateStickyColumnStyles","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","_i","dataRow","trackBy","dataIndex","_cacheRowDefs","_cacheColumnDefs","_headerRowDefs","_footerRowDefs","_rowDefs","stickyColumnStyleUpdateNeeded","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","_noDataRowOutlet","_headerRowOutlet","_footerRowOutlet","_renderRows","_getAllRenderRows","_updateNoDataRow","forEachOperation","record","prevIndex","currentIndex","previousIndex","_insertRow","view","move","_updateRowIndexContext","forEachIdentityChange","rowDef","headerRowDef","footerRowDef","headerRows","_getRenderedRows","thead","def","_stickyStyler","clearStickyPositioning","stickRows","resetStickyChanged","footerRows","updateStickyFooterContainer","dataRows","headerRow","_addStickyColumnStyles","footerRow","renderRows","prevCachedRenderRows","renderRowsForData","_getRenderRowsForData","WeakMap","j","renderRow","cache","_getRowDefs","cachedRenderRows","mergeArrayAndSet","_getOwnDefs","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","multiTemplateDataRows","_defaultRowDef","columnsDiffReducer","getColumnsDiff","dataColumnsChanged","headerColumnsChanged","footerColumnsChanged","dataStream","_renderRow","updateStickyHeaderRowStyles","updateStickyFooterRowStyles","columnDefs","columnName","updateStickyColumns","rowOutlet","renderedRows","rowDefs","getTableMissingMatchingRowDefError","renderIndex","outlet","cellTemplate","_getCellTemplates","last","even","odd","columnId","extractCellTemplate","documentFragment","createDocumentFragment","sections","tag","outlets","section","stickyCheckReducer","d","_noDataRow","shouldShow","array","CdkTextColumn","_options","_syncColumnDefName","_createDefaultHeaderText","defaultDataAccessor","addColumnDef","removeColumnDef","defaultHeaderTextTransform","CdkTableModule","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleChange","_changeDetector","defaultOptions","_vertical","_controlValueAccessorChangeFn","appearance","_buttonToggles","_markForCheck","deferEvents","_updateModelValue","_rawValue","_clearSelection","MatButtonToggle","vertical","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_focusMonitor","_isSingleSelector","_checked","parsedTabIndex","buttonToggleGroup","_appearance","_isSelected","_syncButtonToggle","_isPrechecked","monitor","stopMonitoring","_buttonElement","newChecked","_onButtonClick","buttonId","MatButtonToggleModule","ReplaySubject","_events","_infiniteTimeWindow","_bufferSize","_windowTime","nextInfiniteTimeWindow","nextTimeWindow","ReplayEvent","_getNow","_trimBufferThenGetEvents","isStopped","thrownError","eventsCount","spliceCount","time","MatFormField_ng_container_3_Template","MatFormField_div_4_Template","MatFormField_label_9_ng_container_2_Template","ctx_r10","MatFormField_label_9_ng_content_3_Template","MatFormField_label_9_span_4_Template","MatFormField_label_9_Template","_r14","updateOutlineGap","_shouldAlwaysFloat","_hasLabel","hideRequiredMarker","MatFormField_div_10_Template","MatFormField_div_11_Template","ctx_r6","MatFormField_div_13_Template","ctx_r7","_subscriptAnimationState","MatFormField_div_14_div_1_Template","ctx_r16","_hintLabelId","hintLabel","MatFormField_div_14_Template","ctx_r8","_c4","_c5","MAT_ERROR","matFormFieldAnimations","transitionMessages","MatFormFieldControl","getMatFormFieldDuplicatedHintError","align","_MAT_HINT","MatLabel","MatPlaceholder","MAT_PREFIX","MAT_SUFFIX","nextUniqueId$2","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","MAT_FORM_FIELD","MatFormField","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_hintLabel","_labelOptions","floatLabel","_getDefaultFloatLabelState","_animationsEnabled","_hideRequiredMarker","oldValue","_processHints","_floatLabel","_explicitFormFieldControl","_controlNonStatic","_controlStatic","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","prop","_placeholderChild","_labelChildNonStatic","_labelChildStatic","_canLabelFloat","shouldLabelFloat","_shouldLabelFloat","_hasPlaceholder","_label","_validateHints","startHint","endHint","hint","float","_getDisplayedMessages","setDescribedByIds","labelEl","_isAttachedToDOM","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelChildren","labelStart","labelWidth","offsetWidth","outlineGapPadding","getRootNode","underlineRef","_inputContainerRef","_hideControlPlaceholder","autofilled","focused","_shouldForward","onContainerClick","MatFormFieldModule","hasV8BreakIterator","v8BreakIterator","supportedInputTypes","Platform","_platformId","EDGE","navigator","TRIDENT","BLINK","chrome","CSS","WEBKIT","FIREFOX","ANDROID","SAFARI","PlatformModule","candidateInputTypes","getSupportedInputTypes","featureTestInput","supportsPassiveEvents","rtlScrollAxisType","shadowDomIsSupported","normalizePassiveListenerOptions","defineProperty","supportsPassiveEventListeners","capture","supportsScrollBehavior","getRtlScrollAxisType","scrollContainer","containerStyle","overflow","visibility","content","contentStyle","_getShadowRoot","head","createShadowRoot","attachShadow","_supportsShadowDom","ShadowRoot","DAYS_OF_WEEK","locale","languages","language","setDate","getDate","getDay","m","getFullYear","getMonth","weekday","toLocaleDateString","observeOn","ObserveOnOperator","ObserveOnSubscriber","arg","notification","ObserveOnMessage","scheduleMessage","createNext","createError","createComplete","listenerOptions","AutofillMonitor","_monitoredElements","info","listener","animationName","isAutofilled","unlisten","_info","TextFieldModule","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_formField","_type","_readonly","_neverEmptyInputTypes","_inputValueAccessor","_previousNativeValue","selectionStart","selectionEnd","setSelectionRange","_isServer","_isNativeSelect","_isTextarea","_validateType","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","isFocused","readonly","formField","_previousPlaceholder","validity","badInput","_isNeverEmpty","_isBadInput","selectElement","firstOption","_focusChanged","_onInput","MatInputModule","_execute","queue","ActiveDescendantKeyManager","_items","_activeItemIndex","_activeItem","_wrap","_letterKeyStream","_typeaheadSubscription","_allowedModifierKeys","_homeAndEnd","_skipPredicateFn","_pressedLetters","newItems","newIndex","shouldWrap","_horizontal","debounceInterval","getLabel","letter","inputString","_getItemsArray","previousActiveItem","isModifierAllowed","every","setNextItemActive","setPreviousItemActive","toLocaleUpperCase","String","fromCharCode","_setActiveItemByIndex","_setActiveItemByDelta","itemArray","delta","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","setInactiveStyles","setActiveStyles","LIVE_ANNOUNCER_ELEMENT_TOKEN","LIVE_ANNOUNCER_DEFAULT_OPTIONS","LiveAnnouncer","elementToken","_defaultOptions","_liveElement","_createLiveElement","politeness","_previousTimeout","previousElements","getElementsByClassName","liveEl","isFakeMousedownFromScreenReader","buttons","FOCUS_MONITOR_DEFAULT_OPTIONS","captureEventListenerOptions","FocusMonitor","_windowFocused","_elementInfo","_monitoredElementCount","_rootNodeFocusListenerCount","_documentKeydownListener","_lastTouchTarget","_setOriginForCurrentEventQueue","_documentMousedownListener","_documentTouchstartListener","_touchTimeoutId","getTarget","_windowFocusListener","_windowFocusTimeoutId","_rootNodeFocusAndBlurListener","call","_detectionMode","detectionMode","checkChildren","cachedInfo","_registerGlobalListeners","elementInfo","_setClasses","_removeGlobalListeners","shouldSet","_lastFocusOrigin","_wasCausedByTouch","_toggleClass","_originTimeoutId","focusTarget","Node","_getFocusOrigin","_emitOrigin","relatedTarget","rootNodeFocusListeners","HighContrastModeDetector","documentWindow","computedColor","bodyClasses","mode","getHighContrastMode"],"mappings":"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","file":"default~auth-auth-module~employee-employee-module~main-main-module~setup-setup-module~splash-splash-module.5f9527d2c2692b1a032e.js","sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function distinctUntilChanged(compare, keySelector) {\n    return (source) => source.lift(new DistinctUntilChangedOperator(compare, keySelector));\n}\nclass DistinctUntilChangedOperator {\n    constructor(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    }\n}\nclass DistinctUntilChangedSubscriber extends Subscriber {\n    constructor(destination, compare, keySelector) {\n        super(destination);\n        this.keySelector = keySelector;\n        this.hasKey = false;\n        if (typeof compare === 'function') {\n            this.compare = compare;\n        }\n    }\n    compare(x, y) {\n        return x === y;\n    }\n    _next(value) {\n        let key;\n        try {\n            const { keySelector } = this;\n            key = keySelector ? keySelector(value) : value;\n        }\n        catch (err) {\n            return this.destination.error(err);\n        }\n        let result = false;\n        if (this.hasKey) {\n            try {\n                const { compare } = this;\n                result = compare(this.key, key);\n            }\n            catch (err) {\n                return this.destination.error(err);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (!result) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    }\n}\n//# sourceMappingURL=distinctUntilChanged.js.map","import { isObservable, of, Subject } from 'rxjs';\nimport { ɵɵdefineInjectable, Injectable } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nclass DataSource {\n}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource.\n    return value && typeof value.connect === 'function';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** DataSource wrapper for a native array. */\nclass ArrayDataSource extends DataSource {\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    connect() {\n        return isObservable(this._data) ? this._data : of(this._data);\n    }\n    disconnect() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass SelectionModel {\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        /** Currently-selected values. */\n        this._selection = new Set();\n        /** Keeps track of the deselected options that haven't been emitted by the change event. */\n        this._deselectedToEmit = [];\n        /** Keeps track of the selected options that haven't been emitted by the change event. */\n        this._selectedToEmit = [];\n        /** Event emitted when the value has changed. */\n        this.changed = new Subject();\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /** Selected values. */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    /**\n     * Selects a value or an array of values.\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     */\n    toggle(value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     */\n    clear() {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value) {\n        return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            this._selected.sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /** Selects a value. */\n    _markSelected(value) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /** Deselects a value. */\n    _unmarkSelected(value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /** Clears out the selected values. */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return () => {\n            this._listeners = this._listeners.filter((registered) => {\n                return listener !== registered;\n            });\n        };\n    }\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n}\nUniqueSelectionDispatcher.ɵfac = function UniqueSelectionDispatcher_Factory(t) { return new (t || UniqueSelectionDispatcher)(); };\nUniqueSelectionDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UniqueSelectionDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, getMultipleValuesInSingleSelectionError, isDataSource };\n\n//# sourceMappingURL=collections.js.map","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function takeUntil(notifier) {\n    return (source) => source.lift(new TakeUntilOperator(notifier));\n}\nclass TakeUntilOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n        const notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);\n        if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n            takeUntilSubscriber.add(notifierSubscription);\n            return source.subscribe(takeUntilSubscriber);\n        }\n        return takeUntilSubscriber;\n    }\n}\nclass TakeUntilSubscriber extends OuterSubscriber {\n    constructor(destination) {\n        super(destination);\n        this.seenValue = false;\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.seenValue = true;\n        this.complete();\n    }\n    notifyComplete() {\n    }\n}\n//# sourceMappingURL=takeUntil.js.map","/**\n * @license Angular v10.0.7\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { InjectionToken, forwardRef, Directive, Renderer2, ElementRef, Optional, Inject, Self, ɵisPromise, ɵisObservable, Injectable, Injector, Input, Host, isDevMode, EventEmitter, SkipSelf, Output, NgModule, Version } from '@angular/core';\nimport { ɵgetDOM } from '@angular/common';\nimport { forkJoin, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to provide a `ControlValueAccessor` for form controls.\n *\n * See `DefaultValueAccessor` for how to implement one.\n *\n * @publicApi\n */\nimport * as ɵngcc0 from '@angular/core';\nconst NG_VALUE_ACCESSOR = new InjectionToken('NgValueAccessor');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxControlValueAccessor),\n    multi: true,\n};\n/**\n * @description\n * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input\n * element.\n *\n * @usageNotes\n *\n * ### Using a checkbox with a reactive form.\n *\n * The following example shows how to use a checkbox with a reactive form.\n *\n * ```ts\n * const rememberLoginControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"checkbox\" [formControl]=\"rememberLoginControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass CheckboxControlValueAccessor {\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * @description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = (_) => { };\n        /**\n         * @description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n    }\n    /**\n     * Sets the \"checked\" property on the input element.\n     *\n     * @param value The checked value\n     */\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);\n    }\n    /**\n     * @description\n     * Registers a function called when the control value changes.\n     *\n     * @param fn The callback function\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * @description\n     * Registers a function called when the control is touched.\n     *\n     * @param fn The callback function\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param isDisabled The disabled value\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nCheckboxControlValueAccessor.ɵfac = function CheckboxControlValueAccessor_Factory(t) { return new (t || CheckboxControlValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCheckboxControlValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CheckboxControlValueAccessor, selectors: [[\"input\", \"type\", \"checkbox\", \"formControlName\", \"\"], [\"input\", \"type\", \"checkbox\", \"formControl\", \"\"], [\"input\", \"type\", \"checkbox\", \"ngModel\", \"\"]], hostBindings: function CheckboxControlValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function CheckboxControlValueAccessor_change_HostBindingHandler($event) { return ctx.onChange($event.target.checked); })(\"blur\", function CheckboxControlValueAccessor_blur_HostBindingHandler() { return ctx.onTouched(); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([CHECKBOX_VALUE_ACCESSOR])] });\nCheckboxControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CheckboxControlValueAccessor, [{\n        type: Directive,\n        args: [{\n                selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                providers: [CHECKBOX_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DEFAULT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => DefaultValueAccessor),\n    multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\nfunction _isAndroid() {\n    const userAgent = ɵgetDOM() ? ɵgetDOM().getUserAgent() : '';\n    return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n/**\n * @description\n * Provide this token to control if form directives buffer IME input until\n * the \"compositionend\" event occurs.\n * @publicApi\n */\nconst COMPOSITION_BUFFER_MODE = new InjectionToken('CompositionEventMode');\n/**\n * @description\n * The default `ControlValueAccessor` for writing a value and listening to changes on input\n * elements. The accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using the default value accessor\n *\n * The following example shows how to use an input element that activates the default value accessor\n * (in this case, a text field).\n *\n * ```ts\n * const firstNameControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"text\" [formControl]=\"firstNameControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass DefaultValueAccessor {\n    constructor(_renderer, _elementRef, _compositionMode) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._compositionMode = _compositionMode;\n        /**\n         * @description\n         * The registered callback function called when an input event occurs on the input element.\n         */\n        this.onChange = (_) => { };\n        /**\n         * @description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n        /** Whether the user is creating a composition string (IME events). */\n        this._composing = false;\n        if (this._compositionMode == null) {\n            this._compositionMode = !_isAndroid();\n        }\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     *\n     * @param value The checked value\n     */\n    writeValue(value) {\n        const normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    }\n    /**\n     * @description\n     * Registers a function called when the control value changes.\n     *\n     * @param fn The callback function\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * @description\n     * Registers a function called when the control is touched.\n     *\n     * @param fn The callback function\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param isDisabled The disabled value\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /** @internal */\n    _handleInput(value) {\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n            this.onChange(value);\n        }\n    }\n    /** @internal */\n    _compositionStart() {\n        this._composing = true;\n    }\n    /** @internal */\n    _compositionEnd(value) {\n        this._composing = false;\n        this._compositionMode && this.onChange(value);\n    }\n}\nDefaultValueAccessor.ɵfac = function DefaultValueAccessor_Factory(t) { return new (t || DefaultValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(COMPOSITION_BUFFER_MODE, 8)); };\nDefaultValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DefaultValueAccessor, selectors: [[\"input\", \"formControlName\", \"\", 3, \"type\", \"checkbox\"], [\"textarea\", \"formControlName\", \"\"], [\"input\", \"formControl\", \"\", 3, \"type\", \"checkbox\"], [\"textarea\", \"formControl\", \"\"], [\"input\", \"ngModel\", \"\", 3, \"type\", \"checkbox\"], [\"textarea\", \"ngModel\", \"\"], [\"\", \"ngDefaultControl\", \"\"]], hostBindings: function DefaultValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function DefaultValueAccessor_input_HostBindingHandler($event) { return ctx._handleInput($event.target.value); })(\"blur\", function DefaultValueAccessor_blur_HostBindingHandler() { return ctx.onTouched(); })(\"compositionstart\", function DefaultValueAccessor_compositionstart_HostBindingHandler() { return ctx._compositionStart(); })(\"compositionend\", function DefaultValueAccessor_compositionend_HostBindingHandler($event) { return ctx._compositionEnd($event.target.value); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([DEFAULT_VALUE_ACCESSOR])] });\nDefaultValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DefaultValueAccessor, [{\n        type: Directive,\n        args: [{\n                selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                // TODO: vsavkin replace the above selector with the one below it once\n                // https://github.com/angular/angular/issues/3011 is implemented\n                // selector: '[ngModel],[formControl],[formControlName]',\n                host: {\n                    '(input)': '$any(this)._handleInput($event.target.value)',\n                    '(blur)': 'onTouched()',\n                    '(compositionstart)': '$any(this)._compositionStart()',\n                    '(compositionend)': '$any(this)._compositionEnd($event.target.value)'\n                },\n                providers: [DEFAULT_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: Boolean, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [COMPOSITION_BUFFER_MODE]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n * Base class for control directives.\n *\n * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.\n *\n * @publicApi\n */\nclass AbstractControlDirective {\n    /**\n     * @description\n     * Reports the value of the control if it is present, otherwise null.\n     */\n    get value() {\n        return this.control ? this.control.value : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is valid. A control is considered valid if no\n     * validation errors exist with the current value.\n     * If the control is not present, null is returned.\n     */\n    get valid() {\n        return this.control ? this.control.valid : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is invalid, meaning that an error exists in the input value.\n     * If the control is not present, null is returned.\n     */\n    get invalid() {\n        return this.control ? this.control.invalid : null;\n    }\n    /**\n     * @description\n     * Reports whether a control is pending, meaning that that async validation is occurring and\n     * errors are not yet available for the input value. If the control is not present, null is\n     * returned.\n     */\n    get pending() {\n        return this.control ? this.control.pending : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is disabled, meaning that the control is disabled\n     * in the UI and is exempt from validation checks and excluded from aggregate\n     * values of ancestor controls. If the control is not present, null is returned.\n     */\n    get disabled() {\n        return this.control ? this.control.disabled : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is enabled, meaning that the control is included in ancestor\n     * calculations of validity or value. If the control is not present, null is returned.\n     */\n    get enabled() {\n        return this.control ? this.control.enabled : null;\n    }\n    /**\n     * @description\n     * Reports the control's validation errors. If the control is not present, null is returned.\n     */\n    get errors() {\n        return this.control ? this.control.errors : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is pristine, meaning that the user has not yet changed\n     * the value in the UI. If the control is not present, null is returned.\n     */\n    get pristine() {\n        return this.control ? this.control.pristine : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is dirty, meaning that the user has changed\n     * the value in the UI. If the control is not present, null is returned.\n     */\n    get dirty() {\n        return this.control ? this.control.dirty : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is touched, meaning that the user has triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     */\n    get touched() {\n        return this.control ? this.control.touched : null;\n    }\n    /**\n     * @description\n     * Reports the validation status of the control. Possible values include:\n     * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.\n     * If the control is not present, null is returned.\n     */\n    get status() {\n        return this.control ? this.control.status : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is untouched, meaning that the user has not yet triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     */\n    get untouched() {\n        return this.control ? this.control.untouched : null;\n    }\n    /**\n     * @description\n     * Returns a multicasting observable that emits a validation status whenever it is\n     * calculated for the control. If the control is not present, null is returned.\n     */\n    get statusChanges() {\n        return this.control ? this.control.statusChanges : null;\n    }\n    /**\n     * @description\n     * Returns a multicasting observable of value changes for the control that emits every time the\n     * value of the control changes in the UI or programmatically.\n     * If the control is not present, null is returned.\n     */\n    get valueChanges() {\n        return this.control ? this.control.valueChanges : null;\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return null;\n    }\n    /**\n     * @description\n     * Resets the control with the provided value if the control is present.\n     */\n    reset(value = undefined) {\n        if (this.control)\n            this.control.reset(value);\n    }\n    /**\n     * @description\n     * Reports whether the control with the given path has the error specified.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * If no path is given, this method checks for the error on the current control.\n     *\n     * @returns whether the given error is present in the control at the given path.\n     *\n     * If the control is not present, false is returned.\n     */\n    hasError(errorCode, path) {\n        return this.control ? this.control.hasError(errorCode, path) : false;\n    }\n    /**\n     * @description\n     * Reports error data for the control with the given path.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * @returns error data for that particular error. If the control or error is not present,\n     * null is returned.\n     */\n    getError(errorCode, path) {\n        return this.control ? this.control.getError(errorCode, path) : null;\n    }\n}\nAbstractControlDirective.ɵfac = function AbstractControlDirective_Factory(t) { return new (t || AbstractControlDirective)(); };\nAbstractControlDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AbstractControlDirective });\n\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n * A base class for directives that contain multiple registered instances of `NgControl`.\n * Only used by the forms module.\n *\n * @publicApi\n */\nclass ControlContainer extends AbstractControlDirective {\n    /**\n     * @description\n     * The top-level form directive for the control.\n     */\n    get formDirective() {\n        return null;\n    }\n    /**\n     * @description\n     * The path to this group.\n     */\n    get path() {\n        return null;\n    }\n}\nControlContainer.ɵfac = function ControlContainer_Factory(t) { return ɵControlContainer_BaseFactory(t || ControlContainer); };\nControlContainer.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ControlContainer, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵControlContainer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(ControlContainer);\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction unimplemented() {\n    throw new Error('unimplemented');\n}\n/**\n * @description\n * A base class that all `FormControl`-based directives extend. It binds a `FormControl`\n * object to a DOM element.\n *\n * @publicApi\n */\nclass NgControl extends AbstractControlDirective {\n    constructor() {\n        super(...arguments);\n        /**\n         * @description\n         * The parent form for the control.\n         *\n         * @internal\n         */\n        this._parent = null;\n        /**\n         * @description\n         * The name for the control\n         */\n        this.name = null;\n        /**\n         * @description\n         * The value accessor for the control\n         */\n        this.valueAccessor = null;\n        /**\n         * @description\n         * The uncomposed array of synchronous validators for the control\n         *\n         * @internal\n         */\n        this._rawValidators = [];\n        /**\n         * @description\n         * The uncomposed array of async validators for the control\n         *\n         * @internal\n         */\n        this._rawAsyncValidators = [];\n    }\n    /**\n     * @description\n     * The registered synchronous validator function for the control\n     *\n     * @throws An exception that this method is not implemented\n     */\n    get validator() {\n        return unimplemented();\n    }\n    /**\n     * @description\n     * The registered async validator function for the control\n     *\n     * @throws An exception that this method is not implemented\n     */\n    get asyncValidator() {\n        return unimplemented();\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass AbstractControlStatus {\n    constructor(cd) {\n        this._cd = cd;\n    }\n    get ngClassUntouched() {\n        return this._cd.control ? this._cd.control.untouched : false;\n    }\n    get ngClassTouched() {\n        return this._cd.control ? this._cd.control.touched : false;\n    }\n    get ngClassPristine() {\n        return this._cd.control ? this._cd.control.pristine : false;\n    }\n    get ngClassDirty() {\n        return this._cd.control ? this._cd.control.dirty : false;\n    }\n    get ngClassValid() {\n        return this._cd.control ? this._cd.control.valid : false;\n    }\n    get ngClassInvalid() {\n        return this._cd.control ? this._cd.control.invalid : false;\n    }\n    get ngClassPending() {\n        return this._cd.control ? this._cd.control.pending : false;\n    }\n}\nconst ngControlStatusHost = {\n    '[class.ng-untouched]': 'ngClassUntouched',\n    '[class.ng-touched]': 'ngClassTouched',\n    '[class.ng-pristine]': 'ngClassPristine',\n    '[class.ng-dirty]': 'ngClassDirty',\n    '[class.ng-valid]': 'ngClassValid',\n    '[class.ng-invalid]': 'ngClassInvalid',\n    '[class.ng-pending]': 'ngClassPending',\n};\n/**\n * @description\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status.\n *\n * @usageNotes\n *\n * ### CSS classes applied\n *\n * The following classes are applied as the properties become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgControlStatus extends AbstractControlStatus {\n    constructor(cd) {\n        super(cd);\n    }\n}\nNgControlStatus.ɵfac = function NgControlStatus_Factory(t) { return new (t || NgControlStatus)(ɵngcc0.ɵɵdirectiveInject(NgControl, 2)); };\nNgControlStatus.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgControlStatus, selectors: [[\"\", \"formControlName\", \"\"], [\"\", \"ngModel\", \"\"], [\"\", \"formControl\", \"\"]], hostVars: 14, hostBindings: function NgControlStatus_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ng-untouched\", ctx.ngClassUntouched)(\"ng-touched\", ctx.ngClassTouched)(\"ng-pristine\", ctx.ngClassPristine)(\"ng-dirty\", ctx.ngClassDirty)(\"ng-valid\", ctx.ngClassValid)(\"ng-invalid\", ctx.ngClassInvalid)(\"ng-pending\", ctx.ngClassPending);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nNgControlStatus.ctorParameters = () => [\n    { type: NgControl, decorators: [{ type: Self }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgControlStatus, [{\n        type: Directive,\n        args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost }]\n    }], function () { return [{ type: NgControl, decorators: [{\n                type: Self\n            }] }]; }, null); })();\n/**\n * @description\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * @see `NgControlStatus`\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgControlStatusGroup extends AbstractControlStatus {\n    constructor(cd) {\n        super(cd);\n    }\n}\nNgControlStatusGroup.ɵfac = function NgControlStatusGroup_Factory(t) { return new (t || NgControlStatusGroup)(ɵngcc0.ɵɵdirectiveInject(ControlContainer, 2)); };\nNgControlStatusGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgControlStatusGroup, selectors: [[\"\", \"formGroupName\", \"\"], [\"\", \"formArrayName\", \"\"], [\"\", \"ngModelGroup\", \"\"], [\"\", \"formGroup\", \"\"], [\"form\", 3, \"ngNoForm\", \"\"], [\"\", \"ngForm\", \"\"]], hostVars: 14, hostBindings: function NgControlStatusGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ng-untouched\", ctx.ngClassUntouched)(\"ng-touched\", ctx.ngClassTouched)(\"ng-pristine\", ctx.ngClassPristine)(\"ng-dirty\", ctx.ngClassDirty)(\"ng-valid\", ctx.ngClassValid)(\"ng-invalid\", ctx.ngClassInvalid)(\"ng-pending\", ctx.ngClassPending);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nNgControlStatusGroup.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Self }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgControlStatusGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                host: ngControlStatusHost\n            }]\n    }], function () { return [{ type: ControlContainer, decorators: [{\n                type: Self\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction isEmptyInputValue(value) {\n    // we don't check for string here so it also works with arrays\n    return value == null || value.length === 0;\n}\nfunction hasValidLength(value) {\n    // non-strict comparison is intentional, to check for both `null` and `undefined` values\n    return value != null && typeof value.length === 'number';\n}\n/**\n * @description\n * An `InjectionToken` for registering additional synchronous validators used with\n * `AbstractControl`s.\n *\n * @see `NG_ASYNC_VALIDATORS`\n *\n * @usageNotes\n *\n * ### Providing a custom validator\n *\n * The following example registers a custom validator directive. Adding the validator to the\n * existing collection of validators requires the `multi: true` option.\n *\n * ```typescript\n * @Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors | null {\n *     return { 'custom': true };\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nconst NG_VALIDATORS = new InjectionToken('NgValidators');\n/**\n * @description\n * An `InjectionToken` for registering additional asynchronous validators used with\n * `AbstractControl`s.\n *\n * @see `NG_VALIDATORS`\n *\n * @publicApi\n */\nconst NG_ASYNC_VALIDATORS = new InjectionToken('NgAsyncValidators');\n/**\n * A regular expression that matches valid e-mail addresses.\n *\n * At a high level, this regexp matches e-mail addresses of the format `local-part@tld`, where:\n * - `local-part` consists of one or more of the allowed characters (alphanumeric and some\n *   punctuation symbols).\n * - `local-part` cannot begin or end with a period (`.`).\n * - `local-part` cannot be longer than 64 characters.\n * - `tld` consists of one or more `labels` separated by periods (`.`). For example `localhost` or\n *   `foo.com`.\n * - A `label` consists of one or more of the allowed characters (alphanumeric, dashes (`-`) and\n *   periods (`.`)).\n * - A `label` cannot begin or end with a dash (`-`) or a period (`.`).\n * - A `label` cannot be longer than 63 characters.\n * - The whole address cannot be longer than 254 characters.\n *\n * ## Implementation background\n *\n * This regexp was ported over from AngularJS (see there for git history):\n * https://github.com/angular/angular.js/blob/c133ef836/src/ng/directive/input.js#L27\n * It is based on the\n * [WHATWG version](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\n * some enhancements to incorporate more RFC rules (such as rules related to domain names and the\n * lengths of different parts of the address). The main differences from the WHATWG version are:\n *   - Disallow `local-part` to begin or end with a period (`.`).\n *   - Disallow `local-part` length to exceed 64 characters.\n *   - Disallow total address length to exceed 254 characters.\n *\n * See [this commit](https://github.com/angular/angular.js/commit/f3f5cf72e) for more details.\n */\nconst EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n/**\n * @description\n * Provides a set of built-in validators that can be used by form controls.\n *\n * A validator is a function that processes a `FormControl` or collection of\n * controls and returns an error map or null. A null map means that validation has passed.\n *\n * @see [Form Validation](/guide/form-validation)\n *\n * @publicApi\n */\nclass Validators {\n    /**\n     * @description\n     * Validator that requires the control's value to be greater than or equal to the provided number.\n     * The validator exists only as a function and not as a directive.\n     *\n     * @usageNotes\n     *\n     * ### Validate against a minimum of 3\n     *\n     * ```typescript\n     * const control = new FormControl(2, Validators.min(3));\n     *\n     * console.log(control.errors); // {min: {min: 3, actual: 2}}\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `min` property if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static min(min) {\n        return (control) => {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            const value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n            return !isNaN(value) && value < min ? { 'min': { 'min': min, 'actual': control.value } } : null;\n        };\n    }\n    /**\n     * @description\n     * Validator that requires the control's value to be less than or equal to the provided number.\n     * The validator exists only as a function and not as a directive.\n     *\n     * @usageNotes\n     *\n     * ### Validate against a maximum of 15\n     *\n     * ```typescript\n     * const control = new FormControl(16, Validators.max(15));\n     *\n     * console.log(control.errors); // {max: {max: 15, actual: 16}}\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `max` property if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static max(max) {\n        return (control) => {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            const value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n            return !isNaN(value) && value > max ? { 'max': { 'max': max, 'actual': control.value } } : null;\n        };\n    }\n    /**\n     * @description\n     * Validator that requires the control have a non-empty value.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field is non-empty\n     *\n     * ```typescript\n     * const control = new FormControl('', Validators.required);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @returns An error map with the `required` property\n     * if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static required(control) {\n        return isEmptyInputValue(control.value) ? { 'required': true } : null;\n    }\n    /**\n     * @description\n     * Validator that requires the control's value be true. This validator is commonly\n     * used for required checkboxes.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field value is true\n     *\n     * ```typescript\n     * const control = new FormControl('', Validators.requiredTrue);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @returns An error map that contains the `required` property\n     * set to `true` if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static requiredTrue(control) {\n        return control.value === true ? null : { 'required': true };\n    }\n    /**\n     * @description\n     * Validator that requires the control's value pass an email validation test.\n     *\n     * Tests the value using a [regular\n     * expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n     * pattern suitable for common usecases. The pattern is based on the definition of a valid email\n     * address in the [WHATWG HTML\n     * specification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\n     * some enhancements to incorporate more RFC rules (such as rules related to domain names and the\n     * lengths of different parts of the address).\n     *\n     * The differences from the WHATWG version include:\n     * - Disallow `local-part` (the part before the `@` symbol) to begin or end with a period (`.`).\n     * - Disallow `local-part` to be longer than 64 characters.\n     * - Disallow the whole address to be longer than 254 characters.\n     *\n     * If this pattern does not satisfy your business needs, you can use `Validators.pattern()` to\n     * validate the value against a different pattern.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field matches a valid email pattern\n     *\n     * ```typescript\n     * const control = new FormControl('bad@', Validators.email);\n     *\n     * console.log(control.errors); // {email: true}\n     * ```\n     *\n     * @returns An error map with the `email` property\n     * if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static email(control) {\n        if (isEmptyInputValue(control.value)) {\n            return null; // don't validate empty values to allow optional controls\n        }\n        return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\n    }\n    /**\n     * @description\n     * Validator that requires the length of the control's value to be greater than or equal\n     * to the provided minimum length. This validator is also provided by default if you use the\n     * the HTML5 `minlength` attribute. Note that the `minLength` validator is intended to be used\n     * only for types that have a numeric `length` property, such as strings or arrays. The\n     * `minLength` validator logic is also not invoked for values when their `length` property is 0\n     * (for example in case of an empty string or an empty array), to support optional controls. You\n     * can use the standard `required` validator if empty values should not be considered valid.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field has a minimum of 3 characters\n     *\n     * ```typescript\n     * const control = new FormControl('ng', Validators.minLength(3));\n     *\n     * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\n     * ```\n     *\n     * ```html\n     * <input minlength=\"5\">\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `minlength` if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static minLength(minLength) {\n        return (control) => {\n            if (isEmptyInputValue(control.value) || !hasValidLength(control.value)) {\n                // don't validate empty values to allow optional controls\n                // don't validate values without `length` property\n                return null;\n            }\n            return control.value.length < minLength ?\n                { 'minlength': { 'requiredLength': minLength, 'actualLength': control.value.length } } :\n                null;\n        };\n    }\n    /**\n     * @description\n     * Validator that requires the length of the control's value to be less than or equal\n     * to the provided maximum length. This validator is also provided by default if you use the\n     * the HTML5 `maxlength` attribute. Note that the `maxLength` validator is intended to be used\n     * only for types that have a numeric `length` property, such as strings or arrays.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field has maximum of 5 characters\n     *\n     * ```typescript\n     * const control = new FormControl('Angular', Validators.maxLength(5));\n     *\n     * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}\n     * ```\n     *\n     * ```html\n     * <input maxlength=\"5\">\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `maxlength` property if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static maxLength(maxLength) {\n        return (control) => {\n            return hasValidLength(control.value) && control.value.length > maxLength ?\n                { 'maxlength': { 'requiredLength': maxLength, 'actualLength': control.value.length } } :\n                null;\n        };\n    }\n    /**\n     * @description\n     * Validator that requires the control's value to match a regex pattern. This validator is also\n     * provided by default if you use the HTML5 `pattern` attribute.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field only contains letters or spaces\n     *\n     * ```typescript\n     * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));\n     *\n     * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}\n     * ```\n     *\n     * ```html\n     * <input pattern=\"[a-zA-Z ]*\">\n     * ```\n     *\n     * @param pattern A regular expression to be used as is to test the values, or a string.\n     * If a string is passed, the `^` character is prepended and the `$` character is\n     * appended to the provided string (if not already present), and the resulting regular\n     * expression is used to test the values.\n     *\n     * @returns A validator function that returns an error map with the\n     * `pattern` property if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static pattern(pattern) {\n        if (!pattern)\n            return Validators.nullValidator;\n        let regex;\n        let regexStr;\n        if (typeof pattern === 'string') {\n            regexStr = '';\n            if (pattern.charAt(0) !== '^')\n                regexStr += '^';\n            regexStr += pattern;\n            if (pattern.charAt(pattern.length - 1) !== '$')\n                regexStr += '$';\n            regex = new RegExp(regexStr);\n        }\n        else {\n            regexStr = pattern.toString();\n            regex = pattern;\n        }\n        return (control) => {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            const value = control.value;\n            return regex.test(value) ? null :\n                { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n        };\n    }\n    /**\n     * @description\n     * Validator that performs no operation.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static nullValidator(control) {\n        return null;\n    }\n    static compose(validators) {\n        if (!validators)\n            return null;\n        const presentValidators = validators.filter(isPresent);\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            return _mergeErrors(_executeValidators(control, presentValidators));\n        };\n    }\n    /**\n     * @description\n     * Compose multiple async validators into a single function that returns the union\n     * of the individual error objects for the provided control.\n     *\n     * @returns A validator function that returns an error map with the\n     * merged error objects of the async validators if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static composeAsync(validators) {\n        if (!validators)\n            return null;\n        const presentValidators = validators.filter(isPresent);\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            const observables = _executeAsyncValidators(control, presentValidators).map(toObservable);\n            return forkJoin(observables).pipe(map(_mergeErrors));\n        };\n    }\n}\nfunction isPresent(o) {\n    return o != null;\n}\nfunction toObservable(r) {\n    const obs = ɵisPromise(r) ? from(r) : r;\n    if (!(ɵisObservable(obs))) {\n        throw new Error(`Expected validator to return Promise or Observable.`);\n    }\n    return obs;\n}\nfunction _executeValidators(control, validators) {\n    return validators.map(v => v(control));\n}\nfunction _executeAsyncValidators(control, validators) {\n    return validators.map(v => v(control));\n}\nfunction _mergeErrors(arrayOfErrors) {\n    let res = {};\n    // Not using Array.reduce here due to a Chrome 80 bug\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982\n    arrayOfErrors.forEach((errors) => {\n        res = errors != null ? Object.assign(Object.assign({}, res), errors) : res;\n    });\n    return Object.keys(res).length === 0 ? null : res;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction normalizeValidator(validator) {\n    if (!!validator.validate) {\n        return (c) => validator.validate(c);\n    }\n    else {\n        return validator;\n    }\n}\nfunction normalizeAsyncValidator(validator) {\n    if (!!validator.validate) {\n        return (c) => validator.validate(c);\n    }\n    else {\n        return validator;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst NUMBER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NumberValueAccessor),\n    multi: true\n};\n/**\n * @description\n * The `ControlValueAccessor` for writing a number value and listening to number input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`\n * directives.\n *\n * @usageNotes\n *\n * ### Using a number input with a reactive form.\n *\n * The following example shows how to use a number input with a reactive form.\n *\n * ```ts\n * const totalCountControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"number\" [formControl]=\"totalCountControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NumberValueAccessor {\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * @description\n         * The registered callback function called when a change or input event occurs on the input\n         * element.\n         */\n        this.onChange = (_) => { };\n        /**\n         * @description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     *\n     * @param value The checked value\n     */\n    writeValue(value) {\n        // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n        const normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    }\n    /**\n     * @description\n     * Registers a function called when the control value changes.\n     *\n     * @param fn The callback function\n     */\n    registerOnChange(fn) {\n        this.onChange = (value) => {\n            fn(value == '' ? null : parseFloat(value));\n        };\n    }\n    /**\n     * @description\n     * Registers a function called when the control is touched.\n     *\n     * @param fn The callback function\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param isDisabled The disabled value\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nNumberValueAccessor.ɵfac = function NumberValueAccessor_Factory(t) { return new (t || NumberValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nNumberValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NumberValueAccessor, selectors: [[\"input\", \"type\", \"number\", \"formControlName\", \"\"], [\"input\", \"type\", \"number\", \"formControl\", \"\"], [\"input\", \"type\", \"number\", \"ngModel\", \"\"]], hostBindings: function NumberValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function NumberValueAccessor_input_HostBindingHandler($event) { return ctx.onChange($event.target.value); })(\"blur\", function NumberValueAccessor_blur_HostBindingHandler() { return ctx.onTouched(); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([NUMBER_VALUE_ACCESSOR])] });\nNumberValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NumberValueAccessor, [{\n        type: Directive,\n        args: [{\n                selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                providers: [NUMBER_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst RADIO_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioControlValueAccessor),\n    multi: true\n};\n/**\n * @description\n * Class used by Angular to track radio buttons. For internal use only.\n */\nclass RadioControlRegistry {\n    constructor() {\n        this._accessors = [];\n    }\n    /**\n     * @description\n     * Adds a control to the internal registry. For internal use only.\n     */\n    add(control, accessor) {\n        this._accessors.push([control, accessor]);\n    }\n    /**\n     * @description\n     * Removes a control from the internal registry. For internal use only.\n     */\n    remove(accessor) {\n        for (let i = this._accessors.length - 1; i >= 0; --i) {\n            if (this._accessors[i][1] === accessor) {\n                this._accessors.splice(i, 1);\n                return;\n            }\n        }\n    }\n    /**\n     * @description\n     * Selects a radio button. For internal use only.\n     */\n    select(accessor) {\n        this._accessors.forEach((c) => {\n            if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].fireUncheck(accessor.value);\n            }\n        });\n    }\n    _isSameGroup(controlPair, accessor) {\n        if (!controlPair[0].control)\n            return false;\n        return controlPair[0]._parent === accessor._control._parent &&\n            controlPair[1].name === accessor.name;\n    }\n}\nRadioControlRegistry.ɵfac = function RadioControlRegistry_Factory(t) { return new (t || RadioControlRegistry)(); };\nRadioControlRegistry.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: RadioControlRegistry, factory: RadioControlRegistry.ɵfac });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RadioControlRegistry, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n/**\n * @description\n * The `ControlValueAccessor` for writing radio control values and listening to radio control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using radio buttons with reactive form directives\n *\n * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in\n * a reactive form, radio buttons in the same group should have the same `formControlName`.\n * Providing a `name` attribute is optional.\n *\n * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass RadioControlValueAccessor {\n    constructor(_renderer, _elementRef, _registry, _injector) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._registry = _registry;\n        this._injector = _injector;\n        /**\n         * @description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = () => { };\n        /**\n         * @description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n    }\n    /**\n     * @description\n     * A lifecycle method called when the directive is initialized. For internal use only.\n     */\n    ngOnInit() {\n        this._control = this._injector.get(NgControl);\n        this._checkName();\n        this._registry.add(this._control, this);\n    }\n    /**\n     * @description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     */\n    ngOnDestroy() {\n        this._registry.remove(this);\n    }\n    /**\n     * @description\n     * Sets the \"checked\" property value on the radio input element.\n     *\n     * @param value The checked value\n     */\n    writeValue(value) {\n        this._state = value === this.value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\n    }\n    /**\n     * @description\n     * Registers a function called when the control value changes.\n     *\n     * @param fn The callback function\n     */\n    registerOnChange(fn) {\n        this._fn = fn;\n        this.onChange = () => {\n            fn(this.value);\n            this._registry.select(this);\n        };\n    }\n    /**\n     * Sets the \"value\" on the radio input element and unchecks it.\n     *\n     * @param value\n     */\n    fireUncheck(value) {\n        this.writeValue(value);\n    }\n    /**\n     * @description\n     * Registers a function called when the control is touched.\n     *\n     * @param fn The callback function\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param isDisabled The disabled value\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    _checkName() {\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\n            this._throwNameError();\n        }\n        if (!this.name && this.formControlName)\n            this.name = this.formControlName;\n    }\n    _throwNameError() {\n        throw new Error(`\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n    }\n}\nRadioControlValueAccessor.ɵfac = function RadioControlValueAccessor_Factory(t) { return new (t || RadioControlValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(RadioControlRegistry), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };\nRadioControlValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RadioControlValueAccessor, selectors: [[\"input\", \"type\", \"radio\", \"formControlName\", \"\"], [\"input\", \"type\", \"radio\", \"formControl\", \"\"], [\"input\", \"type\", \"radio\", \"ngModel\", \"\"]], hostBindings: function RadioControlValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function RadioControlValueAccessor_change_HostBindingHandler() { return ctx.onChange(); })(\"blur\", function RadioControlValueAccessor_blur_HostBindingHandler() { return ctx.onTouched(); });\n    } }, inputs: { name: \"name\", formControlName: \"formControlName\", value: \"value\" }, features: [ɵngcc0.ɵɵProvidersFeature([RADIO_VALUE_ACCESSOR])] });\nRadioControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: RadioControlRegistry },\n    { type: Injector }\n];\nRadioControlValueAccessor.propDecorators = {\n    name: [{ type: Input }],\n    formControlName: [{ type: Input }],\n    value: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RadioControlValueAccessor, [{\n        type: Directive,\n        args: [{\n                selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                providers: [RADIO_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: RadioControlRegistry }, { type: ɵngcc0.Injector }]; }, { name: [{\n            type: Input\n        }], formControlName: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst RANGE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RangeValueAccessor),\n    multi: true\n};\n/**\n * @description\n * The `ControlValueAccessor` for writing a range value and listening to range input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`\n * directives.\n *\n * @usageNotes\n *\n * ### Using a range input with a reactive form\n *\n * The following example shows how to use a range input with a reactive form.\n *\n * ```ts\n * const ageControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"range\" [formControl]=\"ageControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass RangeValueAccessor {\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * @description\n         * The registered callback function called when a change or input event occurs on the input\n         * element.\n         */\n        this.onChange = (_) => { };\n        /**\n         * @description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     *\n     * @param value The checked value\n     */\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n    }\n    /**\n     * @description\n     * Registers a function called when the control value changes.\n     *\n     * @param fn The callback function\n     */\n    registerOnChange(fn) {\n        this.onChange = (value) => {\n            fn(value == '' ? null : parseFloat(value));\n        };\n    }\n    /**\n     * @description\n     * Registers a function called when the control is touched.\n     *\n     * @param fn The callback function\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the \"disabled\" property on the range input element.\n     *\n     * @param isDisabled The disabled value\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nRangeValueAccessor.ɵfac = function RangeValueAccessor_Factory(t) { return new (t || RangeValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nRangeValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RangeValueAccessor, selectors: [[\"input\", \"type\", \"range\", \"formControlName\", \"\"], [\"input\", \"type\", \"range\", \"formControl\", \"\"], [\"input\", \"type\", \"range\", \"ngModel\", \"\"]], hostBindings: function RangeValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function RangeValueAccessor_change_HostBindingHandler($event) { return ctx.onChange($event.target.value); })(\"input\", function RangeValueAccessor_input_HostBindingHandler($event) { return ctx.onChange($event.target.value); })(\"blur\", function RangeValueAccessor_blur_HostBindingHandler() { return ctx.onTouched(); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([RANGE_VALUE_ACCESSOR])] });\nRangeValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RangeValueAccessor, [{\n        type: Directive,\n        args: [{\n                selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n                host: {\n                    '(change)': 'onChange($event.target.value)',\n                    '(input)': 'onChange($event.target.value)',\n                    '(blur)': 'onTouched()'\n                },\n                providers: [RANGE_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst FormErrorExamples = {\n    formControlName: `\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });`,\n    formGroupName: `\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });`,\n    formArrayName: `\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });`,\n    ngModelGroup: `\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>`,\n    ngModelWithFormGroup: `\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  `\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ReactiveErrors {\n    static controlParentException() {\n        throw new Error(`formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${FormErrorExamples.formControlName}`);\n    }\n    static ngModelGroupException() {\n        throw new Error(`formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        ${FormErrorExamples.formGroupName}\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        ${FormErrorExamples.ngModelGroup}`);\n    }\n    static missingFormException() {\n        throw new Error(`formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       ${FormErrorExamples.formControlName}`);\n    }\n    static groupParentException() {\n        throw new Error(`formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${FormErrorExamples.formGroupName}`);\n    }\n    static arrayParentException() {\n        throw new Error(`formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        ${FormErrorExamples.formArrayName}`);\n    }\n    static disabledAttrWarning() {\n        console.warn(`\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n\n      Example:\n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    `);\n    }\n    static ngModelWarning(directiveName) {\n        console.warn(`\n    It looks like you're using ngModel on the same form field as ${directiveName}.\n    Support for using the ngModel input property and ngModelChange event with\n    reactive form directives has been deprecated in Angular v6 and will be removed\n    in a future version of Angular.\n\n    For more information on this, see our API docs here:\n    https://angular.io/api/forms/${directiveName === 'formControl' ? 'FormControlDirective' :\n            'FormControlName'}#use-with-ngmodel\n    `);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst SELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SelectControlValueAccessor),\n    multi: true\n};\nfunction _buildValueString(id, value) {\n    if (id == null)\n        return `${value}`;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return `${id}: ${value}`.slice(0, 50);\n}\nfunction _extractId(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * @description\n * The `ControlValueAccessor` for writing select control values and listening to select control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using select controls in a reactive form\n *\n * The following examples show how to use a select control in a reactive form.\n *\n * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Using select controls in a template-driven form\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * {@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * ### Customizing option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * ```ts\n * const selectedCountriesControl = new FormControl();\n * ```\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [formControl]=\"selectedCountriesControl\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * **Note:** We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass SelectControlValueAccessor {\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /** @internal */\n        this._optionMap = new Map();\n        /** @internal */\n        this._idCounter = 0;\n        /**\n         * @description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = (_) => { };\n        /**\n         * @description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n        this._compareWith = Object.is;\n    }\n    /**\n     * @description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n        }\n        this._compareWith = fn;\n    }\n    /**\n     * Sets the \"value\" property on the input element. The \"selectedIndex\"\n     * property is also set if an ID is provided on the option element.\n     *\n     * @param value The checked value\n     */\n    writeValue(value) {\n        this.value = value;\n        const id = this._getOptionId(value);\n        if (id == null) {\n            this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n        }\n        const valueString = _buildValueString(id, value);\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);\n    }\n    /**\n     * @description\n     * Registers a function called when the control value changes.\n     *\n     * @param fn The callback function\n     */\n    registerOnChange(fn) {\n        this.onChange = (valueString) => {\n            this.value = this._getOptionValue(valueString);\n            fn(this.value);\n        };\n    }\n    /**\n     * @description\n     * Registers a function called when the control is touched.\n     *\n     * @param fn The callback function\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the \"disabled\" property on the select input element.\n     *\n     * @param isDisabled The disabled value\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /** @internal */\n    _registerOption() {\n        return (this._idCounter++).toString();\n    }\n    /** @internal */\n    _getOptionId(value) {\n        for (const id of Array.from(this._optionMap.keys())) {\n            if (this._compareWith(this._optionMap.get(id), value))\n                return id;\n        }\n        return null;\n    }\n    /** @internal */\n    _getOptionValue(valueString) {\n        const id = _extractId(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n    }\n}\nSelectControlValueAccessor.ɵfac = function SelectControlValueAccessor_Factory(t) { return new (t || SelectControlValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nSelectControlValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SelectControlValueAccessor, selectors: [[\"select\", \"formControlName\", \"\", 3, \"multiple\", \"\"], [\"select\", \"formControl\", \"\", 3, \"multiple\", \"\"], [\"select\", \"ngModel\", \"\", 3, \"multiple\", \"\"]], hostBindings: function SelectControlValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function SelectControlValueAccessor_change_HostBindingHandler($event) { return ctx.onChange($event.target.value); })(\"blur\", function SelectControlValueAccessor_blur_HostBindingHandler() { return ctx.onTouched(); });\n    } }, inputs: { compareWith: \"compareWith\" }, features: [ɵngcc0.ɵɵProvidersFeature([SELECT_VALUE_ACCESSOR])] });\nSelectControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nSelectControlValueAccessor.propDecorators = {\n    compareWith: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SelectControlValueAccessor, [{\n        type: Directive,\n        args: [{\n                selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                providers: [SELECT_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { compareWith: [{\n            type: Input\n        }] }); })();\n/**\n * @description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see `SelectControlValueAccessor`\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgSelectOption {\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select)\n            this.id = this._select._registerOption();\n    }\n    /**\n     * @description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     */\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._select._optionMap.set(this.id, value);\n        this._setElementValue(_buildValueString(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    /**\n     * @description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     */\n    set value(value) {\n        this._setElementValue(value);\n        if (this._select)\n            this._select.writeValue(this._select.value);\n    }\n    /** @internal */\n    _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /**\n     * @description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     */\n    ngOnDestroy() {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n}\nNgSelectOption.ɵfac = function NgSelectOption_Factory(t) { return new (t || NgSelectOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(SelectControlValueAccessor, 9)); };\nNgSelectOption.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgSelectOption, selectors: [[\"option\"]], inputs: { ngValue: \"ngValue\", value: \"value\" } });\nNgSelectOption.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: SelectControlValueAccessor, decorators: [{ type: Optional }, { type: Host }] }\n];\nNgSelectOption.propDecorators = {\n    ngValue: [{ type: Input, args: ['ngValue',] }],\n    value: [{ type: Input, args: ['value',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgSelectOption, [{\n        type: Directive,\n        args: [{ selector: 'option' }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: SelectControlValueAccessor, decorators: [{\n                type: Optional\n            }, {\n                type: Host\n            }] }]; }, { ngValue: [{\n            type: Input,\n            args: ['ngValue']\n        }], value: [{\n            type: Input,\n            args: ['value']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst SELECT_MULTIPLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SelectMultipleControlValueAccessor),\n    multi: true\n};\nfunction _buildValueString$1(id, value) {\n    if (id == null)\n        return `${value}`;\n    if (typeof value === 'string')\n        value = `'${value}'`;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return `${id}: ${value}`.slice(0, 50);\n}\nfunction _extractId$1(valueString) {\n    return valueString.split(':')[0];\n}\n/** Mock interface for HTMLCollection */\nclass HTMLCollection {\n}\n/**\n * @description\n * The `ControlValueAccessor` for writing multi-select control values and listening to multi-select\n * control changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @see `SelectControlValueAccessor`\n *\n * @usageNotes\n *\n * ### Using a multi-select control\n *\n * The follow example shows you how to use a multi-select control with a reactive form.\n *\n * ```ts\n * const countryControl = new FormControl();\n * ```\n *\n * ```\n * <select multiple name=\"countries\" [formControl]=\"countryControl\">\n *   <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *     {{ country.name }}\n *   </option>\n * </select>\n * ```\n *\n * ### Customizing option selection\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * See the `SelectControlValueAccessor` for usage.\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass SelectMultipleControlValueAccessor {\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /** @internal */\n        this._optionMap = new Map();\n        /** @internal */\n        this._idCounter = 0;\n        /**\n         * @description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = (_) => { };\n        /**\n         * @description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n        this._compareWith = Object.is;\n    }\n    /**\n     * @description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n        }\n        this._compareWith = fn;\n    }\n    /**\n     * @description\n     * Sets the \"value\" property on one or of more\n     * of the select's options.\n     *\n     * @param value The value\n     */\n    writeValue(value) {\n        this.value = value;\n        let optionSelectedStateSetter;\n        if (Array.isArray(value)) {\n            // convert values to ids\n            const ids = value.map((v) => this._getOptionId(v));\n            optionSelectedStateSetter = (opt, o) => {\n                opt._setSelected(ids.indexOf(o.toString()) > -1);\n            };\n        }\n        else {\n            optionSelectedStateSetter = (opt, o) => {\n                opt._setSelected(false);\n            };\n        }\n        this._optionMap.forEach(optionSelectedStateSetter);\n    }\n    /**\n     * @description\n     * Registers a function called when the control value changes\n     * and writes an array of the selected options.\n     *\n     * @param fn The callback function\n     */\n    registerOnChange(fn) {\n        this.onChange = (_) => {\n            const selected = [];\n            if (_.selectedOptions !== undefined) {\n                const options = _.selectedOptions;\n                for (let i = 0; i < options.length; i++) {\n                    const opt = options.item(i);\n                    const val = this._getOptionValue(opt.value);\n                    selected.push(val);\n                }\n            }\n            // Degrade on IE\n            else {\n                const options = _.options;\n                for (let i = 0; i < options.length; i++) {\n                    const opt = options.item(i);\n                    if (opt.selected) {\n                        const val = this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n            }\n            this.value = selected;\n            fn(selected);\n        };\n    }\n    /**\n     * @description\n     * Registers a function called when the control is touched.\n     *\n     * @param fn The callback function\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the \"disabled\" property on the select input element.\n     *\n     * @param isDisabled The disabled value\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /** @internal */\n    _registerOption(value) {\n        const id = (this._idCounter++).toString();\n        this._optionMap.set(id, value);\n        return id;\n    }\n    /** @internal */\n    _getOptionId(value) {\n        for (const id of Array.from(this._optionMap.keys())) {\n            if (this._compareWith(this._optionMap.get(id)._value, value))\n                return id;\n        }\n        return null;\n    }\n    /** @internal */\n    _getOptionValue(valueString) {\n        const id = _extractId$1(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;\n    }\n}\nSelectMultipleControlValueAccessor.ɵfac = function SelectMultipleControlValueAccessor_Factory(t) { return new (t || SelectMultipleControlValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nSelectMultipleControlValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SelectMultipleControlValueAccessor, selectors: [[\"select\", \"multiple\", \"\", \"formControlName\", \"\"], [\"select\", \"multiple\", \"\", \"formControl\", \"\"], [\"select\", \"multiple\", \"\", \"ngModel\", \"\"]], hostBindings: function SelectMultipleControlValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function SelectMultipleControlValueAccessor_change_HostBindingHandler($event) { return ctx.onChange($event.target); })(\"blur\", function SelectMultipleControlValueAccessor_blur_HostBindingHandler() { return ctx.onTouched(); });\n    } }, inputs: { compareWith: \"compareWith\" }, features: [ɵngcc0.ɵɵProvidersFeature([SELECT_MULTIPLE_VALUE_ACCESSOR])] });\nSelectMultipleControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nSelectMultipleControlValueAccessor.propDecorators = {\n    compareWith: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SelectMultipleControlValueAccessor, [{\n        type: Directive,\n        args: [{\n                selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { compareWith: [{\n            type: Input\n        }] }); })();\n/**\n * @description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see `SelectMultipleControlValueAccessor`\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass ɵNgSelectMultipleOption {\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select) {\n            this.id = this._select._registerOption(this);\n        }\n    }\n    /**\n     * @description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     */\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._value = value;\n        this._setElementValue(_buildValueString$1(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    /**\n     * @description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     */\n    set value(value) {\n        if (this._select) {\n            this._value = value;\n            this._setElementValue(_buildValueString$1(this.id, value));\n            this._select.writeValue(this._select.value);\n        }\n        else {\n            this._setElementValue(value);\n        }\n    }\n    /** @internal */\n    _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /** @internal */\n    _setSelected(selected) {\n        this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n    }\n    /**\n     * @description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     */\n    ngOnDestroy() {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n}\nɵNgSelectMultipleOption.ɵfac = function ɵNgSelectMultipleOption_Factory(t) { return new (t || ɵNgSelectMultipleOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(SelectMultipleControlValueAccessor, 9)); };\nɵNgSelectMultipleOption.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ɵNgSelectMultipleOption, selectors: [[\"option\"]], inputs: { ngValue: \"ngValue\", value: \"value\" } });\nɵNgSelectMultipleOption.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: SelectMultipleControlValueAccessor, decorators: [{ type: Optional }, { type: Host }] }\n];\nɵNgSelectMultipleOption.propDecorators = {\n    ngValue: [{ type: Input, args: ['ngValue',] }],\n    value: [{ type: Input, args: ['value',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ɵNgSelectMultipleOption, [{\n        type: Directive,\n        args: [{ selector: 'option' }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: SelectMultipleControlValueAccessor, decorators: [{\n                type: Optional\n            }, {\n                type: Host\n            }] }]; }, { ngValue: [{\n            type: Input,\n            args: ['ngValue']\n        }], value: [{\n            type: Input,\n            args: ['value']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction controlPath(name, parent) {\n    return [...parent.path, name];\n}\nfunction setUpControl(control, dir) {\n    if (!control)\n        _throwError(dir, 'Cannot find control with');\n    if (!dir.valueAccessor)\n        _throwError(dir, 'No value accessor for form control with');\n    control.validator = Validators.compose([control.validator, dir.validator]);\n    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n    dir.valueAccessor.writeValue(control.value);\n    setUpViewChangePipeline(control, dir);\n    setUpModelChangePipeline(control, dir);\n    setUpBlurPipeline(control, dir);\n    if (dir.valueAccessor.setDisabledState) {\n        control.registerOnDisabledChange((isDisabled) => {\n            dir.valueAccessor.setDisabledState(isDisabled);\n        });\n    }\n    // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n    dir._rawValidators.forEach((validator) => {\n        if (validator.registerOnValidatorChange)\n            validator.registerOnValidatorChange(() => control.updateValueAndValidity());\n    });\n    dir._rawAsyncValidators.forEach((validator) => {\n        if (validator.registerOnValidatorChange)\n            validator.registerOnValidatorChange(() => control.updateValueAndValidity());\n    });\n}\nfunction cleanUpControl(control, dir) {\n    dir.valueAccessor.registerOnChange(() => _noControlError(dir));\n    dir.valueAccessor.registerOnTouched(() => _noControlError(dir));\n    dir._rawValidators.forEach((validator) => {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    });\n    dir._rawAsyncValidators.forEach((validator) => {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    });\n    if (control)\n        control._clearChangeFns();\n}\nfunction setUpViewChangePipeline(control, dir) {\n    dir.valueAccessor.registerOnChange((newValue) => {\n        control._pendingValue = newValue;\n        control._pendingChange = true;\n        control._pendingDirty = true;\n        if (control.updateOn === 'change')\n            updateControl(control, dir);\n    });\n}\nfunction setUpBlurPipeline(control, dir) {\n    dir.valueAccessor.registerOnTouched(() => {\n        control._pendingTouched = true;\n        if (control.updateOn === 'blur' && control._pendingChange)\n            updateControl(control, dir);\n        if (control.updateOn !== 'submit')\n            control.markAsTouched();\n    });\n}\nfunction updateControl(control, dir) {\n    if (control._pendingDirty)\n        control.markAsDirty();\n    control.setValue(control._pendingValue, { emitModelToViewChange: false });\n    dir.viewToModelUpdate(control._pendingValue);\n    control._pendingChange = false;\n}\nfunction setUpModelChangePipeline(control, dir) {\n    control.registerOnChange((newValue, emitModelEvent) => {\n        // control -> view\n        dir.valueAccessor.writeValue(newValue);\n        // control -> ngModel\n        if (emitModelEvent)\n            dir.viewToModelUpdate(newValue);\n    });\n}\nfunction setUpFormContainer(control, dir) {\n    if (control == null)\n        _throwError(dir, 'Cannot find control with');\n    control.validator = Validators.compose([control.validator, dir.validator]);\n    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n}\nfunction _noControlError(dir) {\n    return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\nfunction _throwError(dir, message) {\n    let messageEnd;\n    if (dir.path.length > 1) {\n        messageEnd = `path: '${dir.path.join(' -> ')}'`;\n    }\n    else if (dir.path[0]) {\n        messageEnd = `name: '${dir.path}'`;\n    }\n    else {\n        messageEnd = 'unspecified name attribute';\n    }\n    throw new Error(`${message} ${messageEnd}`);\n}\nfunction composeValidators(validators) {\n    return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\n}\nfunction composeAsyncValidators(validators) {\n    return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n        null;\n}\nfunction isPropertyUpdated(changes, viewModel) {\n    if (!changes.hasOwnProperty('model'))\n        return false;\n    const change = changes['model'];\n    if (change.isFirstChange())\n        return true;\n    return !Object.is(viewModel, change.currentValue);\n}\nconst BUILTIN_ACCESSORS = [\n    CheckboxControlValueAccessor,\n    RangeValueAccessor,\n    NumberValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n];\nfunction isBuiltInAccessor(valueAccessor) {\n    return BUILTIN_ACCESSORS.some(a => valueAccessor.constructor === a);\n}\nfunction syncPendingControls(form, directives) {\n    form._syncPendingControls();\n    directives.forEach(dir => {\n        const control = dir.control;\n        if (control.updateOn === 'submit' && control._pendingChange) {\n            dir.viewToModelUpdate(control._pendingValue);\n            control._pendingChange = false;\n        }\n    });\n}\n// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\nfunction selectValueAccessor(dir, valueAccessors) {\n    if (!valueAccessors)\n        return null;\n    if (!Array.isArray(valueAccessors))\n        _throwError(dir, 'Value accessor was not provided as an array for form control with');\n    let defaultAccessor = undefined;\n    let builtinAccessor = undefined;\n    let customAccessor = undefined;\n    valueAccessors.forEach((v) => {\n        if (v.constructor === DefaultValueAccessor) {\n            defaultAccessor = v;\n        }\n        else if (isBuiltInAccessor(v)) {\n            if (builtinAccessor)\n                _throwError(dir, 'More than one built-in value accessor matches form control with');\n            builtinAccessor = v;\n        }\n        else {\n            if (customAccessor)\n                _throwError(dir, 'More than one custom value accessor matches form control with');\n            customAccessor = v;\n        }\n    });\n    if (customAccessor)\n        return customAccessor;\n    if (builtinAccessor)\n        return builtinAccessor;\n    if (defaultAccessor)\n        return defaultAccessor;\n    _throwError(dir, 'No valid value accessor for form control with');\n    return null;\n}\nfunction removeDir(list, el) {\n    const index = list.indexOf(el);\n    if (index > -1)\n        list.splice(index, 1);\n}\n// TODO(kara): remove after deprecation period\nfunction _ngModelWarning(name, type, instance, warningConfig) {\n    if (!isDevMode() || warningConfig === 'never')\n        return;\n    if (((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce) ||\n        (warningConfig === 'always' && !instance._ngModelWarningSent)) {\n        ReactiveErrors.ngModelWarning(name);\n        type._ngModelWarningSentOnce = true;\n        instance._ngModelWarningSent = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reports that a FormControl is valid, meaning that no errors exist in the input value.\n *\n * @see `status`\n */\nconst VALID = 'VALID';\n/**\n * Reports that a FormControl is invalid, meaning that an error exists in the input value.\n *\n * @see `status`\n */\nconst INVALID = 'INVALID';\n/**\n * Reports that a FormControl is pending, meaning that that async validation is occurring and\n * errors are not yet available for the input value.\n *\n * @see `markAsPending`\n * @see `status`\n */\nconst PENDING = 'PENDING';\n/**\n * Reports that a FormControl is disabled, meaning that the control is exempt from ancestor\n * calculations of validity or value.\n *\n * @see `markAsDisabled`\n * @see `status`\n */\nconst DISABLED = 'DISABLED';\nfunction _find(control, path, delimiter) {\n    if (path == null)\n        return null;\n    if (!Array.isArray(path)) {\n        path = path.split(delimiter);\n    }\n    if (Array.isArray(path) && path.length === 0)\n        return null;\n    // Not using Array.reduce here due to a Chrome 80 bug\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982\n    let controlToFind = control;\n    path.forEach((name) => {\n        if (controlToFind instanceof FormGroup) {\n            controlToFind = controlToFind.controls.hasOwnProperty(name) ?\n                controlToFind.controls[name] :\n                null;\n        }\n        else if (controlToFind instanceof FormArray) {\n            controlToFind = controlToFind.at(name) || null;\n        }\n        else {\n            controlToFind = null;\n        }\n    });\n    return controlToFind;\n}\nfunction coerceToValidator(validatorOrOpts) {\n    const validator = isOptionsObj(validatorOrOpts) ? validatorOrOpts.validators : validatorOrOpts;\n    return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\nfunction coerceToAsyncValidator(asyncValidator, validatorOrOpts) {\n    const origAsyncValidator = isOptionsObj(validatorOrOpts) ? validatorOrOpts.asyncValidators : asyncValidator;\n    return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) :\n        origAsyncValidator || null;\n}\nfunction isOptionsObj(validatorOrOpts) {\n    return validatorOrOpts != null && !Array.isArray(validatorOrOpts) &&\n        typeof validatorOrOpts === 'object';\n}\n/**\n * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * @see [Forms Guide](/guide/forms)\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n * @see [Dynamic Forms Guide](/guide/dynamic-form)\n *\n * @publicApi\n */\nclass AbstractControl {\n    /**\n     * Initialize the AbstractControl instance.\n     *\n     * @param validator The function that determines the synchronous validity of this control.\n     * @param asyncValidator The function that determines the asynchronous validity of this\n     * control.\n     */\n    constructor(validator, asyncValidator) {\n        this.validator = validator;\n        this.asyncValidator = asyncValidator;\n        /** @internal */\n        this._onCollectionChange = () => { };\n        /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * @returns True if the user has not yet changed the value in the UI; compare `dirty`.\n         * Programmatic changes to a control's value do not mark it dirty.\n         */\n        this.pristine = true;\n        /**\n         * True if the control is marked as `touched`.\n         *\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         */\n        this.touched = false;\n        /** @internal */\n        this._onDisabledChange = [];\n    }\n    /**\n     * The parent control.\n     */\n    get parent() {\n        return this._parent;\n    }\n    /**\n     * A control is `valid` when its `status` is `VALID`.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if the control has passed all of its validation tests,\n     * false otherwise.\n     */\n    get valid() {\n        return this.status === VALID;\n    }\n    /**\n     * A control is `invalid` when its `status` is `INVALID`.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if this control has failed one or more of its validation checks,\n     * false otherwise.\n     */\n    get invalid() {\n        return this.status === INVALID;\n    }\n    /**\n     * A control is `pending` when its `status` is `PENDING`.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if this control is in the process of conducting a validation check,\n     * false otherwise.\n     */\n    get pending() {\n        return this.status == PENDING;\n    }\n    /**\n     * A control is `disabled` when its `status` is `DISABLED`.\n     *\n     * Disabled controls are exempt from validation checks and\n     * are not included in the aggregate value of their ancestor\n     * controls.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if the control is disabled, false otherwise.\n     */\n    get disabled() {\n        return this.status === DISABLED;\n    }\n    /**\n     * A control is `enabled` as long as its `status` is not `DISABLED`.\n     *\n     * @returns True if the control has any status other than 'DISABLED',\n     * false if the status is 'DISABLED'.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     */\n    get enabled() {\n        return this.status !== DISABLED;\n    }\n    /**\n     * A control is `dirty` if the user has changed the value\n     * in the UI.\n     *\n     * @returns True if the user has changed the value of this control in the UI; compare `pristine`.\n     * Programmatic changes to a control's value do not mark it dirty.\n     */\n    get dirty() {\n        return !this.pristine;\n    }\n    /**\n     * True if the control has not been marked as touched\n     *\n     * A control is `untouched` if the user has not yet triggered\n     * a `blur` event on it.\n     */\n    get untouched() {\n        return !this.touched;\n    }\n    /**\n     * Reports the update strategy of the `AbstractControl` (meaning\n     * the event on which the control updates itself).\n     * Possible values: `'change'` | `'blur'` | `'submit'`\n     * Default value: `'change'`\n     */\n    get updateOn() {\n        return this._updateOn ? this._updateOn : (this.parent ? this.parent.updateOn : 'change');\n    }\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this overwrites any existing sync validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     */\n    setValidators(newValidator) {\n        this.validator = coerceToValidator(newValidator);\n    }\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * overwrites any existing async validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     */\n    setAsyncValidators(newValidator) {\n        this.asyncValidator = coerceToAsyncValidator(newValidator);\n    }\n    /**\n     * Empties out the sync validator list.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     */\n    clearValidators() {\n        this.validator = null;\n    }\n    /**\n     * Empties out the async validator list.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     */\n    clearAsyncValidators() {\n        this.asyncValidator = null;\n    }\n    /**\n     * Marks the control as `touched`. A control is touched by focus and\n     * blur events that do not change the value.\n     *\n     * @see `markAsUntouched()`\n     * @see `markAsDirty()`\n     * @see `markAsPristine()`\n     *\n     * @param opts Configuration options that determine how the control propagates changes\n     * and emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     */\n    markAsTouched(opts = {}) {\n        this.touched = true;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsTouched(opts);\n        }\n    }\n    /**\n     * Marks the control and all its descendant controls as `touched`.\n     * @see `markAsTouched()`\n     */\n    markAllAsTouched() {\n        this.markAsTouched({ onlySelf: true });\n        this._forEachChild((control) => control.markAllAsTouched());\n    }\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, also marks all children as `untouched`\n     * and recalculates the `touched` status of all parent controls.\n     *\n     * @see `markAsTouched()`\n     * @see `markAsDirty()`\n     * @see `markAsPristine()`\n     *\n     * @param opts Configuration options that determine how the control propagates changes\n     * and emits events after the marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     */\n    markAsUntouched(opts = {}) {\n        this.touched = false;\n        this._pendingTouched = false;\n        this._forEachChild((control) => {\n            control.markAsUntouched({ onlySelf: true });\n        });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    }\n    /**\n     * Marks the control as `dirty`. A control becomes dirty when\n     * the control's value is changed through the UI; compare `markAsTouched`.\n     *\n     * @see `markAsTouched()`\n     * @see `markAsUntouched()`\n     * @see `markAsPristine()`\n     *\n     * @param opts Configuration options that determine how the control propagates changes\n     * and emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     */\n    markAsDirty(opts = {}) {\n        this.pristine = false;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsDirty(opts);\n        }\n    }\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, marks all children as `pristine`,\n     * and recalculates the `pristine` status of all parent\n     * controls.\n     *\n     * @see `markAsTouched()`\n     * @see `markAsUntouched()`\n     * @see `markAsDirty()`\n     *\n     * @param opts Configuration options that determine how the control emits events after\n     * marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     */\n    markAsPristine(opts = {}) {\n        this.pristine = true;\n        this._pendingDirty = false;\n        this._forEachChild((control) => {\n            control.markAsPristine({ onlySelf: true });\n        });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    }\n    /**\n     * Marks the control as `pending`.\n     *\n     * A control is pending while the control performs async validation.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @param opts Configuration options that determine how the control propagates changes and\n     * emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * * `emitEvent`: When true or not supplied (the default), the `statusChanges`\n     * observable emits an event with the latest status the control is marked pending.\n     * When false, no events are emitted.\n     *\n     */\n    markAsPending(opts = {}) {\n        this.status = PENDING;\n        if (opts.emitEvent !== false) {\n            this.statusChanges.emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsPending(opts);\n        }\n    }\n    /**\n     * Disables the control. This means the control is exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children are also disabled.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @param opts Configuration options that determine how the control propagates\n     * changes and emits events after the control is disabled.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is disabled.\n     * When false, no events are emitted.\n     */\n    disable(opts = {}) {\n        // If parent has been marked artificially dirty we don't want to re-calculate the\n        // parent's dirtiness based on the children.\n        const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n        this.status = DISABLED;\n        this.errors = null;\n        this._forEachChild((control) => {\n            control.disable(Object.assign(Object.assign({}, opts), { onlySelf: true }));\n        });\n        this._updateValue();\n        if (opts.emitEvent !== false) {\n            this.valueChanges.emit(this.value);\n            this.statusChanges.emit(this.status);\n        }\n        this._updateAncestors(Object.assign(Object.assign({}, opts), { skipPristineCheck }));\n        this._onDisabledChange.forEach((changeFn) => changeFn(true));\n    }\n    /**\n     * Enables the control. This means the control is included in validation checks and\n     * the aggregate value of its parent. Its status recalculates based on its value and\n     * its validators.\n     *\n     * By default, if the control has children, all children are enabled.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @param opts Configure options that control how the control propagates changes and\n     * emits events when marked as untouched\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is enabled.\n     * When false, no events are emitted.\n     */\n    enable(opts = {}) {\n        // If parent has been marked artificially dirty we don't want to re-calculate the\n        // parent's dirtiness based on the children.\n        const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n        this.status = VALID;\n        this._forEachChild((control) => {\n            control.enable(Object.assign(Object.assign({}, opts), { onlySelf: true }));\n        });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n        this._updateAncestors(Object.assign(Object.assign({}, opts), { skipPristineCheck }));\n        this._onDisabledChange.forEach((changeFn) => changeFn(false));\n    }\n    _updateAncestors(opts) {\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n            if (!opts.skipPristineCheck) {\n                this._parent._updatePristine();\n            }\n            this._parent._updateTouched();\n        }\n    }\n    /**\n     * @param parent Sets the parent of the control\n     */\n    setParent(parent) {\n        this._parent = parent;\n    }\n    /**\n     * Recalculates the value and validation status of the control.\n     *\n     * By default, it also updates the value and validity of its ancestors.\n     *\n     * @param opts Configuration options determine how the control propagates changes and emits events\n     * after updates and validity checks are applied.\n     * * `onlySelf`: When true, only update this control. When false or not supplied,\n     * update all direct ancestors. Default is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is updated.\n     * When false, no events are emitted.\n     */\n    updateValueAndValidity(opts = {}) {\n        this._setInitialStatus();\n        this._updateValue();\n        if (this.enabled) {\n            this._cancelExistingSubscription();\n            this.errors = this._runValidator();\n            this.status = this._calculateStatus();\n            if (this.status === VALID || this.status === PENDING) {\n                this._runAsyncValidator(opts.emitEvent);\n            }\n        }\n        if (opts.emitEvent !== false) {\n            this.valueChanges.emit(this.value);\n            this.statusChanges.emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n        }\n    }\n    /** @internal */\n    _updateTreeValidity(opts = { emitEvent: true }) {\n        this._forEachChild((ctrl) => ctrl._updateTreeValidity(opts));\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n    }\n    _setInitialStatus() {\n        this.status = this._allControlsDisabled() ? DISABLED : VALID;\n    }\n    _runValidator() {\n        return this.validator ? this.validator(this) : null;\n    }\n    _runAsyncValidator(emitEvent) {\n        if (this.asyncValidator) {\n            this.status = PENDING;\n            const obs = toObservable(this.asyncValidator(this));\n            this._asyncValidationSubscription =\n                obs.subscribe((errors) => this.setErrors(errors, { emitEvent }));\n        }\n    }\n    _cancelExistingSubscription() {\n        if (this._asyncValidationSubscription) {\n            this._asyncValidationSubscription.unsubscribe();\n        }\n    }\n    /**\n     * Sets errors on a form control when running validations manually, rather than automatically.\n     *\n     * Calling `setErrors` also updates the validity of the parent control.\n     *\n     * @usageNotes\n     *\n     * ### Manually set the errors for a control\n     *\n     * ```\n     * const login = new FormControl('someLogin');\n     * login.setErrors({\n     *   notUnique: true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({ notUnique: true });\n     *\n     * login.setValue('someOtherLogin');\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     */\n    setErrors(errors, opts = {}) {\n        this.errors = errors;\n        this._updateControlsErrors(opts.emitEvent !== false);\n    }\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * @param path A dot-delimited string or array of string/number values that define the path to the\n     * control.\n     *\n     * @usageNotes\n     * ### Retrieve a nested control\n     *\n     * For example, to get a `name` control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     */\n    get(path) {\n        return _find(this, path, '.');\n    }\n    /**\n     * @description\n     * Reports error data for the control with the given path.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * @returns error data for that particular error. If the control or error is not present,\n     * null is returned.\n     */\n    getError(errorCode, path) {\n        const control = path ? this.get(path) : this;\n        return control && control.errors ? control.errors[errorCode] : null;\n    }\n    /**\n     * @description\n     * Reports whether the control with the given path has the error specified.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * If no path is given, this method checks for the error on the current control.\n     *\n     * @returns whether the given error is present in the control at the given path.\n     *\n     * If the control is not present, false is returned.\n     */\n    hasError(errorCode, path) {\n        return !!this.getError(errorCode, path);\n    }\n    /**\n     * Retrieves the top-level ancestor of this control.\n     */\n    get root() {\n        let x = this;\n        while (x._parent) {\n            x = x._parent;\n        }\n        return x;\n    }\n    /** @internal */\n    _updateControlsErrors(emitEvent) {\n        this.status = this._calculateStatus();\n        if (emitEvent) {\n            this.statusChanges.emit(this.status);\n        }\n        if (this._parent) {\n            this._parent._updateControlsErrors(emitEvent);\n        }\n    }\n    /** @internal */\n    _initObservables() {\n        this.valueChanges = new EventEmitter();\n        this.statusChanges = new EventEmitter();\n    }\n    _calculateStatus() {\n        if (this._allControlsDisabled())\n            return DISABLED;\n        if (this.errors)\n            return INVALID;\n        if (this._anyControlsHaveStatus(PENDING))\n            return PENDING;\n        if (this._anyControlsHaveStatus(INVALID))\n            return INVALID;\n        return VALID;\n    }\n    /** @internal */\n    _anyControlsHaveStatus(status) {\n        return this._anyControls((control) => control.status === status);\n    }\n    /** @internal */\n    _anyControlsDirty() {\n        return this._anyControls((control) => control.dirty);\n    }\n    /** @internal */\n    _anyControlsTouched() {\n        return this._anyControls((control) => control.touched);\n    }\n    /** @internal */\n    _updatePristine(opts = {}) {\n        this.pristine = !this._anyControlsDirty();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    }\n    /** @internal */\n    _updateTouched(opts = {}) {\n        this.touched = this._anyControlsTouched();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    }\n    /** @internal */\n    _isBoxedValue(formState) {\n        return typeof formState === 'object' && formState !== null &&\n            Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n    }\n    /** @internal */\n    _registerOnCollectionChange(fn) {\n        this._onCollectionChange = fn;\n    }\n    /** @internal */\n    _setUpdateStrategy(opts) {\n        if (isOptionsObj(opts) && opts.updateOn != null) {\n            this._updateOn = opts.updateOn;\n        }\n    }\n    /**\n     * Check to see if parent has been marked artificially dirty.\n     *\n     * @internal\n     */\n    _parentMarkedDirty(onlySelf) {\n        const parentDirty = this._parent && this._parent.dirty;\n        return !onlySelf && parentDirty && !this._parent._anyControlsDirty();\n    }\n}\n/**\n * Tracks the value and validation status of an individual form control.\n *\n * This is one of the three fundamental building blocks of Angular forms, along with\n * `FormGroup` and `FormArray`. It extends the `AbstractControl` class that\n * implements most of the base functionality for accessing the value, validation status,\n * user interactions and events. See [usage examples below](#usage-notes).\n *\n * @see `AbstractControl`\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see [Usage Notes](#usage-notes)\n *\n * @usageNotes\n *\n * ### Initializing Form Controls\n *\n * Instantiate a `FormControl`, with an initial value.\n *\n * ```ts\n * const control = new FormControl('some value');\n * console.log(control.value);     // 'some value'\n *```\n *\n * The following example initializes the control with a form state object. The `value`\n * and `disabled` keys are required in this case.\n *\n * ```ts\n * const control = new FormControl({ value: 'n/a', disabled: true });\n * console.log(control.value);     // 'n/a'\n * console.log(control.status);    // 'DISABLED'\n * ```\n *\n * The following example initializes the control with a sync validator.\n *\n * ```ts\n * const control = new FormControl('', Validators.required);\n * console.log(control.value);      // ''\n * console.log(control.status);     // 'INVALID'\n * ```\n *\n * The following example initializes the control using an options object.\n *\n * ```ts\n * const control = new FormControl('', {\n *    validators: Validators.required,\n *    asyncValidators: myAsyncValidator\n * });\n * ```\n *\n * ### Configure the control to update on a blur event\n *\n * Set the `updateOn` option to `'blur'` to update on the blur `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'blur' });\n * ```\n *\n * ### Configure the control to update on a submit event\n *\n * Set the `updateOn` option to `'submit'` to update on a submit `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'submit' });\n * ```\n *\n * ### Reset the control back to an initial value\n *\n * You reset to a specific form state by passing through a standalone\n * value or a form state object that contains both a value and a disabled state\n * (these are the only two properties that cannot be calculated).\n *\n * ```ts\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n *\n * control.reset('Drew');\n *\n * console.log(control.value); // 'Drew'\n * ```\n *\n * ### Reset the control back to an initial value and disabled\n *\n * ```\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n * console.log(control.status); // 'VALID'\n *\n * control.reset({ value: 'Drew', disabled: true });\n *\n * console.log(control.value); // 'Drew'\n * console.log(control.status); // 'DISABLED'\n * ```\n *\n * @publicApi\n */\nclass FormControl extends AbstractControl {\n    /**\n     * Creates a new `FormControl` instance.\n     *\n     * @param formState Initializes the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(formState = null, validatorOrOpts, asyncValidator) {\n        super(coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n        /** @internal */\n        this._onChange = [];\n        this._applyFormState(formState);\n        this._setUpdateStrategy(validatorOrOpts);\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        this._initObservables();\n    }\n    /**\n     * Sets a new value for the form control.\n     *\n     * @param value The new value for the control.\n     * @param options Configuration options that determine how the control propagates changes\n     * and emits events when the value changes.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * * `emitModelToViewChange`: When true or not supplied  (the default), each change triggers an\n     * `onChange` event to\n     * update the view.\n     * * `emitViewToModelChange`: When true or not supplied (the default), each change triggers an\n     * `ngModelChange`\n     * event to update the model.\n     *\n     */\n    setValue(value, options = {}) {\n        this.value = this._pendingValue = value;\n        if (this._onChange.length && options.emitModelToViewChange !== false) {\n            this._onChange.forEach((changeFn) => changeFn(this.value, options.emitViewToModelChange !== false));\n        }\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     *\n     * @see `setValue` for options\n     */\n    patchValue(value, options = {}) {\n        this.setValue(value, options);\n    }\n    /**\n     * Resets the form control, marking it `pristine` and `untouched`, and setting\n     * the value to null.\n     *\n     * @param formState Resets the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param options Configuration options that determine how the control propagates changes\n     * and emits events after the value changes.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     *\n     */\n    reset(formState = null, options = {}) {\n        this._applyFormState(formState);\n        this.markAsPristine(options);\n        this.markAsUntouched(options);\n        this.setValue(this.value, options);\n        this._pendingChange = false;\n    }\n    /**\n     * @internal\n     */\n    _updateValue() { }\n    /**\n     * @internal\n     */\n    _anyControls(condition) {\n        return false;\n    }\n    /**\n     * @internal\n     */\n    _allControlsDisabled() {\n        return this.disabled;\n    }\n    /**\n     * Register a listener for change events.\n     *\n     * @param fn The method that is called when the value changes\n     */\n    registerOnChange(fn) {\n        this._onChange.push(fn);\n    }\n    /**\n     * @internal\n     */\n    _clearChangeFns() {\n        this._onChange = [];\n        this._onDisabledChange = [];\n        this._onCollectionChange = () => { };\n    }\n    /**\n     * Register a listener for disabled events.\n     *\n     * @param fn The method that is called when the disabled status changes.\n     */\n    registerOnDisabledChange(fn) {\n        this._onDisabledChange.push(fn);\n    }\n    /**\n     * @internal\n     */\n    _forEachChild(cb) { }\n    /** @internal */\n    _syncPendingControls() {\n        if (this.updateOn === 'submit') {\n            if (this._pendingDirty)\n                this.markAsDirty();\n            if (this._pendingTouched)\n                this.markAsTouched();\n            if (this._pendingChange) {\n                this.setValue(this._pendingValue, { onlySelf: true, emitModelToViewChange: false });\n                return true;\n            }\n        }\n        return false;\n    }\n    _applyFormState(formState) {\n        if (this._isBoxedValue(formState)) {\n            this.value = this._pendingValue = formState.value;\n            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                this.enable({ onlySelf: true, emitEvent: false });\n        }\n        else {\n            this.value = this._pendingValue = formState;\n        }\n    }\n}\n/**\n * Tracks the value and validity state of a group of `FormControl` instances.\n *\n * A `FormGroup` aggregates the values of each child `FormControl` into one object,\n * with each control name as the key.  It calculates its status by reducing the status values\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormArray`.\n *\n * When instantiating a `FormGroup`, pass in a collection of child controls as the first\n * argument. The key for each child registers the name for the control.\n *\n * @usageNotes\n *\n * ### Create a form group with 2 controls\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * ### Create a form group with a group-level validator\n *\n * You include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * Like `FormControl` instances, you choose to pass in\n * validators and async validators as part of an options object.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });\n * ```\n *\n * ### Set the updateOn property for all controls in a form group\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormGroup({\n *   one: new FormControl()\n * }, { updateOn: 'blur' });\n * ```\n *\n * @publicApi\n */\nclass FormGroup extends AbstractControl {\n    /**\n     * Creates a new `FormGroup` instance.\n     *\n     * @param controls A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n        this.controls = controls;\n        this._initObservables();\n        this._setUpdateStrategy(validatorOrOpts);\n        this._setUpControls();\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n    }\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control.\n     * Use {@link FormGroup#addControl addControl} instead.\n     *\n     * @param name The control name to register in the collection\n     * @param control Provides the control for the given name\n     */\n    registerControl(name, control) {\n        if (this.controls[name])\n            return this.controls[name];\n        this.controls[name] = control;\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n        return control;\n    }\n    /**\n     * Add a control to this group.\n     *\n     * This method also updates the value and validity of the control.\n     *\n     * @param name The control name to add to the collection\n     * @param control Provides the control for the given name\n     */\n    addControl(name, control) {\n        this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Remove a control from this group.\n     *\n     * @param name The control name to remove from the collection\n     */\n    removeControl(name) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(() => { });\n        delete (this.controls[name]);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Replace an existing control.\n     *\n     * @param name The control name to replace in the collection\n     * @param control Provides the control for the given name\n     */\n    setControl(name, control) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(() => { });\n        delete (this.controls[name]);\n        if (control)\n            this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * Reports false for disabled controls. If you'd like to check for existence in the group\n     * only, use {@link AbstractControl#get get} instead.\n     *\n     * @param controlName The control name to check for existence in the collection\n     *\n     * @returns false for disabled controls, true otherwise.\n     */\n    contains(controlName) {\n        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n    }\n    /**\n     * Sets the value of the `FormGroup`. It accepts an object that matches\n     * the structure of the group, with control names as keys.\n     *\n     * @usageNotes\n     * ### Set the complete value for the form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl(),\n     *   last: new FormControl()\n     * });\n     *\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.setValue({first: 'Nancy', last: 'Drew'});\n     * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     * ```\n     *\n     * @throws When strict checks fail, such as setting the value of a control\n     * that doesn't exist or if you exclude a value of a control that does exist.\n     *\n     * @param value The new value for the control that matches the structure of the group.\n     * @param options Configuration options that determine how the control propagates changes\n     * and emits events after the value changes.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     */\n    setValue(value, options = {}) {\n        this._checkAllValuesPresent(value);\n        Object.keys(value).forEach(name => {\n            this._throwIfControlMissing(name);\n            this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormGroup`. It accepts an object with control\n     * names as keys, and does its best to match the values to the correct controls\n     * in the group.\n     *\n     * It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     * @usageNotes\n     * ### Patch the value for a form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *    first: new FormControl(),\n     *    last: new FormControl()\n     * });\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.patchValue({first: 'Nancy'});\n     * console.log(form.value);   // {first: 'Nancy', last: null}\n     * ```\n     *\n     * @param value The object that matches the structure of the group.\n     * @param options Configuration options that determine how the control propagates changes and\n     * emits events after the value is patched.\n     * * `onlySelf`: When true, each change only affects this control and not its parent. Default is\n     * true.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     */\n    patchValue(value, options = {}) {\n        Object.keys(value).forEach(name => {\n            if (this.controls[name]) {\n                this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormGroup`, marks all descendants are marked `pristine` and `untouched`, and\n     * the value of all descendants to null.\n     *\n     * You reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * is a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * @param value Resets the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param options Configuration options that determine how the control propagates changes\n     * and emits events when the group is reset.\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * @usageNotes\n     *\n     * ### Reset the form group values\n     *\n     * ```ts\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * console.log(form.value);  // {first: 'first name', last: 'last name'}\n     *\n     * form.reset({ first: 'name', last: 'last name' });\n     *\n     * console.log(form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * ### Reset the form group values and disabled status\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     */\n    reset(value = {}, options = {}) {\n        this._forEachChild((control, name) => {\n            control.reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this._updatePristine(options);\n        this._updateTouched(options);\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * The aggregate value of the `FormGroup`, including any disabled controls.\n     *\n     * Retrieves all values regardless of disabled status.\n     * The `value` property is the best way to get the value of the group, because\n     * it excludes disabled controls in the `FormGroup`.\n     */\n    getRawValue() {\n        return this._reduceChildren({}, (acc, control, name) => {\n            acc[name] = control instanceof FormControl ? control.value : control.getRawValue();\n            return acc;\n        });\n    }\n    /** @internal */\n    _syncPendingControls() {\n        let subtreeUpdated = this._reduceChildren(false, (updated, child) => {\n            return child._syncPendingControls() ? true : updated;\n        });\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    }\n    /** @internal */\n    _throwIfControlMissing(name) {\n        if (!Object.keys(this.controls).length) {\n            throw new Error(`\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n        }\n        if (!this.controls[name]) {\n            throw new Error(`Cannot find form control with name: ${name}.`);\n        }\n    }\n    /** @internal */\n    _forEachChild(cb) {\n        Object.keys(this.controls).forEach(k => cb(this.controls[k], k));\n    }\n    /** @internal */\n    _setUpControls() {\n        this._forEachChild((control) => {\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n        });\n    }\n    /** @internal */\n    _updateValue() {\n        this.value = this._reduceValue();\n    }\n    /** @internal */\n    _anyControls(condition) {\n        for (const controlName of Object.keys(this.controls)) {\n            const control = this.controls[controlName];\n            if (this.contains(controlName) && condition(control)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /** @internal */\n    _reduceValue() {\n        return this._reduceChildren({}, (acc, control, name) => {\n            if (control.enabled || this.disabled) {\n                acc[name] = control.value;\n            }\n            return acc;\n        });\n    }\n    /** @internal */\n    _reduceChildren(initValue, fn) {\n        let res = initValue;\n        this._forEachChild((control, name) => {\n            res = fn(res, control, name);\n        });\n        return res;\n    }\n    /** @internal */\n    _allControlsDisabled() {\n        for (const controlName of Object.keys(this.controls)) {\n            if (this.controls[controlName].enabled) {\n                return false;\n            }\n        }\n        return Object.keys(this.controls).length > 0 || this.disabled;\n    }\n    /** @internal */\n    _checkAllValuesPresent(value) {\n        this._forEachChild((control, name) => {\n            if (value[name] === undefined) {\n                throw new Error(`Must supply a value for form control with name: '${name}'.`);\n            }\n        });\n    }\n}\n/**\n * Tracks the value and validity state of an array of `FormControl`,\n * `FormGroup` or `FormArray` instances.\n *\n * A `FormArray` aggregates the values of each child `FormControl` into an array.\n * It calculates its status by reducing the status values of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormGroup`.\n *\n * @usageNotes\n *\n * ### Create an array of form controls\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * ### Create a form array with array-level validators\n *\n * You include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n *\n * The two types of validators are passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n *\n * ### Set the updateOn property for all controls in a form array\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const arr = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n *\n * ### Adding or removing controls from a form array\n *\n * To change the controls in the array, use the `push`, `insert`, `removeAt` or `clear` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that result in strange and unexpected behavior such\n * as broken change detection.\n *\n * @publicApi\n */\nclass FormArray extends AbstractControl {\n    /**\n     * Creates a new `FormArray` instance.\n     *\n     * @param controls An array of child controls. Each child control is given an index\n     * where it is registered.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n        this.controls = controls;\n        this._initObservables();\n        this._setUpdateStrategy(validatorOrOpts);\n        this._setUpControls();\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n    }\n    /**\n     * Get the `AbstractControl` at the given `index` in the array.\n     *\n     * @param index Index in the array to retrieve the control\n     */\n    at(index) {\n        return this.controls[index];\n    }\n    /**\n     * Insert a new `AbstractControl` at the end of the array.\n     *\n     * @param control Form control to be inserted\n     */\n    push(control) {\n        this.controls.push(control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Insert a new `AbstractControl` at the given `index` in the array.\n     *\n     * @param index Index in the array to insert the control\n     * @param control Form control to be inserted\n     */\n    insert(index, control) {\n        this.controls.splice(index, 0, control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n    }\n    /**\n     * Remove the control at the given `index` in the array.\n     *\n     * @param index Index in the array to remove the control\n     */\n    removeAt(index) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(() => { });\n        this.controls.splice(index, 1);\n        this.updateValueAndValidity();\n    }\n    /**\n     * Replace an existing control.\n     *\n     * @param index Index in the array to replace the control\n     * @param control The `AbstractControl` control to replace the existing control\n     */\n    setControl(index, control) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(() => { });\n        this.controls.splice(index, 1);\n        if (control) {\n            this.controls.splice(index, 0, control);\n            this._registerControl(control);\n        }\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Length of the control array.\n     */\n    get length() {\n        return this.controls.length;\n    }\n    /**\n     * Sets the value of the `FormArray`. It accepts an array that matches\n     * the structure of the control.\n     *\n     * This method performs strict checks, and throws an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     * @usageNotes\n     * ### Set the values for the controls in the form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *   new FormControl(),\n     *   new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.setValue(['Nancy', 'Drew']);\n     * console.log(arr.value);   // ['Nancy', 'Drew']\n     * ```\n     *\n     * @param value Array of values for the controls\n     * @param options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     */\n    setValue(value, options = {}) {\n        this._checkAllValuesPresent(value);\n        value.forEach((newValue, index) => {\n            this._throwIfControlMissing(index);\n            this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormArray`. It accepts an array that matches the\n     * structure of the control, and does its best to match the values to the correct\n     * controls in the group.\n     *\n     * It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     * @usageNotes\n     * ### Patch the values for controls in a form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.patchValue(['Nancy']);\n     * console.log(arr.value);   // ['Nancy', null]\n     * ```\n     *\n     * @param value Array of latest values for the controls\n     * @param options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     */\n    patchValue(value, options = {}) {\n        value.forEach((newValue, index) => {\n            if (this.at(index)) {\n                this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the\n     * value of all descendants to null or null maps.\n     *\n     * You reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state is a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * @usageNotes\n     * ### Reset the values in a form array\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * ### Reset the values in a form array and the disabled status for the first control\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     *\n     * @param value Array of values for the controls\n     * @param options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     */\n    reset(value = [], options = {}) {\n        this._forEachChild((control, index) => {\n            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this._updatePristine(options);\n        this._updateTouched(options);\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * Reports all values regardless of disabled status.\n     * For enabled controls only, the `value` property is the best way to get the value of the array.\n     */\n    getRawValue() {\n        return this.controls.map((control) => {\n            return control instanceof FormControl ? control.value : control.getRawValue();\n        });\n    }\n    /**\n     * Remove all controls in the `FormArray`.\n     *\n     * @usageNotes\n     * ### Remove all elements from a FormArray\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * console.log(arr.length);  // 2\n     *\n     * arr.clear();\n     * console.log(arr.length);  // 0\n     * ```\n     *\n     * It's a simpler and more efficient alternative to removing all elements one by one:\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     *\n     * while (arr.length) {\n     *    arr.removeAt(0);\n     * }\n     * ```\n     */\n    clear() {\n        if (this.controls.length < 1)\n            return;\n        this._forEachChild((control) => control._registerOnCollectionChange(() => { }));\n        this.controls.splice(0);\n        this.updateValueAndValidity();\n    }\n    /** @internal */\n    _syncPendingControls() {\n        let subtreeUpdated = this.controls.reduce((updated, child) => {\n            return child._syncPendingControls() ? true : updated;\n        }, false);\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    }\n    /** @internal */\n    _throwIfControlMissing(index) {\n        if (!this.controls.length) {\n            throw new Error(`\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n        }\n        if (!this.at(index)) {\n            throw new Error(`Cannot find form control at index ${index}`);\n        }\n    }\n    /** @internal */\n    _forEachChild(cb) {\n        this.controls.forEach((control, index) => {\n            cb(control, index);\n        });\n    }\n    /** @internal */\n    _updateValue() {\n        this.value =\n            this.controls.filter((control) => control.enabled || this.disabled)\n                .map((control) => control.value);\n    }\n    /** @internal */\n    _anyControls(condition) {\n        return this.controls.some((control) => control.enabled && condition(control));\n    }\n    /** @internal */\n    _setUpControls() {\n        this._forEachChild((control) => this._registerControl(control));\n    }\n    /** @internal */\n    _checkAllValuesPresent(value) {\n        this._forEachChild((control, i) => {\n            if (value[i] === undefined) {\n                throw new Error(`Must supply a value for form control at index: ${i}.`);\n            }\n        });\n    }\n    /** @internal */\n    _allControlsDisabled() {\n        for (const control of this.controls) {\n            if (control.enabled)\n                return false;\n        }\n        return this.controls.length > 0 || this.disabled;\n    }\n    _registerControl(control) {\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst formDirectiveProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => NgForm)\n};\nconst ɵ0 = () => Promise.resolve(null);\nconst resolvedPromise = (ɵ0)();\n/**\n * @description\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You optionally export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * gives you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, use `NgModel` with a `name`\n * attribute. You may use `NgModelGroup` to create sub-groups within the form.\n *\n * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event emits the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * To import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * @usageNotes\n *\n * ### Listening for form submission\n *\n * The following example shows how to capture the form values from the \"ngSubmit\" event.\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Setting the update options\n *\n * The following example shows you how to change the \"updateOn\" option from its default using\n * ngFormOptions.\n *\n * ```html\n * <form [ngFormOptions]=\"{updateOn: 'blur'}\">\n *    <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n * </form>\n * ```\n *\n * ### Native DOM validation UI\n *\n * In order to prevent the native DOM form validation UI from interfering with Angular's form\n * validation, Angular automatically adds the `novalidate` attribute on any `<form>` whenever\n * `FormModule` or `ReactiveFormModule` are imported into the application.\n * If you want to explicitly enable native DOM validation UI with Angular forms, you can add the\n * `ngNativeValidate` attribute to the `<form>` element:\n *\n * ```html\n * <form ngNativeValidate>\n *   ...\n * </form>\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgForm extends ControlContainer {\n    constructor(validators, asyncValidators) {\n        super();\n        /**\n         * @description\n         * Returns whether the form submission has been triggered.\n         */\n        this.submitted = false;\n        this._directives = [];\n        /**\n         * @description\n         * Event emitter for the \"ngSubmit\" event\n         */\n        this.ngSubmit = new EventEmitter();\n        this.form =\n            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n    }\n    /**\n     * @description\n     * Lifecycle method called after the view is initialized. For internal use only.\n     */\n    ngAfterViewInit() {\n        this._setUpdateStrategy();\n    }\n    /**\n     * @description\n     * The directive instance.\n     */\n    get formDirective() {\n        return this;\n    }\n    /**\n     * @description\n     * The internal `FormGroup` instance.\n     */\n    get control() {\n        return this.form;\n    }\n    /**\n     * @description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it is always an empty array.\n     */\n    get path() {\n        return [];\n    }\n    /**\n     * @description\n     * Returns a map of the controls in this group.\n     */\n    get controls() {\n        return this.form.controls;\n    }\n    /**\n     * @description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    addControl(dir) {\n        resolvedPromise.then(() => {\n            const container = this._findContainer(dir.path);\n            dir.control =\n                container.registerControl(dir.name, dir.control);\n            setUpControl(dir.control, dir);\n            dir.control.updateValueAndValidity({ emitEvent: false });\n            this._directives.push(dir);\n        });\n    }\n    /**\n     * @description\n     * Retrieves the `FormControl` instance from the provided `NgModel` directive.\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    getControl(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * @description\n     * Removes the `NgModel` instance from the internal list of directives\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    removeControl(dir) {\n        resolvedPromise.then(() => {\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n            removeDir(this._directives, dir);\n        });\n    }\n    /**\n     * @description\n     * Adds a new `NgModelGroup` directive instance to the form.\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    addFormGroup(dir) {\n        resolvedPromise.then(() => {\n            const container = this._findContainer(dir.path);\n            const group = new FormGroup({});\n            setUpFormContainer(group, dir);\n            container.registerControl(dir.name, group);\n            group.updateValueAndValidity({ emitEvent: false });\n        });\n    }\n    /**\n     * @description\n     * Removes the `NgModelGroup` directive instance from the form.\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    removeFormGroup(dir) {\n        resolvedPromise.then(() => {\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        });\n    }\n    /**\n     * @description\n     * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    getFormGroup(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * Sets the new value for the provided `NgControl` directive.\n     *\n     * @param dir The `NgControl` directive instance.\n     * @param value The new value for the directive's control.\n     */\n    updateModel(dir, value) {\n        resolvedPromise.then(() => {\n            const ctrl = this.form.get(dir.path);\n            ctrl.setValue(value);\n        });\n    }\n    /**\n     * @description\n     * Sets the value for this `FormGroup`.\n     *\n     * @param value The new value\n     */\n    setValue(value) {\n        this.control.setValue(value);\n    }\n    /**\n     * @description\n     * Method called when the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param $event The \"submit\" event object\n     */\n    onSubmit($event) {\n        this.submitted = true;\n        syncPendingControls(this.form, this._directives);\n        this.ngSubmit.emit($event);\n        return false;\n    }\n    /**\n     * @description\n     * Method called when the \"reset\" event is triggered on the form.\n     */\n    onReset() {\n        this.resetForm();\n    }\n    /**\n     * @description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param value The new value for the form.\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        this.submitted = false;\n    }\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.form._updateOn = this.options.updateOn;\n        }\n    }\n    /** @internal */\n    _findContainer(path) {\n        path.pop();\n        return path.length ? this.form.get(path) : this.form;\n    }\n}\nNgForm.ɵfac = function NgForm_Factory(t) { return new (t || NgForm)(ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10)); };\nNgForm.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgForm, selectors: [[\"form\", 3, \"ngNoForm\", \"\", 3, \"formGroup\", \"\"], [\"ng-form\"], [\"\", \"ngForm\", \"\"]], hostBindings: function NgForm_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"submit\", function NgForm_submit_HostBindingHandler($event) { return ctx.onSubmit($event); })(\"reset\", function NgForm_reset_HostBindingHandler() { return ctx.onReset(); });\n    } }, inputs: { options: [\"ngFormOptions\", \"options\"] }, outputs: { ngSubmit: \"ngSubmit\" }, exportAs: [\"ngForm\"], features: [ɵngcc0.ɵɵProvidersFeature([formDirectiveProvider]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nNgForm.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nNgForm.propDecorators = {\n    options: [{ type: Input, args: ['ngFormOptions',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgForm, [{\n        type: Directive,\n        args: [{\n                selector: 'form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]',\n                providers: [formDirectiveProvider],\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                outputs: ['ngSubmit'],\n                exportAs: 'ngForm'\n            }]\n    }], function () { return [{ type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_ASYNC_VALIDATORS]\n            }] }]; }, { options: [{\n            type: Input,\n            args: ['ngFormOptions']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.\n *\n * @publicApi\n */\nclass AbstractFormGroupDirective extends ControlContainer {\n    /**\n     * @description\n     * An internal callback method triggered on the instance after the inputs are set.\n     * Registers the group with its parent group.\n     */\n    ngOnInit() {\n        this._checkParentType();\n        this.formDirective.addFormGroup(this);\n    }\n    /**\n     * @description\n     * An internal callback method triggered before the instance is destroyed.\n     * Removes the group from its parent group.\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeFormGroup(this);\n        }\n    }\n    /**\n     * @description\n     * The `FormGroup` bound to this directive.\n     */\n    get control() {\n        return this.formDirective.getFormGroup(this);\n    }\n    /**\n     * @description\n     * The path to this group from the top-level directive.\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    /**\n     * @description\n     * The synchronous validators registered with this group.\n     */\n    get validator() {\n        return composeValidators(this._validators);\n    }\n    /**\n     * @description\n     * The async validators registered with this group.\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._asyncValidators);\n    }\n    /** @internal */\n    _checkParentType() { }\n}\nAbstractFormGroupDirective.ɵfac = function AbstractFormGroupDirective_Factory(t) { return ɵAbstractFormGroupDirective_BaseFactory(t || AbstractFormGroupDirective); };\nAbstractFormGroupDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AbstractFormGroupDirective, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵAbstractFormGroupDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AbstractFormGroupDirective);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AbstractFormGroupDirective, [{\n        type: Directive\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass TemplateDrivenErrors {\n    static modelParentException() {\n        throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      ${FormErrorExamples.formControlName}\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      ${FormErrorExamples.ngModelWithFormGroup}`);\n    }\n    static formGroupNameException() {\n        throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      ${FormErrorExamples.formGroupName}\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      ${FormErrorExamples.ngModelGroup}`);\n    }\n    static missingNameException() {\n        throw new Error(`If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">`);\n    }\n    static modelGroupParentException() {\n        throw new Error(`\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      ${FormErrorExamples.formGroupName}\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      ${FormErrorExamples.ngModelGroup}`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst modelGroupProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => NgModelGroup)\n};\n/**\n * @description\n * Creates and binds a `FormGroup` instance to a DOM element.\n *\n * This directive can only be used as a child of `NgForm` (within `<form>` tags).\n *\n * Use this directive to validate a sub-group of your form separately from the\n * rest of your form, or if some values in your domain model make more sense\n * to consume together in a nested object.\n *\n * Provide a name for the sub-group and it will become the key\n * for the sub-group in the form's full value. If you need direct access, export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * @usageNotes\n *\n * ### Consuming controls in a grouping\n *\n * The following example shows you how to combine controls together in a sub-group\n * of the form.\n *\n * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgModelGroup extends AbstractFormGroupDirective {\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._validators = validators;\n        this._asyncValidators = asyncValidators;\n    }\n    /** @internal */\n    _checkParentType() {\n        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelGroupParentException();\n        }\n    }\n}\nNgModelGroup.ɵfac = function NgModelGroup_Factory(t) { return new (t || NgModelGroup)(ɵngcc0.ɵɵdirectiveInject(ControlContainer, 5), ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10)); };\nNgModelGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgModelGroup, selectors: [[\"\", \"ngModelGroup\", \"\"]], inputs: { name: [\"ngModelGroup\", \"name\"] }, exportAs: [\"ngModelGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([modelGroupProvider]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nNgModelGroup.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nNgModelGroup.propDecorators = {\n    name: [{ type: Input, args: ['ngModelGroup',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgModelGroup, [{\n        type: Directive,\n        args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' }]\n    }], function () { return [{ type: ControlContainer, decorators: [{\n                type: Host\n            }, {\n                type: SkipSelf\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_ASYNC_VALIDATORS]\n            }] }]; }, { name: [{\n            type: Input,\n            args: ['ngModelGroup']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst formControlBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(() => NgModel)\n};\nconst ɵ0$1 = () => Promise.resolve(null);\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nconst resolvedPromise$1 = (ɵ0$1)();\n/**\n * @description\n * Creates a `FormControl` instance from a domain model and binds it\n * to a form control element.\n *\n * The `FormControl` instance tracks the value, user interaction, and\n * validation status of the control and keeps the view synced with the model. If used\n * within a parent form, the directive also registers itself with the form as a child\n * control.\n *\n * This directive is used by itself or as part of a larger form. Use the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional `Input`. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class sets the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI always syncs back to\n * the domain model in your class.\n *\n * To inspect the properties of the associated `FormControl` (like validity state),\n * export the directive into a local template variable using `ngModel` as the key (ex:\n * `#myVar=\"ngModel\"`). You then access the control using the directive's `control` property, but\n * most properties used (like `valid` and `dirty`) fall through to the control anyway for direct\n * access. See a full list of properties directly available in `AbstractControlDirective`.\n *\n * @see `RadioControlValueAccessor`\n * @see `SelectControlValueAccessor`\n *\n * @usageNotes\n *\n * ### Using ngModel on a standalone control\n *\n * The following examples show a simple standalone control using `ngModel`:\n *\n * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,\n * as the parent form syncs the value for you. You access its properties by exporting it into a\n * local template variable using `ngForm` such as (`#f=\"ngForm\"`). Use the variable where\n * needed on form submission.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * ### Using ngModel within a form\n *\n * The following example shows controls using `ngModel` within a form:\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Using a standalone ngModel within a group\n *\n * The following example shows you how to use a standalone ngModel control\n * within a form. This controls the display of the form, but doesn't contain form data.\n *\n * ```html\n * <form>\n *   <input name=\"login\" ngModel placeholder=\"Login\">\n *   <input type=\"checkbox\" ngModel [ngModelOptions]=\"{standalone: true}\"> Show more options?\n * </form>\n * <!-- form value: {login: ''} -->\n * ```\n *\n * ### Setting the ngModel name attribute through options\n *\n * The following example shows you an alternate way to set the name attribute. The name attribute is\n * used within a custom form component, and the name `@Input` property serves a different purpose.\n *\n * ```html\n * <form>\n *   <my-person-control name=\"Nancy\" ngModel [ngModelOptions]=\"{name: 'user'}\">\n *   </my-person-control>\n * </form>\n * <!-- form value: {user: ''} -->\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgModel extends NgControl {\n    constructor(parent, validators, asyncValidators, valueAccessors) {\n        super();\n        this.control = new FormControl();\n        /** @internal */\n        this._registered = false;\n        /**\n         * @description\n         * Event emitter for producing the `ngModelChange` event after\n         * the view model updates.\n         */\n        this.update = new EventEmitter();\n        this._parent = parent;\n        this._rawValidators = validators || [];\n        this._rawAsyncValidators = asyncValidators || [];\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /**\n     * @description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param changes A object of key/value pairs for the set of changed inputs.\n     */\n    ngOnChanges(changes) {\n        this._checkForErrors();\n        if (!this._registered)\n            this._setUpControl();\n        if ('isDisabled' in changes) {\n            this._updateDisabled(changes);\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this._updateValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /**\n     * @description\n     * Lifecycle method called before the directive's instance is destroyed. For internal\n     * use only.\n     */\n    ngOnDestroy() {\n        this.formDirective && this.formDirective.removeControl(this);\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return this._parent ? controlPath(this.name, this._parent) : [this.name];\n    }\n    /**\n     * @description\n     * The top-level directive for this control if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    /**\n     * @description\n     * Synchronous validator function composed of all the synchronous validators\n     * registered with this directive.\n     */\n    get validator() {\n        return composeValidators(this._rawValidators);\n    }\n    /**\n     * @description\n     * Async validator function composed of all the async validators registered with this\n     * directive.\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._rawAsyncValidators);\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value emitted by `ngModelChange`.\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    _setUpControl() {\n        this._setUpdateStrategy();\n        this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);\n        this._registered = true;\n    }\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.control._updateOn = this.options.updateOn;\n        }\n    }\n    _isStandalone() {\n        return !this._parent || !!(this.options && this.options.standalone);\n    }\n    _setUpStandalone() {\n        setUpControl(this.control, this);\n        this.control.updateValueAndValidity({ emitEvent: false });\n    }\n    _checkForErrors() {\n        if (!this._isStandalone()) {\n            this._checkParentType();\n        }\n        this._checkName();\n    }\n    _checkParentType() {\n        if (!(this._parent instanceof NgModelGroup) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            TemplateDrivenErrors.formGroupNameException();\n        }\n        else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelParentException();\n        }\n    }\n    _checkName() {\n        if (this.options && this.options.name)\n            this.name = this.options.name;\n        if (!this._isStandalone() && !this.name) {\n            TemplateDrivenErrors.missingNameException();\n        }\n    }\n    _updateValue(value) {\n        resolvedPromise$1.then(() => {\n            this.control.setValue(value, { emitViewToModelChange: false });\n        });\n    }\n    _updateDisabled(changes) {\n        const disabledValue = changes['isDisabled'].currentValue;\n        const isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n        resolvedPromise$1.then(() => {\n            if (isDisabled && !this.control.disabled) {\n                this.control.disable();\n            }\n            else if (!isDisabled && this.control.disabled) {\n                this.control.enable();\n            }\n        });\n    }\n}\nNgModel.ɵfac = function NgModel_Factory(t) { return new (t || NgModel)(ɵngcc0.ɵɵdirectiveInject(ControlContainer, 9), ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10)); };\nNgModel.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgModel, selectors: [[\"\", \"ngModel\", \"\", 3, \"formControlName\", \"\", 3, \"formControl\", \"\"]], inputs: { name: \"name\", isDisabled: [\"disabled\", \"isDisabled\"], model: [\"ngModel\", \"model\"], options: [\"ngModelOptions\", \"options\"] }, outputs: { update: \"ngModelChange\" }, exportAs: [\"ngModel\"], features: [ɵngcc0.ɵɵProvidersFeature([formControlBinding]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nNgModel.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] }] }\n];\nNgModel.propDecorators = {\n    name: [{ type: Input }],\n    isDisabled: [{ type: Input, args: ['disabled',] }],\n    model: [{ type: Input, args: ['ngModel',] }],\n    options: [{ type: Input, args: ['ngModelOptions',] }],\n    update: [{ type: Output, args: ['ngModelChange',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgModel, [{\n        type: Directive,\n        args: [{\n                selector: '[ngModel]:not([formControlName]):not([formControl])',\n                providers: [formControlBinding],\n                exportAs: 'ngModel'\n            }]\n    }], function () { return [{ type: ControlContainer, decorators: [{\n                type: Optional\n            }, {\n                type: Host\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_ASYNC_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALUE_ACCESSOR]\n            }] }]; }, { update: [{\n            type: Output,\n            args: ['ngModelChange']\n        }], name: [{\n            type: Input\n        }], isDisabled: [{\n            type: Input,\n            args: ['disabled']\n        }], model: [{\n            type: Input,\n            args: ['ngModel']\n        }], options: [{\n            type: Input,\n            args: ['ngModelOptions']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate></form>\n * ```\n *\n * @publicApi\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n */\nclass ɵNgNoValidate {\n}\nɵNgNoValidate.ɵfac = function ɵNgNoValidate_Factory(t) { return new (t || ɵNgNoValidate)(); };\nɵNgNoValidate.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ɵNgNoValidate, selectors: [[\"form\", 3, \"ngNoForm\", \"\", 3, \"ngNativeValidate\", \"\"]], hostAttrs: [\"novalidate\", \"\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ɵNgNoValidate, [{\n        type: Directive,\n        args: [{\n                selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n                host: { 'novalidate': '' }\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token to provide to turn off the ngModel warning on formControl and formControlName.\n */\nconst NG_MODEL_WITH_FORM_CONTROL_WARNING = new InjectionToken('NgModelWithFormControlWarning');\nconst formControlBinding$1 = {\n    provide: NgControl,\n    useExisting: forwardRef(() => FormControlDirective)\n};\n/**\n * @description\n * Synchronizes a standalone `FormControl` instance to a form control element.\n *\n * Note that support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives was deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * @usageNotes\n *\n * The following example shows how to register a standalone control and set its value.\n *\n * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormControlDirective extends NgControl {\n    constructor(validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        /** @deprecated as of v6 */\n        this.update = new EventEmitter();\n        /**\n         * @description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular `FormControlDirective` instance. Used to support warning config of \"always\".\n         *\n         * @internal\n         */\n        this._ngModelWarningSent = false;\n        this._rawValidators = validators || [];\n        this._rawAsyncValidators = asyncValidators || [];\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /**\n     * @description\n     * Triggers a warning that this input should not be used with reactive forms.\n     */\n    set isDisabled(isDisabled) {\n        ReactiveErrors.disabledAttrWarning();\n    }\n    /**\n     * @description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param changes A object of key/value pairs for the set of changed inputs.\n     */\n    ngOnChanges(changes) {\n        if (this._isControlChanged(changes)) {\n            setUpControl(this.form, this);\n            if (this.control.disabled && this.valueAccessor.setDisabledState) {\n                this.valueAccessor.setDisabledState(true);\n            }\n            this.form.updateValueAndValidity({ emitEvent: false });\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);\n            this.form.setValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return [];\n    }\n    /**\n     * @description\n     * Synchronous validator function composed of all the synchronous validators\n     * registered with this directive.\n     */\n    get validator() {\n        return composeValidators(this._rawValidators);\n    }\n    /**\n     * @description\n     * Async validator function composed of all the async validators registered with this\n     * directive.\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._rawAsyncValidators);\n    }\n    /**\n     * @description\n     * The `FormControl` bound to this directive.\n     */\n    get control() {\n        return this.form;\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value for the view model.\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    _isControlChanged(changes) {\n        return changes.hasOwnProperty('form');\n    }\n}\nFormControlDirective.ɵfac = function FormControlDirective_Factory(t) { return new (t || FormControlDirective)(ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(NG_MODEL_WITH_FORM_CONTROL_WARNING, 8)); };\nFormControlDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FormControlDirective, selectors: [[\"\", \"formControl\", \"\"]], inputs: { isDisabled: [\"disabled\", \"isDisabled\"], form: [\"formControl\", \"form\"], model: [\"ngModel\", \"model\"] }, outputs: { update: \"ngModelChange\" }, exportAs: [\"ngForm\"], features: [ɵngcc0.ɵɵProvidersFeature([formControlBinding$1]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n/**\n * @description\n * Static property used to track whether any ngModel warnings have been sent across\n * all instances of FormControlDirective. Used to support warning config of \"once\".\n *\n * @internal\n */\nFormControlDirective._ngModelWarningSentOnce = false;\nFormControlDirective.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [NG_MODEL_WITH_FORM_CONTROL_WARNING,] }] }\n];\nFormControlDirective.propDecorators = {\n    form: [{ type: Input, args: ['formControl',] }],\n    isDisabled: [{ type: Input, args: ['disabled',] }],\n    model: [{ type: Input, args: ['ngModel',] }],\n    update: [{ type: Output, args: ['ngModelChange',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormControlDirective, [{\n        type: Directive,\n        args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' }]\n    }], function () { return [{ type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_ASYNC_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALUE_ACCESSOR]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]\n            }] }]; }, { update: [{\n            type: Output,\n            args: ['ngModelChange']\n        }], isDisabled: [{\n            type: Input,\n            args: ['disabled']\n        }], form: [{\n            type: Input,\n            args: ['formControl']\n        }], model: [{\n            type: Input,\n            args: ['ngModel']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst formDirectiveProvider$1 = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormGroupDirective)\n};\n/**\n * @description\n *\n * Binds an existing `FormGroup` to a DOM element.\n *\n * This directive accepts an existing `FormGroup` instance. It will then use this\n * `FormGroup` instance to match any child `FormControl`, `FormGroup`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * ### Register Form Group\n *\n * The following example registers a `FormGroup` with first name and last name controls,\n * and listens for the *ngSubmit* event when the button is clicked.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormGroupDirective extends ControlContainer {\n    constructor(_validators, _asyncValidators) {\n        super();\n        this._validators = _validators;\n        this._asyncValidators = _asyncValidators;\n        /**\n         * @description\n         * Reports whether the form submission has been triggered.\n         */\n        this.submitted = false;\n        /**\n         * @description\n         * Tracks the list of added `FormControlName` instances\n         */\n        this.directives = [];\n        /**\n         * @description\n         * Tracks the `FormGroup` bound to this directive.\n         */\n        this.form = null;\n        /**\n         * @description\n         * Emits an event when the form submission has been triggered.\n         */\n        this.ngSubmit = new EventEmitter();\n    }\n    /**\n     * @description\n     * A lifecycle method called when the directive's inputs change. For internal use only.\n     *\n     * @param changes A object of key/value pairs for the set of changed inputs.\n     */\n    ngOnChanges(changes) {\n        this._checkFormPresent();\n        if (changes.hasOwnProperty('form')) {\n            this._updateValidators();\n            this._updateDomValue();\n            this._updateRegistrations();\n        }\n    }\n    /**\n     * @description\n     * Returns this directive's instance.\n     */\n    get formDirective() {\n        return this;\n    }\n    /**\n     * @description\n     * Returns the `FormGroup` bound to this directive.\n     */\n    get control() {\n        return this.form;\n    }\n    /**\n     * @description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it always an empty array.\n     */\n    get path() {\n        return [];\n    }\n    /**\n     * @description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    addControl(dir) {\n        const ctrl = this.form.get(dir.path);\n        setUpControl(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n        this.directives.push(dir);\n        return ctrl;\n    }\n    /**\n     * @description\n     * Retrieves the `FormControl` instance from the provided `FormControlName` directive\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    getControl(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * @description\n     * Removes the `FormControlName` instance from the internal list of directives\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    removeControl(dir) {\n        removeDir(this.directives, dir);\n    }\n    /**\n     * Adds a new `FormGroupName` directive instance to the form.\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    addFormGroup(dir) {\n        const ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    }\n    /**\n     * No-op method to remove the form group.\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    removeFormGroup(dir) { }\n    /**\n     * @description\n     * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    getFormGroup(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * Adds a new `FormArrayName` directive instance to the form.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    addFormArray(dir) {\n        const ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    }\n    /**\n     * No-op method to remove the form array.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    removeFormArray(dir) { }\n    /**\n     * @description\n     * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    getFormArray(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * Sets the new value for the provided `FormControlName` directive.\n     *\n     * @param dir The `FormControlName` directive instance.\n     * @param value The new value for the directive's control.\n     */\n    updateModel(dir, value) {\n        const ctrl = this.form.get(dir.path);\n        ctrl.setValue(value);\n    }\n    /**\n     * @description\n     * Method called with the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param $event The \"submit\" event object\n     */\n    onSubmit($event) {\n        this.submitted = true;\n        syncPendingControls(this.form, this.directives);\n        this.ngSubmit.emit($event);\n        return false;\n    }\n    /**\n     * @description\n     * Method called when the \"reset\" event is triggered on the form.\n     */\n    onReset() {\n        this.resetForm();\n    }\n    /**\n     * @description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param value The new value for the form.\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        this.submitted = false;\n    }\n    /** @internal */\n    _updateDomValue() {\n        this.directives.forEach(dir => {\n            const newCtrl = this.form.get(dir.path);\n            if (dir.control !== newCtrl) {\n                cleanUpControl(dir.control, dir);\n                if (newCtrl)\n                    setUpControl(newCtrl, dir);\n                dir.control = newCtrl;\n            }\n        });\n        this.form._updateTreeValidity({ emitEvent: false });\n    }\n    _updateRegistrations() {\n        this.form._registerOnCollectionChange(() => this._updateDomValue());\n        if (this._oldForm)\n            this._oldForm._registerOnCollectionChange(() => { });\n        this._oldForm = this.form;\n    }\n    _updateValidators() {\n        const sync = composeValidators(this._validators);\n        this.form.validator = Validators.compose([this.form.validator, sync]);\n        const async = composeAsyncValidators(this._asyncValidators);\n        this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n    }\n    _checkFormPresent() {\n        if (!this.form) {\n            ReactiveErrors.missingFormException();\n        }\n    }\n}\nFormGroupDirective.ɵfac = function FormGroupDirective_Factory(t) { return new (t || FormGroupDirective)(ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10)); };\nFormGroupDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FormGroupDirective, selectors: [[\"\", \"formGroup\", \"\"]], hostBindings: function FormGroupDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"submit\", function FormGroupDirective_submit_HostBindingHandler($event) { return ctx.onSubmit($event); })(\"reset\", function FormGroupDirective_reset_HostBindingHandler() { return ctx.onReset(); });\n    } }, inputs: { form: [\"formGroup\", \"form\"] }, outputs: { ngSubmit: \"ngSubmit\" }, exportAs: [\"ngForm\"], features: [ɵngcc0.ɵɵProvidersFeature([formDirectiveProvider$1]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nFormGroupDirective.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nFormGroupDirective.propDecorators = {\n    form: [{ type: Input, args: ['formGroup',] }],\n    ngSubmit: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormGroupDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[formGroup]',\n                providers: [formDirectiveProvider$1],\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                exportAs: 'ngForm'\n            }]\n    }], function () { return [{ type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_ASYNC_VALIDATORS]\n            }] }]; }, { form: [{\n            type: Input,\n            args: ['formGroup']\n        }], ngSubmit: [{\n            type: Output\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst formGroupNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormGroupName)\n};\n/**\n * @description\n *\n * Syncs a nested `FormGroup` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective`.\n *\n * It accepts the string name of the nested `FormGroup` to link, and\n * looks for a `FormGroup` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Use nested form groups to validate a sub-group of a\n * form separately from the rest or to group the values of certain\n * controls into their own nested object.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * @usageNotes\n *\n * ### Access the group by name\n *\n * The following example uses the {@link AbstractControl#get get} method to access the\n * associated `FormGroup`\n *\n * ```ts\n *   this.form.get('name');\n * ```\n *\n * ### Access individual controls in the group\n *\n * The following example uses the {@link AbstractControl#get get} method to access\n * individual controls within the group using dot syntax.\n *\n * ```ts\n *   this.form.get('name.first');\n * ```\n *\n * ### Register a nested `FormGroup`.\n *\n * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,\n * and provides methods to retrieve the nested `FormGroup` and individual controls.\n *\n * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormGroupName extends AbstractFormGroupDirective {\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._validators = validators;\n        this._asyncValidators = asyncValidators;\n    }\n    /** @internal */\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.groupParentException();\n        }\n    }\n}\nFormGroupName.ɵfac = function FormGroupName_Factory(t) { return new (t || FormGroupName)(ɵngcc0.ɵɵdirectiveInject(ControlContainer, 13), ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10)); };\nFormGroupName.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FormGroupName, selectors: [[\"\", \"formGroupName\", \"\"]], inputs: { name: [\"formGroupName\", \"name\"] }, features: [ɵngcc0.ɵɵProvidersFeature([formGroupNameProvider]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nFormGroupName.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nFormGroupName.propDecorators = {\n    name: [{ type: Input, args: ['formGroupName',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormGroupName, [{\n        type: Directive,\n        args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] }]\n    }], function () { return [{ type: ControlContainer, decorators: [{\n                type: Optional\n            }, {\n                type: Host\n            }, {\n                type: SkipSelf\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_ASYNC_VALIDATORS]\n            }] }]; }, { name: [{\n            type: Input,\n            args: ['formGroupName']\n        }] }); })();\nconst formArrayNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormArrayName)\n};\n/**\n * @description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormArrayName extends ControlContainer {\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._validators = validators;\n        this._asyncValidators = asyncValidators;\n    }\n    /**\n     * @description\n     * A lifecycle method called when the directive's inputs are initialized. For internal use only.\n     *\n     * @throws If the directive does not have a valid parent.\n     */\n    ngOnInit() {\n        this._checkParentType();\n        this.formDirective.addFormArray(this);\n    }\n    /**\n     * @description\n     * A lifecycle method called before the directive's instance is destroyed. For internal use only.\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeFormArray(this);\n        }\n    }\n    /**\n     * @description\n     * The `FormArray` bound to this directive.\n     */\n    get control() {\n        return this.formDirective.getFormArray(this);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    /**\n     * @description\n     * Synchronous validator function composed of all the synchronous validators registered with this\n     * directive.\n     */\n    get validator() {\n        return composeValidators(this._validators);\n    }\n    /**\n     * @description\n     * Async validator function composed of all the async validators registered with this directive.\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._asyncValidators);\n    }\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.arrayParentException();\n        }\n    }\n}\nFormArrayName.ɵfac = function FormArrayName_Factory(t) { return new (t || FormArrayName)(ɵngcc0.ɵɵdirectiveInject(ControlContainer, 13), ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10)); };\nFormArrayName.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FormArrayName, selectors: [[\"\", \"formArrayName\", \"\"]], inputs: { name: [\"formArrayName\", \"name\"] }, features: [ɵngcc0.ɵɵProvidersFeature([formArrayNameProvider]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nFormArrayName.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nFormArrayName.propDecorators = {\n    name: [{ type: Input, args: ['formArrayName',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormArrayName, [{\n        type: Directive,\n        args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] }]\n    }], function () { return [{ type: ControlContainer, decorators: [{\n                type: Optional\n            }, {\n                type: Host\n            }, {\n                type: SkipSelf\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_ASYNC_VALIDATORS]\n            }] }]; }, { name: [{\n            type: Input,\n            args: ['formArrayName']\n        }] }); })();\nfunction _hasInvalidParent(parent) {\n    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n        !(parent instanceof FormArrayName);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst controlNameBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(() => FormControlName)\n};\n/**\n * @description\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * @usageNotes\n *\n * ### Register `FormControl` within a group\n *\n * The following example shows how to register multiple form controls within a form group\n * and set their value.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel is deprecated\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n *\n * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormControlName extends NgControl {\n    constructor(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        this._added = false;\n        /** @deprecated as of v6 */\n        this.update = new EventEmitter();\n        /**\n         * @description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular FormControlName instance. Used to support warning config of \"always\".\n         *\n         * @internal\n         */\n        this._ngModelWarningSent = false;\n        this._parent = parent;\n        this._rawValidators = validators || [];\n        this._rawAsyncValidators = asyncValidators || [];\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /**\n     * @description\n     * Triggers a warning that this input should not be used with reactive forms.\n     */\n    set isDisabled(isDisabled) {\n        ReactiveErrors.disabledAttrWarning();\n    }\n    /**\n     * @description\n     * A lifecycle method called when the directive's inputs change. For internal use only.\n     *\n     * @param changes A object of key/value pairs for the set of changed inputs.\n     */\n    ngOnChanges(changes) {\n        if (!this._added)\n            this._setUpControl();\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);\n            this.viewModel = this.model;\n            this.formDirective.updateModel(this, this.model);\n        }\n    }\n    /**\n     * @description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeControl(this);\n        }\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value for the view model.\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    /**\n     * @description\n     * Synchronous validator function composed of all the synchronous validators\n     * registered with this directive.\n     */\n    get validator() {\n        return composeValidators(this._rawValidators);\n    }\n    /**\n     * @description\n     * Async validator function composed of all the async validators registered with this\n     * directive.\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._rawAsyncValidators);\n    }\n    _checkParentType() {\n        if (!(this._parent instanceof FormGroupName) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            ReactiveErrors.ngModelGroupException();\n        }\n        else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n            !(this._parent instanceof FormArrayName)) {\n            ReactiveErrors.controlParentException();\n        }\n    }\n    _setUpControl() {\n        this._checkParentType();\n        this.control = this.formDirective.addControl(this);\n        if (this.control.disabled && this.valueAccessor.setDisabledState) {\n            this.valueAccessor.setDisabledState(true);\n        }\n        this._added = true;\n    }\n}\nFormControlName.ɵfac = function FormControlName_Factory(t) { return new (t || FormControlName)(ɵngcc0.ɵɵdirectiveInject(ControlContainer, 13), ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(NG_MODEL_WITH_FORM_CONTROL_WARNING, 8)); };\nFormControlName.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FormControlName, selectors: [[\"\", \"formControlName\", \"\"]], inputs: { isDisabled: [\"disabled\", \"isDisabled\"], name: [\"formControlName\", \"name\"], model: [\"ngModel\", \"model\"] }, outputs: { update: \"ngModelChange\" }, features: [ɵngcc0.ɵɵProvidersFeature([controlNameBinding]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n/**\n * @description\n * Static property used to track whether any ngModel warnings have been sent across\n * all instances of FormControlName. Used to support warning config of \"once\".\n *\n * @internal\n */\nFormControlName._ngModelWarningSentOnce = false;\nFormControlName.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [NG_MODEL_WITH_FORM_CONTROL_WARNING,] }] }\n];\nFormControlName.propDecorators = {\n    name: [{ type: Input, args: ['formControlName',] }],\n    isDisabled: [{ type: Input, args: ['disabled',] }],\n    model: [{ type: Input, args: ['ngModel',] }],\n    update: [{ type: Output, args: ['ngModelChange',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormControlName, [{\n        type: Directive,\n        args: [{ selector: '[formControlName]', providers: [controlNameBinding] }]\n    }], function () { return [{ type: ControlContainer, decorators: [{\n                type: Optional\n            }, {\n                type: Host\n            }, {\n                type: SkipSelf\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_ASYNC_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALUE_ACCESSOR]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]\n            }] }]; }, { update: [{\n            type: Output,\n            args: ['ngModelChange']\n        }], isDisabled: [{\n            type: Input,\n            args: ['disabled']\n        }], name: [{\n            type: Input,\n            args: ['formControlName']\n        }], model: [{\n            type: Input,\n            args: ['ngModel']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => RequiredValidator),\n    multi: true\n};\n/**\n * @description\n * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => CheckboxRequiredValidator),\n    multi: true\n};\n/**\n * @description\n * A directive that adds the `required` validator to any controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a required validator using template-driven forms\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass RequiredValidator {\n    constructor() {\n        this._required = false;\n    }\n    /**\n     * @description\n     * Tracks changes to the required attribute bound to this directive.\n     */\n    get required() {\n        return this._required;\n    }\n    set required(value) {\n        this._required = value != null && value !== false && `${value}` !== 'false';\n        if (this._onChange)\n            this._onChange();\n    }\n    /**\n     * @description\n     * Method that validates whether the control is empty.\n     * Returns the validation result if enabled, otherwise null.\n     */\n    validate(control) {\n        return this.required ? Validators.required(control) : null;\n    }\n    /**\n     * @description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param fn The callback function\n     */\n    registerOnValidatorChange(fn) {\n        this._onChange = fn;\n    }\n}\nRequiredValidator.ɵfac = function RequiredValidator_Factory(t) { return new (t || RequiredValidator)(); };\nRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RequiredValidator, selectors: [[\"\", \"required\", \"\", \"formControlName\", \"\", 3, \"type\", \"checkbox\"], [\"\", \"required\", \"\", \"formControl\", \"\", 3, \"type\", \"checkbox\"], [\"\", \"required\", \"\", \"ngModel\", \"\", 3, \"type\", \"checkbox\"]], hostVars: 1, hostBindings: function RequiredValidator_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"required\", ctx.required ? \"\" : null);\n    } }, inputs: { required: \"required\" }, features: [ɵngcc0.ɵɵProvidersFeature([REQUIRED_VALIDATOR])] });\nRequiredValidator.propDecorators = {\n    required: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                providers: [REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            }]\n    }], function () { return []; }, { required: [{\n            type: Input\n        }] }); })();\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a required checkbox validator using template-driven forms\n *\n * The following example shows how to add a checkbox required validator to an input attached to an\n * ngModel binding.\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nclass CheckboxRequiredValidator extends RequiredValidator {\n    /**\n     * @description\n     * Method that validates whether or not the checkbox has been checked.\n     * Returns the validation result if enabled, otherwise null.\n     */\n    validate(control) {\n        return this.required ? Validators.requiredTrue(control) : null;\n    }\n}\nCheckboxRequiredValidator.ɵfac = function CheckboxRequiredValidator_Factory(t) { return ɵCheckboxRequiredValidator_BaseFactory(t || CheckboxRequiredValidator); };\nCheckboxRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CheckboxRequiredValidator, selectors: [[\"input\", \"type\", \"checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"input\", \"type\", \"checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"input\", \"type\", \"checkbox\", \"required\", \"\", \"ngModel\", \"\"]], hostVars: 1, hostBindings: function CheckboxRequiredValidator_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"required\", ctx.required ? \"\" : null);\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([CHECKBOX_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵCheckboxRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(CheckboxRequiredValidator);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CheckboxRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            }]\n    }], null, null); })();\n/**\n * @description\n * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst EMAIL_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => EmailValidator),\n    multi: true\n};\n/**\n * A directive that adds the `email` validator to controls marked with the\n * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding an email validator\n *\n * The following example shows how to add an email validator to an input attached to an ngModel\n * binding.\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nclass EmailValidator {\n    constructor() {\n        this._enabled = false;\n    }\n    /**\n     * @description\n     * Tracks changes to the email attribute bound to this directive.\n     */\n    set email(value) {\n        this._enabled = value === '' || value === true || value === 'true';\n        if (this._onChange)\n            this._onChange();\n    }\n    /**\n     * @description\n     * Method that validates whether an email address is valid.\n     * Returns the validation result if enabled, otherwise null.\n     */\n    validate(control) {\n        return this._enabled ? Validators.email(control) : null;\n    }\n    /**\n     * @description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param fn The callback function\n     */\n    registerOnValidatorChange(fn) {\n        this._onChange = fn;\n    }\n}\nEmailValidator.ɵfac = function EmailValidator_Factory(t) { return new (t || EmailValidator)(); };\nEmailValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: EmailValidator, selectors: [[\"\", \"email\", \"\", \"formControlName\", \"\"], [\"\", \"email\", \"\", \"formControl\", \"\"], [\"\", \"email\", \"\", \"ngModel\", \"\"]], inputs: { email: \"email\" }, features: [ɵngcc0.ɵɵProvidersFeature([EMAIL_VALIDATOR])] });\nEmailValidator.propDecorators = {\n    email: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EmailValidator, [{\n        type: Directive,\n        args: [{\n                selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n                providers: [EMAIL_VALIDATOR]\n            }]\n    }], function () { return []; }, { email: [{\n            type: Input\n        }] }); })();\n/**\n * @description\n * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MIN_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinLengthValidator),\n    multi: true\n};\n/**\n * A directive that adds minimum length validation to controls marked with the\n * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a minimum length validator\n *\n * The following example shows how to add a minimum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel minlength=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass MinLengthValidator {\n    constructor() {\n        this._validator = Validators.nullValidator;\n    }\n    /**\n     * @description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param changes A object of key/value pairs for the set of changed inputs.\n     */\n    ngOnChanges(changes) {\n        if ('minlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    }\n    /**\n     * @description\n     * Method that validates whether the value meets a minimum length\n     * requirement. Returns the validation result if enabled, otherwise null.\n     */\n    validate(control) {\n        return this.minlength == null ? null : this._validator(control);\n    }\n    /**\n     * @description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param fn The callback function\n     */\n    registerOnValidatorChange(fn) {\n        this._onChange = fn;\n    }\n    _createValidator() {\n        this._validator = Validators.minLength(typeof this.minlength === 'number' ? this.minlength : parseInt(this.minlength, 10));\n    }\n}\nMinLengthValidator.ɵfac = function MinLengthValidator_Factory(t) { return new (t || MinLengthValidator)(); };\nMinLengthValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MinLengthValidator, selectors: [[\"\", \"minlength\", \"\", \"formControlName\", \"\"], [\"\", \"minlength\", \"\", \"formControl\", \"\"], [\"\", \"minlength\", \"\", \"ngModel\", \"\"]], hostVars: 1, hostBindings: function MinLengthValidator_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"minlength\", ctx.minlength ? ctx.minlength : null);\n    } }, inputs: { minlength: \"minlength\" }, features: [ɵngcc0.ɵɵProvidersFeature([MIN_LENGTH_VALIDATOR]), ɵngcc0.ɵɵNgOnChangesFeature] });\nMinLengthValidator.propDecorators = {\n    minlength: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MinLengthValidator, [{\n        type: Directive,\n        args: [{\n                selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                providers: [MIN_LENGTH_VALIDATOR],\n                host: { '[attr.minlength]': 'minlength ? minlength : null' }\n            }]\n    }], function () { return []; }, { minlength: [{\n            type: Input\n        }] }); })();\n/**\n * @description\n * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MAX_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxLengthValidator),\n    multi: true\n};\n/**\n * A directive that adds max length validation to controls marked with the\n * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a maximum length validator\n *\n * The following example shows how to add a maximum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel maxlength=\"25\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass MaxLengthValidator {\n    constructor() {\n        this._validator = Validators.nullValidator;\n    }\n    /**\n     * @description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param changes A object of key/value pairs for the set of changed inputs.\n     */\n    ngOnChanges(changes) {\n        if ('maxlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    }\n    /**\n     * @description\n     * Method that validates whether the value exceeds\n     * the maximum length requirement.\n     */\n    validate(control) {\n        return this.maxlength != null ? this._validator(control) : null;\n    }\n    /**\n     * @description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param fn The callback function\n     */\n    registerOnValidatorChange(fn) {\n        this._onChange = fn;\n    }\n    _createValidator() {\n        this._validator = Validators.maxLength(typeof this.maxlength === 'number' ? this.maxlength : parseInt(this.maxlength, 10));\n    }\n}\nMaxLengthValidator.ɵfac = function MaxLengthValidator_Factory(t) { return new (t || MaxLengthValidator)(); };\nMaxLengthValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MaxLengthValidator, selectors: [[\"\", \"maxlength\", \"\", \"formControlName\", \"\"], [\"\", \"maxlength\", \"\", \"formControl\", \"\"], [\"\", \"maxlength\", \"\", \"ngModel\", \"\"]], hostVars: 1, hostBindings: function MaxLengthValidator_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"maxlength\", ctx.maxlength ? ctx.maxlength : null);\n    } }, inputs: { maxlength: \"maxlength\" }, features: [ɵngcc0.ɵɵProvidersFeature([MAX_LENGTH_VALIDATOR]), ɵngcc0.ɵɵNgOnChangesFeature] });\nMaxLengthValidator.propDecorators = {\n    maxlength: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MaxLengthValidator, [{\n        type: Directive,\n        args: [{\n                selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                providers: [MAX_LENGTH_VALIDATOR],\n                host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n            }]\n    }], function () { return []; }, { maxlength: [{\n            type: Input\n        }] }); })();\n/**\n * @description\n * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst PATTERN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => PatternValidator),\n    multi: true\n};\n/**\n * @description\n * A directive that adds regex pattern validation to controls marked with the\n * `pattern` attribute. The regex must match the entire control value.\n * The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a pattern validator\n *\n * The following example shows how to add a pattern validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel pattern=\"[a-zA-Z ]*\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass PatternValidator {\n    constructor() {\n        this._validator = Validators.nullValidator;\n    }\n    /**\n     * @description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param changes A object of key/value pairs for the set of changed inputs.\n     */\n    ngOnChanges(changes) {\n        if ('pattern' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    }\n    /**\n     * @description\n     * Method that validates whether the value matches the\n     * the pattern requirement.\n     */\n    validate(control) {\n        return this._validator(control);\n    }\n    /**\n     * @description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param fn The callback function\n     */\n    registerOnValidatorChange(fn) {\n        this._onChange = fn;\n    }\n    _createValidator() {\n        this._validator = Validators.pattern(this.pattern);\n    }\n}\nPatternValidator.ɵfac = function PatternValidator_Factory(t) { return new (t || PatternValidator)(); };\nPatternValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PatternValidator, selectors: [[\"\", \"pattern\", \"\", \"formControlName\", \"\"], [\"\", \"pattern\", \"\", \"formControl\", \"\"], [\"\", \"pattern\", \"\", \"ngModel\", \"\"]], hostVars: 1, hostBindings: function PatternValidator_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"pattern\", ctx.pattern ? ctx.pattern : null);\n    } }, inputs: { pattern: \"pattern\" }, features: [ɵngcc0.ɵɵProvidersFeature([PATTERN_VALIDATOR]), ɵngcc0.ɵɵNgOnChangesFeature] });\nPatternValidator.propDecorators = {\n    pattern: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PatternValidator, [{\n        type: Directive,\n        args: [{\n                selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                providers: [PATTERN_VALIDATOR],\n                host: { '[attr.pattern]': 'pattern ? pattern : null' }\n            }]\n    }], function () { return []; }, { pattern: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst SHARED_FORM_DIRECTIVES = [\n    ɵNgNoValidate,\n    NgSelectOption,\n    ɵNgSelectMultipleOption,\n    DefaultValueAccessor,\n    NumberValueAccessor,\n    RangeValueAccessor,\n    CheckboxControlValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n    NgControlStatus,\n    NgControlStatusGroup,\n    RequiredValidator,\n    MinLengthValidator,\n    MaxLengthValidator,\n    PatternValidator,\n    CheckboxRequiredValidator,\n    EmailValidator,\n];\nconst TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\nconst REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nclass ɵInternalFormsSharedModule {\n}\nɵInternalFormsSharedModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ɵInternalFormsSharedModule });\nɵInternalFormsSharedModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ɵInternalFormsSharedModule_Factory(t) { return new (t || ɵInternalFormsSharedModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ɵInternalFormsSharedModule, { declarations: [ɵNgNoValidate, NgSelectOption, ɵNgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator], exports: [ɵNgNoValidate, NgSelectOption, ɵNgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ɵInternalFormsSharedModule, [{\n        type: NgModule,\n        args: [{\n                declarations: SHARED_FORM_DIRECTIVES,\n                exports: SHARED_FORM_DIRECTIVES\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction isAbstractControlOptions(options) {\n    return options.asyncValidators !== undefined ||\n        options.validators !== undefined ||\n        options.updateOn !== undefined;\n}\n/**\n * @description\n * Creates an `AbstractControl` from a user-specified configuration.\n *\n * The `FormBuilder` provides syntactic sugar that shortens creating instances of a `FormControl`,\n * `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to build complex\n * forms.\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n * @publicApi\n */\nclass FormBuilder {\n    /**\n     * @description\n     * Construct a new `FormGroup` instance.\n     *\n     * @param controlsConfig A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param options Configuration options object for the `FormGroup`. The object can\n     * have two shapes:\n     *\n     * 1) `AbstractControlOptions` object (preferred), which consists of:\n     * * `validators`: A synchronous validator function, or an array of validator functions\n     * * `asyncValidators`: A single async validator or array of async validator functions\n     * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur' |\n     * submit')\n     *\n     * 2) Legacy configuration object, which consists of:\n     * * `validator`: A synchronous validator function, or an array of validator functions\n     * * `asyncValidator`: A single async validator or array of async validator functions\n     *\n     */\n    group(controlsConfig, options = null) {\n        const controls = this._reduceControls(controlsConfig);\n        let validators = null;\n        let asyncValidators = null;\n        let updateOn = undefined;\n        if (options != null) {\n            if (isAbstractControlOptions(options)) {\n                // `options` are `AbstractControlOptions`\n                validators = options.validators != null ? options.validators : null;\n                asyncValidators = options.asyncValidators != null ? options.asyncValidators : null;\n                updateOn = options.updateOn != null ? options.updateOn : undefined;\n            }\n            else {\n                // `options` are legacy form group options\n                validators = options['validator'] != null ? options['validator'] : null;\n                asyncValidators = options['asyncValidator'] != null ? options['asyncValidator'] : null;\n            }\n        }\n        return new FormGroup(controls, { asyncValidators, updateOn, validators });\n    }\n    /**\n     * @description\n     * Construct a new `FormControl` with the given state, validators and options.\n     *\n     * @param formState Initializes the control with an initial state value, or\n     * with an object that contains both a value and a disabled status.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator\n     * functions.\n     *\n     * @usageNotes\n     *\n     * ### Initialize a control as disabled\n     *\n     * The following example returns a control with an initial value in a disabled state.\n     *\n     * <code-example path=\"forms/ts/formBuilder/form_builder_example.ts\" region=\"disabled-control\">\n     * </code-example>\n     */\n    control(formState, validatorOrOpts, asyncValidator) {\n        return new FormControl(formState, validatorOrOpts, asyncValidator);\n    }\n    /**\n     * Constructs a new `FormArray` from the given array of configurations,\n     * validators and options.\n     *\n     * @param controlsConfig An array of child controls or control configs. Each\n     * child control is given an index when it is registered.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator\n     * functions.\n     */\n    array(controlsConfig, validatorOrOpts, asyncValidator) {\n        const controls = controlsConfig.map(c => this._createControl(c));\n        return new FormArray(controls, validatorOrOpts, asyncValidator);\n    }\n    /** @internal */\n    _reduceControls(controlsConfig) {\n        const controls = {};\n        Object.keys(controlsConfig).forEach(controlName => {\n            controls[controlName] = this._createControl(controlsConfig[controlName]);\n        });\n        return controls;\n    }\n    /** @internal */\n    _createControl(controlConfig) {\n        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n            controlConfig instanceof FormArray) {\n            return controlConfig;\n        }\n        else if (Array.isArray(controlConfig)) {\n            const value = controlConfig[0];\n            const validator = controlConfig.length > 1 ? controlConfig[1] : null;\n            const asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n            return this.control(value, validator, asyncValidator);\n        }\n        else {\n            return this.control(controlConfig);\n        }\n    }\n}\nFormBuilder.ɵfac = function FormBuilder_Factory(t) { return new (t || FormBuilder)(); };\nFormBuilder.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FormBuilder, factory: FormBuilder.ɵfac });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormBuilder, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @publicApi\n */\nconst VERSION = new Version('10.0.7');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Exports the required providers and directives for template-driven forms,\n * making them available for import by NgModules that import this module.\n *\n * @see [Forms Overview](/guide/forms-overview)\n * @see [Template-driven Forms Guide](/guide/forms)\n *\n * @publicApi\n */\nclass FormsModule {\n}\nFormsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormsModule });\nFormsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormsModule_Factory(t) { return new (t || FormsModule)(); }, providers: [RadioControlRegistry], imports: [ɵInternalFormsSharedModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormsModule, { declarations: [NgModel, NgModelGroup, NgForm], exports: [ɵInternalFormsSharedModule, NgModel, NgModelGroup, NgForm] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormsModule, [{\n        type: NgModule,\n        args: [{\n                declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                providers: [RadioControlRegistry],\n                exports: [ɵInternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n            }]\n    }], null, null); })();\n/**\n * Exports the required infrastructure and directives for reactive forms,\n * making them available for import by NgModules that import this module.\n *\n * @see [Forms Overview](guide/forms-overview)\n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * @publicApi\n */\nclass ReactiveFormsModule {\n    /**\n     * @description\n     * Provides options for configuring the reactive forms module.\n     *\n     * @param opts An object of configuration options\n     * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`\n     * binding is used with reactive form directives.\n     */\n    static withConfig(opts) {\n        return {\n            ngModule: ReactiveFormsModule,\n            providers: [\n                { provide: NG_MODEL_WITH_FORM_CONTROL_WARNING, useValue: opts.warnOnNgModelWithFormControl }\n            ]\n        };\n    }\n}\nReactiveFormsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ReactiveFormsModule });\nReactiveFormsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ReactiveFormsModule_Factory(t) { return new (t || ReactiveFormsModule)(); }, providers: [FormBuilder, RadioControlRegistry], imports: [ɵInternalFormsSharedModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ReactiveFormsModule, { declarations: [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName], exports: [ɵInternalFormsSharedModule, FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReactiveFormsModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                providers: [FormBuilder, RadioControlRegistry],\n                exports: [ɵInternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AbstractControl, AbstractControlDirective, AbstractFormGroupDirective, COMPOSITION_BUFFER_MODE, CheckboxControlValueAccessor, CheckboxRequiredValidator, ControlContainer, DefaultValueAccessor, EmailValidator, FormArray, FormArrayName, FormBuilder, FormControl, FormControlDirective, FormControlName, FormGroup, FormGroupDirective, FormGroupName, FormsModule, MaxLengthValidator, MinLengthValidator, NG_ASYNC_VALIDATORS, NG_VALIDATORS, NG_VALUE_ACCESSOR, NgControl, NgControlStatus, NgControlStatusGroup, NgForm, NgModel, NgModelGroup, NgSelectOption, NumberValueAccessor, PatternValidator, RadioControlValueAccessor, RangeValueAccessor, ReactiveFormsModule, RequiredValidator, SelectControlValueAccessor, SelectMultipleControlValueAccessor, VERSION, Validators, ɵInternalFormsSharedModule, ɵNgNoValidate, ɵNgSelectMultipleOption, SHARED_FORM_DIRECTIVES as ɵangular_packages_forms_forms_a, TEMPLATE_DRIVEN_DIRECTIVES as ɵangular_packages_forms_forms_b, CHECKBOX_REQUIRED_VALIDATOR as ɵangular_packages_forms_forms_ba, EMAIL_VALIDATOR as ɵangular_packages_forms_forms_bb, MIN_LENGTH_VALIDATOR as ɵangular_packages_forms_forms_bc, MAX_LENGTH_VALIDATOR as ɵangular_packages_forms_forms_bd, PATTERN_VALIDATOR as ɵangular_packages_forms_forms_be, REACTIVE_DRIVEN_DIRECTIVES as ɵangular_packages_forms_forms_c, ɵInternalFormsSharedModule as ɵangular_packages_forms_forms_d, CHECKBOX_VALUE_ACCESSOR as ɵangular_packages_forms_forms_e, DEFAULT_VALUE_ACCESSOR as ɵangular_packages_forms_forms_f, AbstractControlStatus as ɵangular_packages_forms_forms_g, ngControlStatusHost as ɵangular_packages_forms_forms_h, formDirectiveProvider as ɵangular_packages_forms_forms_i, formControlBinding as ɵangular_packages_forms_forms_j, modelGroupProvider as ɵangular_packages_forms_forms_k, NUMBER_VALUE_ACCESSOR as ɵangular_packages_forms_forms_l, RADIO_VALUE_ACCESSOR as ɵangular_packages_forms_forms_m, RadioControlRegistry as ɵangular_packages_forms_forms_n, RANGE_VALUE_ACCESSOR as ɵangular_packages_forms_forms_o, NG_MODEL_WITH_FORM_CONTROL_WARNING as ɵangular_packages_forms_forms_p, formControlBinding$1 as ɵangular_packages_forms_forms_q, controlNameBinding as ɵangular_packages_forms_forms_r, formDirectiveProvider$1 as ɵangular_packages_forms_forms_s, formGroupNameProvider as ɵangular_packages_forms_forms_t, formArrayNameProvider as ɵangular_packages_forms_forms_u, SELECT_VALUE_ACCESSOR as ɵangular_packages_forms_forms_v, SELECT_MULTIPLE_VALUE_ACCESSOR as ɵangular_packages_forms_forms_w, ɵNgSelectMultipleOption as ɵangular_packages_forms_forms_x, ɵNgNoValidate as ɵangular_packages_forms_forms_y, REQUIRED_VALIDATOR as ɵangular_packages_forms_forms_z };\n\n//# sourceMappingURL=forms.js.map","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nclass AuditOperator {\n    constructor(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    }\n}\nclass AuditSubscriber extends OuterSubscriber {\n    constructor(destination, durationSelector) {\n        super(destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            let duration;\n            try {\n                const { durationSelector } = this;\n                duration = durationSelector(value);\n            }\n            catch (err) {\n                return this.destination.error(err);\n            }\n            const innerSubscription = subscribeToResult(this, duration);\n            if (!innerSubscription || innerSubscription.closed) {\n                this.clearThrottle();\n            }\n            else {\n                this.add(this.throttled = innerSubscription);\n            }\n        }\n    }\n    clearThrottle() {\n        const { value, hasValue, throttled } = this;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    }\n    notifyComplete() {\n        this.clearThrottle();\n    }\n}\n//# sourceMappingURL=audit.js.map","import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function timer(dueTime = 0, periodOrScheduler, scheduler) {\n    let period = -1;\n    if (isNumeric(periodOrScheduler)) {\n        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n    }\n    else if (isScheduler(periodOrScheduler)) {\n        scheduler = periodOrScheduler;\n    }\n    if (!isScheduler(scheduler)) {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        const due = isNumeric(dueTime)\n            ? dueTime\n            : (+dueTime - scheduler.now());\n        return scheduler.schedule(dispatch, due, {\n            index: 0, period, subscriber\n        });\n    });\n}\nfunction dispatch(state) {\n    const { index, period, subscriber } = state;\n    subscriber.next(index);\n    if (subscriber.closed) {\n        return;\n    }\n    else if (period === -1) {\n        return subscriber.complete();\n    }\n    state.index = index + 1;\n    this.schedule(state, period);\n}\n//# sourceMappingURL=timer.js.map","import { async } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nexport function auditTime(duration, scheduler = async) {\n    return audit(() => timer(duration, scheduler));\n}\n//# sourceMappingURL=auditTime.js.map","import { Observable } from '../Observable';\nexport function isObservable(obj) {\n    return !!obj && (obj instanceof Observable || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));\n}\n//# sourceMappingURL=isObservable.js.map","let nextHandle = 1;\nconst RESOLVED = (() => Promise.resolve())();\nconst activeHandles = {};\nfunction findAndClearHandle(handle) {\n    if (handle in activeHandles) {\n        delete activeHandles[handle];\n        return true;\n    }\n    return false;\n}\nexport const Immediate = {\n    setImmediate(cb) {\n        const handle = nextHandle++;\n        activeHandles[handle] = true;\n        RESOLVED.then(() => findAndClearHandle(handle) && cb());\n        return handle;\n    },\n    clearImmediate(handle) {\n        findAndClearHandle(handle);\n    },\n};\nexport const TestTools = {\n    pending() {\n        return Object.keys(activeHandles).length;\n    }\n};\n//# sourceMappingURL=Immediate.js.map","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nexport class AsapAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        if (scheduler.actions.length === 0) {\n            Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        return undefined;\n    }\n}\n//# sourceMappingURL=AsapAction.js.map","import { AsyncScheduler } from './AsyncScheduler';\nexport class AsapScheduler extends AsyncScheduler {\n    flush(action) {\n        this.active = true;\n        this.scheduled = undefined;\n        const { actions } = this;\n        let error;\n        let index = -1;\n        let count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n//# sourceMappingURL=AsapScheduler.js.map","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\nexport const asap = new AsapScheduler(AsapAction);\n//# sourceMappingURL=asap.js.map","import { Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Optional, Inject, ViewChild, Input, NgModule } from '@angular/core';\nimport { mixinColor, mixinDisabled, mixinDisableRipple, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\n\nconst _c0 = [\"mat-button\", \"\"];\nconst _c1 = [\"*\"];\nconst _c2 = \".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button.mat-button-disabled,.mat-icon-button.mat-button-disabled,.mat-stroked-button.mat-button-disabled,.mat-flat-button.mat-button-disabled{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button.mat-button-disabled{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab.mat-button-disabled{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab.mat-button-disabled{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.cdk-high-contrast-active .mat-button-focus-overlay{background-color:#fff}.cdk-high-contrast-black-on-white .mat-button-focus-overlay{background-color:#000}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}\\n\";\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n    'mat-button',\n    'mat-flat-button',\n    'mat-icon-button',\n    'mat-raised-button',\n    'mat-stroked-button',\n    'mat-mini-fab',\n    'mat-fab',\n];\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n/**\n * Material design button.\n */\nclass MatButton extends _MatButtonMixinBase {\n    constructor(elementRef, _focusMonitor, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._animationMode = _animationMode;\n        /** Whether the button is round. */\n        this.isRoundButton = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n        /** Whether the button is icon button. */\n        this.isIconButton = this._hasHostAttributes('mat-icon-button');\n        // For each of the variant selectors that is present in the button's host\n        // attributes, add the correct corresponding class.\n        for (const attr of BUTTON_HOST_ATTRIBUTES) {\n            if (this._hasHostAttributes(attr)) {\n                this._getHostElement().classList.add(attr);\n            }\n        }\n        // Add a class that applies to all buttons. This makes it easier to target if somebody\n        // wants to target all Material buttons. We do it here rather than `host` to ensure that\n        // the class is applied to derived classes.\n        elementRef.nativeElement.classList.add('mat-button-base');\n        if (this.isRoundButton) {\n            this.color = DEFAULT_ROUND_BUTTON_COLOR;\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Focuses the button. */\n    focus(origin = 'program', options) {\n        this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    }\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /** Gets whether the button has one of the given attributes. */\n    _hasHostAttributes(...attributes) {\n        return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n    }\n}\nMatButton.ɵfac = function MatButton_Factory(t) { return new (t || MatButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatButton, selectors: [[\"button\", \"mat-button\", \"\"], [\"button\", \"mat-raised-button\", \"\"], [\"button\", \"mat-icon-button\", \"\"], [\"button\", \"mat-fab\", \"\"], [\"button\", \"mat-mini-fab\", \"\"], [\"button\", \"mat-stroked-button\", \"\"], [\"button\", \"mat-flat-button\", \"\"]], viewQuery: function MatButton_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatRipple, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n    } }, hostAttrs: [1, \"mat-focus-indicator\"], hostVars: 5, hostBindings: function MatButton_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-button-disabled\", ctx.disabled);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\" }, exportAs: [\"matButton\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c0, ngContentSelectors: _c1, decls: 4, vars: 5, consts: [[1, \"mat-button-wrapper\"], [\"matRipple\", \"\", 1, \"mat-button-ripple\", 3, \"matRippleDisabled\", \"matRippleCentered\", \"matRippleTrigger\"], [1, \"mat-button-focus-overlay\"]], template: function MatButton_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(2, \"div\", 1);\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-button-ripple-round\", ctx.isRoundButton || ctx.isIconButton);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", ctx.isIconButton)(\"matRippleTrigger\", ctx._getHostElement());\n    } }, directives: [ɵngcc2.MatRipple], styles: [_c2], encapsulation: 2, changeDetection: 0 });\nMatButton.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatButton.propDecorators = {\n    ripple: [{ type: ViewChild, args: [MatRipple,] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatButton, [{\n        type: Component,\n        args: [{\n                selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n                exportAs: 'matButton',\n                host: {\n                    '[attr.disabled]': 'disabled || null',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    // Add a class for disabled button styling instead of the using attribute\n                    // selector or pseudo-selector.  This allows users to create focusabled\n                    // disabled buttons without recreating the styles.\n                    '[class.mat-button-disabled]': 'disabled',\n                    'class': 'mat-focus-indicator'\n                },\n                template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span>\\n<div matRipple class=\\\"mat-button-ripple\\\"\\n     [class.mat-button-ripple-round]=\\\"isRoundButton || isIconButton\\\"\\n     [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n     [matRippleCentered]=\\\"isIconButton\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\"></div>\\n<div class=\\\"mat-button-focus-overlay\\\"></div>\\n\",\n                inputs: ['disabled', 'disableRipple', 'color'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button.mat-button-disabled,.mat-icon-button.mat-button-disabled,.mat-stroked-button.mat-button-disabled,.mat-flat-button.mat-button-disabled{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button.mat-button-disabled{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab.mat-button-disabled{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab.mat-button-disabled{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.cdk-high-contrast-active .mat-button-focus-overlay{background-color:#fff}.cdk-high-contrast-black-on-white .mat-button-focus-overlay{background-color:#000}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { ripple: [{\n            type: ViewChild,\n            args: [MatRipple]\n        }] }); })();\n/**\n * Material design anchor button.\n */\nclass MatAnchor extends MatButton {\n    constructor(focusMonitor, elementRef, animationMode) {\n        super(elementRef, focusMonitor, animationMode);\n    }\n    _haltDisabledEvents(event) {\n        // A disabled button shouldn't apply any actions\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\nMatAnchor.ɵfac = function MatAnchor_Factory(t) { return new (t || MatAnchor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatAnchor.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatAnchor, selectors: [[\"a\", \"mat-button\", \"\"], [\"a\", \"mat-raised-button\", \"\"], [\"a\", \"mat-icon-button\", \"\"], [\"a\", \"mat-fab\", \"\"], [\"a\", \"mat-mini-fab\", \"\"], [\"a\", \"mat-stroked-button\", \"\"], [\"a\", \"mat-flat-button\", \"\"]], hostAttrs: [1, \"mat-focus-indicator\"], hostVars: 7, hostBindings: function MatAnchor_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatAnchor_click_HostBindingHandler($event) { return ctx._haltDisabledEvents($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? 0 - 1 : ctx.tabIndex || 0)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString());\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-button-disabled\", ctx.disabled);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\" }, exportAs: [\"matButton\", \"matAnchor\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c0, ngContentSelectors: _c1, decls: 4, vars: 5, consts: [[1, \"mat-button-wrapper\"], [\"matRipple\", \"\", 1, \"mat-button-ripple\", 3, \"matRippleDisabled\", \"matRippleCentered\", \"matRippleTrigger\"], [1, \"mat-button-focus-overlay\"]], template: function MatAnchor_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(2, \"div\", 1);\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-button-ripple-round\", ctx.isRoundButton || ctx.isIconButton);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", ctx.isIconButton)(\"matRippleTrigger\", ctx._getHostElement());\n    } }, directives: [ɵngcc2.MatRipple], styles: [_c2], encapsulation: 2, changeDetection: 0 });\nMatAnchor.ctorParameters = () => [\n    { type: FocusMonitor },\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatAnchor.propDecorators = {\n    tabIndex: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAnchor, [{\n        type: Component,\n        args: [{\n                selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n                exportAs: 'matButton, matAnchor',\n                host: {\n                    // Note that we ignore the user-specified tabindex when it's disabled for\n                    // consistency with the `mat-button` applied on native buttons where even\n                    // though they have an index, they're not tabbable.\n                    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '(click)': '_haltDisabledEvents($event)',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-button-disabled]': 'disabled',\n                    'class': 'mat-focus-indicator'\n                },\n                inputs: ['disabled', 'disableRipple', 'color'],\n                template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span>\\n<div matRipple class=\\\"mat-button-ripple\\\"\\n     [class.mat-button-ripple-round]=\\\"isRoundButton || isIconButton\\\"\\n     [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n     [matRippleCentered]=\\\"isIconButton\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\"></div>\\n<div class=\\\"mat-button-focus-overlay\\\"></div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button.mat-button-disabled,.mat-icon-button.mat-button-disabled,.mat-stroked-button.mat-button-disabled,.mat-flat-button.mat-button-disabled{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button.mat-button-disabled{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab.mat-button-disabled{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab.mat-button-disabled{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.cdk-high-contrast-active .mat-button-focus-overlay{background-color:#fff}.cdk-high-contrast-black-on-white .mat-button-focus-overlay{background-color:#000}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ElementRef }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { tabIndex: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonModule {\n}\nMatButtonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatButtonModule });\nMatButtonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatButtonModule_Factory(t) { return new (t || MatButtonModule)(); }, imports: [[\n            MatRippleModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonModule, { declarations: function () { return [MatButton, MatAnchor]; }, imports: function () { return [MatRippleModule,\n        MatCommonModule]; }, exports: function () { return [MatButton, MatAnchor, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatButtonModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    MatRippleModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatButton,\n                    MatAnchor,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatButton,\n                    MatAnchor,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatAnchor, MatButton, MatButtonModule };\n\n//# sourceMappingURL=button.js.map","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\n\nimport { CdkTableModule } from '@angular/cdk/table';\n\nconst components = [\n  MatButtonModule,\n  MatInputModule,\n  MatFormFieldModule,\n  MatIconModule,\n  MatSelectModule,\n  MatButtonToggleModule,\n  CdkTableModule,\n];\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, ...components],\n  exports: components,\n})\nexport class MaterialModule {}\n","import { ElementRef } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Coerces a data-bound value (typically a string) to a boolean. */\nfunction coerceBooleanProperty(value) {\n    return value != null && `${value}` !== 'false';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n    return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nfunction _isNumberValue(value) {\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n    return !isNaN(parseFloat(value)) && !isNaN(Number(value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value) {\n    if (value == null) {\n        return '';\n    }\n    return typeof value === 'string' ? value : `${value}px`;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nfunction coerceElement(elementOrRef) {\n    return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport { _isNumberValue, coerceArray, coerceBooleanProperty, coerceCssPixelValue, coerceElement, coerceNumberProperty };\n//# sourceMappingURL=coercion.js.map\n","import { Version } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Current version of the Angular Component Development Kit. */\nconst VERSION = new Version('10.1.2');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport { VERSION };\n//# sourceMappingURL=cdk.js.map\n","import { Version, InjectionToken, isDevMode, NgModule, Optional, Inject, inject, LOCALE_ID, Injectable, ɵɵdefineInjectable, Directive, ElementRef, NgZone, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, EventEmitter, ChangeDetectorRef, Output } from '@angular/core';\nimport { HighContrastModeDetector, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { VERSION as VERSION$2 } from '@angular/cdk';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { coerceBooleanProperty, coerceNumberProperty, coerceElement } from '@angular/cdk/coercion';\nimport { Subject, Observable } from 'rxjs';\nimport { Platform, PlatformModule, normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { startWith } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ENTER, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Current version of Angular Material. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/common';\n\nconst _c0 = [\"*\", [[\"mat-option\"], [\"ng-container\"]]];\nconst _c1 = [\"*\", \"mat-option, ng-container\"];\nfunction MatOption_mat_pseudo_checkbox_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"mat-pseudo-checkbox\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"state\", ctx_r0.selected ? \"checked\" : \"unchecked\")(\"disabled\", ctx_r0.disabled);\n} }\nconst _c2 = [\"*\"];\nconst VERSION = new Version('10.1.2');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nclass AnimationCurves {\n}\nAnimationCurves.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\nAnimationCurves.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\nAnimationCurves.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\nAnimationCurves.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n/** @docs-private */\nclass AnimationDurations {\n}\nAnimationDurations.COMPLEX = '375ms';\nAnimationDurations.ENTERING = '225ms';\nAnimationDurations.EXITING = '195ms';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Private version constant to circumvent test/build issues,\n// i.e. avoid core to depend on the @angular/material primary entry-point\n// Can be removed once the Material primary entry-point no longer\n// re-exports all secondary entry-points\nconst VERSION$1 = new Version('10.1.2');\n/** @docs-private */\nfunction MATERIAL_SANITY_CHECKS_FACTORY() {\n    return true;\n}\n/** Injection token that configures whether the Material sanity checks are enabled. */\nconst MATERIAL_SANITY_CHECKS = new InjectionToken('mat-sanity-checks', {\n    providedIn: 'root',\n    factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\nclass MatCommonModule {\n    constructor(highContrastModeDetector, sanityChecks, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n        this._hasDoneGlobalChecks = false;\n        this._document = document;\n        // While A11yModule also does this, we repeat it here to avoid importing A11yModule\n        // in MatCommonModule.\n        highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n        // Note that `_sanityChecks` is typed to `any`, because AoT\n        // throws an error if we use the `SanityChecks` type directly.\n        this._sanityChecks = sanityChecks;\n        if (!this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._checkCdkVersionMatch();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        const doc = this._document || document;\n        return typeof doc === 'object' && doc ? doc : null;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        const win = (doc === null || doc === void 0 ? void 0 : doc.defaultView) || window;\n        return typeof win === 'object' && win ? win : null;\n    }\n    /** Whether any sanity checks are enabled. */\n    _checksAreEnabled() {\n        return isDevMode() && !this._isTestEnv();\n    }\n    /** Whether the code is running in tests. */\n    _isTestEnv() {\n        const window = this._getWindow();\n        return window && (window.__karma__ || window.jasmine);\n    }\n    _checkDoctypeIsDefined() {\n        const isEnabled = this._checksAreEnabled() &&\n            (this._sanityChecks === true || this._sanityChecks.doctype);\n        const document = this._getDocument();\n        if (isEnabled && document && !document.doctype) {\n            console.warn('Current document does not have a doctype. This may cause ' +\n                'some Angular Material components not to behave as expected.');\n        }\n    }\n    _checkThemeIsPresent() {\n        // We need to assert that the `body` is defined, because these checks run very early\n        // and the `body` won't be defined if the consumer put their scripts in the `head`.\n        const isDisabled = !this._checksAreEnabled() ||\n            (this._sanityChecks === false || !this._sanityChecks.theme);\n        const document = this._getDocument();\n        if (isDisabled || !document || !document.body ||\n            typeof getComputedStyle !== 'function') {\n            return;\n        }\n        const testElement = document.createElement('div');\n        testElement.classList.add('mat-theme-loaded-marker');\n        document.body.appendChild(testElement);\n        const computedStyle = getComputedStyle(testElement);\n        // In some situations the computed style of the test element can be null. For example in\n        // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n        if (computedStyle && computedStyle.display !== 'none') {\n            console.warn('Could not find Angular Material core theme. Most Material ' +\n                'components may not work as expected. For more info refer ' +\n                'to the theming guide: https://material.angular.io/guide/theming');\n        }\n        document.body.removeChild(testElement);\n    }\n    /** Checks whether the material version matches the cdk version */\n    _checkCdkVersionMatch() {\n        const isEnabled = this._checksAreEnabled() &&\n            (this._sanityChecks === true || this._sanityChecks.version);\n        if (isEnabled && VERSION$1.full !== VERSION$2.full) {\n            console.warn('The Angular Material version (' + VERSION$1.full + ') does not match ' +\n                'the Angular CDK version (' + VERSION$2.full + ').\\n' +\n                'Please ensure the versions of these two packages exactly match.');\n        }\n    }\n}\nMatCommonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatCommonModule });\nMatCommonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatCommonModule_Factory(t) { return new (t || MatCommonModule)(ɵngcc0.ɵɵinject(ɵngcc1.HighContrastModeDetector), ɵngcc0.ɵɵinject(MATERIAL_SANITY_CHECKS, 8), ɵngcc0.ɵɵinject(DOCUMENT, 8)); }, imports: [[BidiModule], BidiModule] });\nMatCommonModule.ctorParameters = () => [\n    { type: HighContrastModeDetector },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCommonModule, { imports: function () { return [BidiModule]; }, exports: function () { return [BidiModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCommonModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule],\n                exports: [BidiModule]\n            }]\n    }], function () { return [{ type: ɵngcc1.HighContrastModeDetector }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MATERIAL_SANITY_CHECKS]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Mixin to augment a directive with a `disabled` property. */\nfunction mixinDisabled(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._disabled = false;\n        }\n        get disabled() { return this._disabled; }\n        set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Mixin to augment a directive with a `color` property. */\nfunction mixinColor(base, defaultColor) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            // Set the default color that can be specified from the mixin.\n            this.color = defaultColor;\n        }\n        get color() { return this._color; }\n        set color(value) {\n            const colorPalette = value || defaultColor;\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n                }\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n                }\n                this._color = colorPalette;\n            }\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Mixin to augment a directive with a `disableRipple` property. */\nfunction mixinDisableRipple(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._disableRipple = false;\n        }\n        /** Whether the ripple effect is disabled or not. */\n        get disableRipple() { return this._disableRipple; }\n        set disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Mixin to augment a directive with a `tabIndex` property. */\nfunction mixinTabIndex(base, defaultTabIndex = 0) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._tabIndex = defaultTabIndex;\n        }\n        get tabIndex() { return this.disabled ? -1 : this._tabIndex; }\n        set tabIndex(value) {\n            // If the specified tabIndex value is null or undefined, fall back to the default value.\n            this._tabIndex = value != null ? coerceNumberProperty(value) : defaultTabIndex;\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nfunction mixinErrorState(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            /** Whether the component is in an error state. */\n            this.errorState = false;\n            /**\n             * Stream that emits whenever the state of the input changes such that the wrapping\n             * `MatFormField` needs to run change detection.\n             */\n            this.stateChanges = new Subject();\n        }\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control : null;\n            const newState = matcher.isErrorState(control, parent);\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nfunction mixinInitialized(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            /** Whether this directive has been marked as initialized. */\n            this._isInitialized = false;\n            /**\n             * List of subscribers that subscribed before the directive was initialized. Should be notified\n             * during _markInitialized. Set to null after pending subscribers are notified, and should\n             * not expect to be populated after.\n             */\n            this._pendingSubscribers = [];\n            /**\n             * Observable stream that emits when the directive initializes. If already initialized, the\n             * subscriber is stored to be notified once _markInitialized is called.\n             */\n            this.initialized = new Observable(subscriber => {\n                // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n                // when _markInitialized is called.\n                if (this._isInitialized) {\n                    this._notifySubscriber(subscriber);\n                }\n                else {\n                    this._pendingSubscribers.push(subscriber);\n                }\n            });\n        }\n        /**\n         * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n         * of ngOnInit.\n         * @docs-private\n         */\n        _markInitialized() {\n            if (this._isInitialized) {\n                throw Error('This directive has already been marked as initialized and ' +\n                    'should not be called twice.');\n            }\n            this._isInitialized = true;\n            this._pendingSubscribers.forEach(this._notifySubscriber);\n            this._pendingSubscribers = null;\n        }\n        /** Emits and completes the subscriber stream (should only emit once). */\n        _notifySubscriber(subscriber) {\n            subscriber.next();\n            subscriber.complete();\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** InjectionToken for datepicker that can be used to override default locale code. */\nconst MAT_DATE_LOCALE = new InjectionToken('MAT_DATE_LOCALE', {\n    providedIn: 'root',\n    factory: MAT_DATE_LOCALE_FACTORY,\n});\n/** @docs-private */\nfunction MAT_DATE_LOCALE_FACTORY() {\n    return inject(LOCALE_ID);\n}\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nconst MAT_DATE_LOCALE_PROVIDER = { provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID };\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nclass DateAdapter {\n    constructor() {\n        this._localeChanges = new Subject();\n    }\n    /** A stream that emits when the locale changes. */\n    get localeChanges() { return this._localeChanges; }\n    /**\n     * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n     * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n     * string). The default implementation does not allow any deserialization, it simply checks that\n     * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n     * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n     * support passing values from your backend directly to these properties by overriding this method\n     * to also deserialize the format used by your backend.\n     * @param value The value to be deserialized into a date object.\n     * @returns The deserialized date object, either a valid date, null if the value can be\n     *     deserialized into a null date (e.g. the empty string), or an invalid date.\n     */\n    deserialize(value) {\n        if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n            return value;\n        }\n        return this.invalid();\n    }\n    /**\n     * Sets the locale used for all dates.\n     * @param locale The new locale.\n     */\n    setLocale(locale) {\n        this.locale = locale;\n        this._localeChanges.next();\n    }\n    /**\n     * Compares two dates.\n     * @param first The first date to compare.\n     * @param second The second date to compare.\n     * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n     *     a number greater than 0 if the first date is later.\n     */\n    compareDate(first, second) {\n        return this.getYear(first) - this.getYear(second) ||\n            this.getMonth(first) - this.getMonth(second) ||\n            this.getDate(first) - this.getDate(second);\n    }\n    /**\n     * Checks if two dates are equal.\n     * @param first The first date to check.\n     * @param second The second date to check.\n     * @returns Whether the two dates are equal.\n     *     Null dates are considered equal to other null dates.\n     */\n    sameDate(first, second) {\n        if (first && second) {\n            let firstValid = this.isValid(first);\n            let secondValid = this.isValid(second);\n            if (firstValid && secondValid) {\n                return !this.compareDate(first, second);\n            }\n            return firstValid == secondValid;\n        }\n        return first == second;\n    }\n    /**\n     * Clamp the given date between min and max dates.\n     * @param date The date to clamp.\n     * @param min The minimum value to allow. If null or omitted no min is enforced.\n     * @param max The maximum value to allow. If null or omitted no max is enforced.\n     * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n     *     otherwise `date`.\n     */\n    clampDate(date, min, max) {\n        if (min && this.compareDate(date, min) < 0) {\n            return min;\n        }\n        if (max && this.compareDate(date, max) > 0) {\n            return max;\n        }\n        return date;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_DATE_FORMATS = new InjectionToken('mat-date-formats');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n    SUPPORTS_INTL_API = typeof Intl != 'undefined';\n}\ncatch (_a) {\n    SUPPORTS_INTL_API = false;\n}\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n    'long': [\n        'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n        'October', 'November', 'December'\n    ],\n    'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\nconst ɵ0 = i => String(i + 1);\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, ɵ0);\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n    'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n    const valuesArray = Array(length);\n    for (let i = 0; i < length; i++) {\n        valuesArray[i] = valueFunction(i);\n    }\n    return valuesArray;\n}\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\nclass NativeDateAdapter extends DateAdapter {\n    constructor(matDateLocale, platform) {\n        super();\n        /**\n         * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n         * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n         * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n         * will produce `'8/13/1800'`.\n         *\n         * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n         * getting the string representation of a Date object from its utc representation. We're keeping\n         * it here for sometime, just for precaution, in case we decide to revert some of these changes\n         * though.\n         */\n        this.useUtcForDisplay = true;\n        super.setLocale(matDateLocale);\n        // IE does its own time zone correction, so we disable this on IE.\n        this.useUtcForDisplay = !platform.TRIDENT;\n        this._clampDate = platform.TRIDENT || platform.EDGE;\n    }\n    getYear(date) {\n        return date.getFullYear();\n    }\n    getMonth(date) {\n        return date.getMonth();\n    }\n    getDate(date) {\n        return date.getDate();\n    }\n    getDayOfWeek(date) {\n        return date.getDay();\n    }\n    getMonthNames(style) {\n        if (SUPPORTS_INTL_API) {\n            const dtf = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });\n            return range(12, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n        }\n        return DEFAULT_MONTH_NAMES[style];\n    }\n    getDateNames() {\n        if (SUPPORTS_INTL_API) {\n            const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });\n            return range(31, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\n        }\n        return DEFAULT_DATE_NAMES;\n    }\n    getDayOfWeekNames(style) {\n        if (SUPPORTS_INTL_API) {\n            const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });\n            return range(7, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\n        }\n        return DEFAULT_DAY_OF_WEEK_NAMES[style];\n    }\n    getYearName(date) {\n        if (SUPPORTS_INTL_API) {\n            const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });\n            return this._stripDirectionalityCharacters(this._format(dtf, date));\n        }\n        return String(this.getYear(date));\n    }\n    getFirstDayOfWeek() {\n        // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n        return 0;\n    }\n    getNumDaysInMonth(date) {\n        return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\n    }\n    clone(date) {\n        return new Date(date.getTime());\n    }\n    createDate(year, month, date) {\n        // Check for invalid month and date (except upper bound on date which we have to check after\n        // creating the Date).\n        if (month < 0 || month > 11) {\n            throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n        }\n        if (date < 1) {\n            throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n        }\n        let result = this._createDateWithOverflow(year, month, date);\n        // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n        if (result.getMonth() != month) {\n            throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n        }\n        return result;\n    }\n    today() {\n        return new Date();\n    }\n    parse(value) {\n        // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n        // parameters.\n        if (typeof value == 'number') {\n            return new Date(value);\n        }\n        return value ? new Date(Date.parse(value)) : null;\n    }\n    format(date, displayFormat) {\n        if (!this.isValid(date)) {\n            throw Error('NativeDateAdapter: Cannot format invalid date.');\n        }\n        if (SUPPORTS_INTL_API) {\n            // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n            // if we attempt to format a date whose year is less than 1 or greater than 9999.\n            if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n                date = this.clone(date);\n                date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n            }\n            displayFormat = Object.assign(Object.assign({}, displayFormat), { timeZone: 'utc' });\n            const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n            return this._stripDirectionalityCharacters(this._format(dtf, date));\n        }\n        return this._stripDirectionalityCharacters(date.toDateString());\n    }\n    addCalendarYears(date, years) {\n        return this.addCalendarMonths(date, years * 12);\n    }\n    addCalendarMonths(date, months) {\n        let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n        // It's possible to wind up in the wrong month if the original month has more days than the new\n        // month. In this case we want to go to the last day of the desired month.\n        // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n        // guarantee this.\n        if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n            newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n        }\n        return newDate;\n    }\n    addCalendarDays(date, days) {\n        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n    }\n    toIso8601(date) {\n        return [\n            date.getUTCFullYear(),\n            this._2digit(date.getUTCMonth() + 1),\n            this._2digit(date.getUTCDate())\n        ].join('-');\n    }\n    /**\n     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n     * invalid date for all other values.\n     */\n    deserialize(value) {\n        if (typeof value === 'string') {\n            if (!value) {\n                return null;\n            }\n            // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n            // string is the right format first.\n            if (ISO_8601_REGEX.test(value)) {\n                let date = new Date(value);\n                if (this.isValid(date)) {\n                    return date;\n                }\n            }\n        }\n        return super.deserialize(value);\n    }\n    isDateInstance(obj) {\n        return obj instanceof Date;\n    }\n    isValid(date) {\n        return !isNaN(date.getTime());\n    }\n    invalid() {\n        return new Date(NaN);\n    }\n    /** Creates a date but allows the month and date to overflow. */\n    _createDateWithOverflow(year, month, date) {\n        const result = new Date(year, month, date);\n        // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n        // abbreviations for 19xx.\n        if (year >= 0 && year < 100) {\n            result.setFullYear(this.getYear(result) - 1900);\n        }\n        return result;\n    }\n    /**\n     * Pads a number to make it two digits.\n     * @param n The number to pad.\n     * @returns The padded number.\n     */\n    _2digit(n) {\n        return ('00' + n).slice(-2);\n    }\n    /**\n     * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n     * other browsers do not. We remove them to make output consistent and because they interfere with\n     * date parsing.\n     * @param str The string to strip direction characters from.\n     * @returns The stripped string.\n     */\n    _stripDirectionalityCharacters(str) {\n        return str.replace(/[\\u200e\\u200f]/g, '');\n    }\n    /**\n     * When converting Date object to string, javascript built-in functions may return wrong\n     * results because it applies its internal DST rules. The DST rules around the world change\n     * very frequently, and the current valid rule is not always valid in previous years though.\n     * We work around this problem building a new Date object which has its internal UTC\n     * representation with the local date and time.\n     * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n     *    timeZone set to 'utc' to work fine.\n     * @param date Date from which we want to get the string representation according to dtf\n     * @returns A Date object with its UTC representation based on the passed in date info\n     */\n    _format(dtf, date) {\n        const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        return dtf.format(d);\n    }\n}\nNativeDateAdapter.ɵfac = function NativeDateAdapter_Factory(t) { return new (t || NativeDateAdapter)(ɵngcc0.ɵɵinject(MAT_DATE_LOCALE, 8), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nNativeDateAdapter.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NativeDateAdapter, factory: NativeDateAdapter.ɵfac });\nNativeDateAdapter.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE,] }] },\n    { type: Platform }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NativeDateAdapter, [{\n        type: Injectable\n    }], function () { return [{ type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DATE_LOCALE]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_NATIVE_DATE_FORMATS = {\n    parse: {\n        dateInput: null,\n    },\n    display: {\n        dateInput: { year: 'numeric', month: 'numeric', day: 'numeric' },\n        monthYearLabel: { year: 'numeric', month: 'short' },\n        dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\n        monthYearA11yLabel: { year: 'numeric', month: 'long' },\n    }\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass NativeDateModule {\n}\nNativeDateModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NativeDateModule });\nNativeDateModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NativeDateModule_Factory(t) { return new (t || NativeDateModule)(); }, providers: [\n        { provide: DateAdapter, useClass: NativeDateAdapter },\n    ], imports: [[PlatformModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NativeDateModule, { imports: function () { return [PlatformModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NativeDateModule, [{\n        type: NgModule,\n        args: [{\n                imports: [PlatformModule],\n                providers: [\n                    { provide: DateAdapter, useClass: NativeDateAdapter },\n                ]\n            }]\n    }], null, null); })();\nconst ɵ0$1 = MAT_NATIVE_DATE_FORMATS;\nclass MatNativeDateModule {\n}\nMatNativeDateModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatNativeDateModule });\nMatNativeDateModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatNativeDateModule_Factory(t) { return new (t || MatNativeDateModule)(); }, providers: [{ provide: MAT_DATE_FORMATS, useValue: ɵ0$1 }], imports: [[NativeDateModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatNativeDateModule, { imports: [NativeDateModule] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatNativeDateModule, [{\n        type: NgModule,\n        args: [{\n                imports: [NativeDateModule],\n                providers: [{ provide: MAT_DATE_FORMATS, useValue: ɵ0$1 }]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Error state matcher that matches when a control is invalid and dirty. */\nclass ShowOnDirtyErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\nShowOnDirtyErrorStateMatcher.ɵfac = function ShowOnDirtyErrorStateMatcher_Factory(t) { return new (t || ShowOnDirtyErrorStateMatcher)(); };\nShowOnDirtyErrorStateMatcher.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ShowOnDirtyErrorStateMatcher, factory: ShowOnDirtyErrorStateMatcher.ɵfac });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShowOnDirtyErrorStateMatcher, [{\n        type: Injectable\n    }], null, null); })();\n/** Provider that defines how form controls behave with regards to displaying error messages. */\nclass ErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\nErrorStateMatcher.ɵfac = function ErrorStateMatcher_Factory(t) { return new (t || ErrorStateMatcher)(); };\nErrorStateMatcher.ɵprov = ɵɵdefineInjectable({ factory: function ErrorStateMatcher_Factory() { return new ErrorStateMatcher(); }, token: ErrorStateMatcher, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ErrorStateMatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\nclass MatLine {\n}\nMatLine.ɵfac = function MatLine_Factory(t) { return new (t || MatLine)(); };\nMatLine.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatLine, selectors: [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], hostAttrs: [1, \"mat-line\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatLine, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-line], [matLine]',\n                host: { 'class': 'mat-line' }\n            }]\n    }], null, null); })();\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nfunction setLines(lines, element, prefix = 'mat') {\n    // Note: doesn't need to unsubscribe, because `changes`\n    // gets completed by Angular when the view is destroyed.\n    lines.changes.pipe(startWith(lines)).subscribe(({ length }) => {\n        setClass(element, `${prefix}-2-line`, false);\n        setClass(element, `${prefix}-3-line`, false);\n        setClass(element, `${prefix}-multi-line`, false);\n        if (length === 2 || length === 3) {\n            setClass(element, `${prefix}-${length}-line`, true);\n        }\n        else if (length > 3) {\n            setClass(element, `${prefix}-multi-line`, true);\n        }\n    });\n}\n/** Adds or removes a class from an element. */\nfunction setClass(element, className, isAdd) {\n    const classList = element.nativeElement.classList;\n    isAdd ? classList.add(className) : classList.remove(className);\n}\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nclass MatLineSetter {\n    constructor(lines, element) {\n        setLines(lines, element);\n    }\n}\nclass MatLineModule {\n}\nMatLineModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatLineModule });\nMatLineModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatLineModule_Factory(t) { return new (t || MatLineModule)(); }, imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatLineModule, { declarations: [MatLine], imports: [MatCommonModule], exports: [MatLine, MatCommonModule] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatLineModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatLine, MatCommonModule],\n                declarations: [MatLine]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to a previously launched ripple element.\n */\nclass RippleRef {\n    constructor(_renderer, \n    /** Reference to the ripple HTML element. */\n    element, \n    /** Ripple configuration used for the ripple. */\n    config) {\n        this._renderer = _renderer;\n        this.element = element;\n        this.config = config;\n        /** Current state of the ripple. */\n        this.state = 3 /* HIDDEN */;\n    }\n    /** Fades out the ripple element. */\n    fadeOut() {\n        this._renderer.fadeOutRipple(this);\n    }\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nconst defaultRippleAnimationConfig = {\n    enterDuration: 450,\n    exitDuration: 400\n};\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({ passive: true });\n/** Events that signal that the pointer is down. */\nconst pointerDownEvents = ['mousedown', 'touchstart'];\n/** Events that signal that the pointer is up. */\nconst pointerUpEvents = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nclass RippleRenderer {\n    constructor(_target, _ngZone, elementOrElementRef, platform) {\n        this._target = _target;\n        this._ngZone = _ngZone;\n        /** Whether the pointer is currently down or not. */\n        this._isPointerDown = false;\n        /** Set of currently active ripple references. */\n        this._activeRipples = new Set();\n        /** Whether pointer-up event listeners have been registered. */\n        this._pointerUpEventsRegistered = false;\n        // Only do anything if we're on the browser.\n        if (platform.isBrowser) {\n            this._containerElement = coerceElement(elementOrElementRef);\n        }\n    }\n    /**\n     * Fades in a ripple at the given coordinates.\n     * @param x Coordinate within the element, along the X axis at which to start the ripple.\n     * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n     * @param config Extra ripple options.\n     */\n    fadeInRipple(x, y, config = {}) {\n        const containerRect = this._containerRect =\n            this._containerRect || this._containerElement.getBoundingClientRect();\n        const animationConfig = Object.assign(Object.assign({}, defaultRippleAnimationConfig), config.animation);\n        if (config.centered) {\n            x = containerRect.left + containerRect.width / 2;\n            y = containerRect.top + containerRect.height / 2;\n        }\n        const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n        const offsetX = x - containerRect.left;\n        const offsetY = y - containerRect.top;\n        const duration = animationConfig.enterDuration;\n        const ripple = document.createElement('div');\n        ripple.classList.add('mat-ripple-element');\n        ripple.style.left = `${offsetX - radius}px`;\n        ripple.style.top = `${offsetY - radius}px`;\n        ripple.style.height = `${radius * 2}px`;\n        ripple.style.width = `${radius * 2}px`;\n        // If a custom color has been specified, set it as inline style. If no color is\n        // set, the default color will be applied through the ripple theme styles.\n        if (config.color != null) {\n            ripple.style.backgroundColor = config.color;\n        }\n        ripple.style.transitionDuration = `${duration}ms`;\n        this._containerElement.appendChild(ripple);\n        // By default the browser does not recalculate the styles of dynamically created\n        // ripple elements. This is critical because then the `scale` would not animate properly.\n        enforceStyleRecalculation(ripple);\n        ripple.style.transform = 'scale(1)';\n        // Exposed reference to the ripple that will be returned.\n        const rippleRef = new RippleRef(this, ripple, config);\n        rippleRef.state = 0 /* FADING_IN */;\n        // Add the ripple reference to the list of all active ripples.\n        this._activeRipples.add(rippleRef);\n        if (!config.persistent) {\n            this._mostRecentTransientRipple = rippleRef;\n        }\n        // Wait for the ripple element to be completely faded in.\n        // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n        this._runTimeoutOutsideZone(() => {\n            const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n            rippleRef.state = 1 /* VISIBLE */;\n            // When the timer runs out while the user has kept their pointer down, we want to\n            // keep only the persistent ripples and the latest transient ripple. We do this,\n            // because we don't want stacked transient ripples to appear after their enter\n            // animation has finished.\n            if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n                rippleRef.fadeOut();\n            }\n        }, duration);\n        return rippleRef;\n    }\n    /** Fades out a ripple reference. */\n    fadeOutRipple(rippleRef) {\n        const wasActive = this._activeRipples.delete(rippleRef);\n        if (rippleRef === this._mostRecentTransientRipple) {\n            this._mostRecentTransientRipple = null;\n        }\n        // Clear out the cached bounding rect if we have no more ripples.\n        if (!this._activeRipples.size) {\n            this._containerRect = null;\n        }\n        // For ripples that are not active anymore, don't re-run the fade-out animation.\n        if (!wasActive) {\n            return;\n        }\n        const rippleEl = rippleRef.element;\n        const animationConfig = Object.assign(Object.assign({}, defaultRippleAnimationConfig), rippleRef.config.animation);\n        rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n        rippleEl.style.opacity = '0';\n        rippleRef.state = 2 /* FADING_OUT */;\n        // Once the ripple faded out, the ripple can be safely removed from the DOM.\n        this._runTimeoutOutsideZone(() => {\n            rippleRef.state = 3 /* HIDDEN */;\n            rippleEl.parentNode.removeChild(rippleEl);\n        }, animationConfig.exitDuration);\n    }\n    /** Fades out all currently active ripples. */\n    fadeOutAll() {\n        this._activeRipples.forEach(ripple => ripple.fadeOut());\n    }\n    /** Sets up the trigger event listeners */\n    setupTriggerEvents(elementOrElementRef) {\n        const element = coerceElement(elementOrElementRef);\n        if (!element || element === this._triggerElement) {\n            return;\n        }\n        // Remove all previously registered event listeners from the trigger element.\n        this._removeTriggerEvents();\n        this._triggerElement = element;\n        this._registerEvents(pointerDownEvents);\n    }\n    /**\n     * Handles all registered events.\n     * @docs-private\n     */\n    handleEvent(event) {\n        if (event.type === 'mousedown') {\n            this._onMousedown(event);\n        }\n        else if (event.type === 'touchstart') {\n            this._onTouchStart(event);\n        }\n        else {\n            this._onPointerUp();\n        }\n        // If pointer-up events haven't been registered yet, do so now.\n        // We do this on-demand in order to reduce the total number of event listeners\n        // registered by the ripples, which speeds up the rendering time for large UIs.\n        if (!this._pointerUpEventsRegistered) {\n            this._registerEvents(pointerUpEvents);\n            this._pointerUpEventsRegistered = true;\n        }\n    }\n    /** Function being called whenever the trigger is being pressed using mouse. */\n    _onMousedown(event) {\n        // Screen readers will fire fake mouse events for space/enter. Skip launching a\n        // ripple in this case for consistency with the non-screen-reader experience.\n        const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n        const isSyntheticEvent = this._lastTouchStartEvent &&\n            Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n        if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n            this._isPointerDown = true;\n            this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n        }\n    }\n    /** Function being called whenever the trigger is being pressed using touch. */\n    _onTouchStart(event) {\n        if (!this._target.rippleDisabled) {\n            // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n            // events will launch a second ripple if we don't ignore mouse events for a specific\n            // time after a touchstart event.\n            this._lastTouchStartEvent = Date.now();\n            this._isPointerDown = true;\n            // Use `changedTouches` so we skip any touches where the user put\n            // their finger down, but used another finger to tap the element again.\n            const touches = event.changedTouches;\n            for (let i = 0; i < touches.length; i++) {\n                this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n            }\n        }\n    }\n    /** Function being called whenever the trigger is being released. */\n    _onPointerUp() {\n        if (!this._isPointerDown) {\n            return;\n        }\n        this._isPointerDown = false;\n        // Fade-out all ripples that are visible and not persistent.\n        this._activeRipples.forEach(ripple => {\n            // By default, only ripples that are completely visible will fade out on pointer release.\n            // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n            const isVisible = ripple.state === 1 /* VISIBLE */ ||\n                ripple.config.terminateOnPointerUp && ripple.state === 0 /* FADING_IN */;\n            if (!ripple.config.persistent && isVisible) {\n                ripple.fadeOut();\n            }\n        });\n    }\n    /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n    _runTimeoutOutsideZone(fn, delay = 0) {\n        this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n    }\n    /** Registers event listeners for a given list of events. */\n    _registerEvents(eventTypes) {\n        this._ngZone.runOutsideAngular(() => {\n            eventTypes.forEach((type) => {\n                this._triggerElement.addEventListener(type, this, passiveEventOptions);\n            });\n        });\n    }\n    /** Removes previously registered event listeners from the trigger element. */\n    _removeTriggerEvents() {\n        if (this._triggerElement) {\n            pointerDownEvents.forEach((type) => {\n                this._triggerElement.removeEventListener(type, this, passiveEventOptions);\n            });\n            if (this._pointerUpEventsRegistered) {\n                pointerUpEvents.forEach((type) => {\n                    this._triggerElement.removeEventListener(type, this, passiveEventOptions);\n                });\n            }\n        }\n    }\n}\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element) {\n    // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n    // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n    // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x, y, rect) {\n    const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n    const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n    return Math.sqrt(distX * distX + distY * distY);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify the global ripple options. */\nconst MAT_RIPPLE_GLOBAL_OPTIONS = new InjectionToken('mat-ripple-global-options');\nclass MatRipple {\n    constructor(_elementRef, ngZone, platform, globalOptions, _animationMode) {\n        this._elementRef = _elementRef;\n        this._animationMode = _animationMode;\n        /**\n         * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n         * will be the distance from the center of the ripple to the furthest corner of the host element's\n         * bounding rectangle.\n         */\n        this.radius = 0;\n        this._disabled = false;\n        /** Whether ripple directive is initialized and the input bindings are set. */\n        this._isInitialized = false;\n        this._globalOptions = globalOptions || {};\n        this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n    }\n    /**\n     * Whether click events will not trigger the ripple. Ripples can be still launched manually\n     * by using the `launch()` method.\n     */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = value;\n        this._setupTriggerEventsIfEnabled();\n    }\n    /**\n     * The element that triggers the ripple when click events are received.\n     * Defaults to the directive's host element.\n     */\n    get trigger() { return this._trigger || this._elementRef.nativeElement; }\n    set trigger(trigger) {\n        this._trigger = trigger;\n        this._setupTriggerEventsIfEnabled();\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n        this._setupTriggerEventsIfEnabled();\n    }\n    ngOnDestroy() {\n        this._rippleRenderer._removeTriggerEvents();\n    }\n    /** Fades out all currently showing ripple elements. */\n    fadeOutAll() {\n        this._rippleRenderer.fadeOutAll();\n    }\n    /**\n     * Ripple configuration from the directive's input values.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    get rippleConfig() {\n        return {\n            centered: this.centered,\n            radius: this.radius,\n            color: this.color,\n            animation: Object.assign(Object.assign(Object.assign({}, this._globalOptions.animation), (this._animationMode === 'NoopAnimations' ? { enterDuration: 0, exitDuration: 0 } : {})), this.animation),\n            terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n        };\n    }\n    /**\n     * Whether ripples on pointer-down are disabled or not.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    get rippleDisabled() {\n        return this.disabled || !!this._globalOptions.disabled;\n    }\n    /** Sets up the trigger event listeners if ripples are enabled. */\n    _setupTriggerEventsIfEnabled() {\n        if (!this.disabled && this._isInitialized) {\n            this._rippleRenderer.setupTriggerEvents(this.trigger);\n        }\n    }\n    /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n    launch(configOrX, y = 0, config) {\n        if (typeof configOrX === 'number') {\n            return this._rippleRenderer.fadeInRipple(configOrX, y, Object.assign(Object.assign({}, this.rippleConfig), config));\n        }\n        else {\n            return this._rippleRenderer.fadeInRipple(0, 0, Object.assign(Object.assign({}, this.rippleConfig), configOrX));\n        }\n    }\n}\nMatRipple.ɵfac = function MatRipple_Factory(t) { return new (t || MatRipple)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatRipple.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatRipple, selectors: [[\"\", \"mat-ripple\", \"\"], [\"\", \"matRipple\", \"\"]], hostAttrs: [1, \"mat-ripple\"], hostVars: 2, hostBindings: function MatRipple_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-ripple-unbounded\", ctx.unbounded);\n    } }, inputs: { radius: [\"matRippleRadius\", \"radius\"], disabled: [\"matRippleDisabled\", \"disabled\"], trigger: [\"matRippleTrigger\", \"trigger\"], color: [\"matRippleColor\", \"color\"], unbounded: [\"matRippleUnbounded\", \"unbounded\"], centered: [\"matRippleCentered\", \"centered\"], animation: [\"matRippleAnimation\", \"animation\"] }, exportAs: [\"matRipple\"] });\nMatRipple.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatRipple.propDecorators = {\n    color: [{ type: Input, args: ['matRippleColor',] }],\n    unbounded: [{ type: Input, args: ['matRippleUnbounded',] }],\n    centered: [{ type: Input, args: ['matRippleCentered',] }],\n    radius: [{ type: Input, args: ['matRippleRadius',] }],\n    animation: [{ type: Input, args: ['matRippleAnimation',] }],\n    disabled: [{ type: Input, args: ['matRippleDisabled',] }],\n    trigger: [{ type: Input, args: ['matRippleTrigger',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRipple, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-ripple], [matRipple]',\n                exportAs: 'matRipple',\n                host: {\n                    'class': 'mat-ripple',\n                    '[class.mat-ripple-unbounded]': 'unbounded'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { radius: [{\n            type: Input,\n            args: ['matRippleRadius']\n        }], disabled: [{\n            type: Input,\n            args: ['matRippleDisabled']\n        }], trigger: [{\n            type: Input,\n            args: ['matRippleTrigger']\n        }], color: [{\n            type: Input,\n            args: ['matRippleColor']\n        }], unbounded: [{\n            type: Input,\n            args: ['matRippleUnbounded']\n        }], centered: [{\n            type: Input,\n            args: ['matRippleCentered']\n        }], animation: [{\n            type: Input,\n            args: ['matRippleAnimation']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatRippleModule {\n}\nMatRippleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatRippleModule });\nMatRippleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatRippleModule_Factory(t) { return new (t || MatRippleModule)(); }, imports: [[MatCommonModule, PlatformModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRippleModule, { declarations: function () { return [MatRipple]; }, imports: function () { return [MatCommonModule, PlatformModule]; }, exports: function () { return [MatRipple, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRippleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, PlatformModule],\n                exports: [MatRipple, MatCommonModule],\n                declarations: [MatRipple]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\nclass MatPseudoCheckbox {\n    constructor(_animationMode) {\n        this._animationMode = _animationMode;\n        /** Display state of the checkbox. */\n        this.state = 'unchecked';\n        /** Whether the checkbox is disabled. */\n        this.disabled = false;\n    }\n}\nMatPseudoCheckbox.ɵfac = function MatPseudoCheckbox_Factory(t) { return new (t || MatPseudoCheckbox)(ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatPseudoCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatPseudoCheckbox, selectors: [[\"mat-pseudo-checkbox\"]], hostAttrs: [1, \"mat-pseudo-checkbox\"], hostVars: 8, hostBindings: function MatPseudoCheckbox_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-pseudo-checkbox-indeterminate\", ctx.state === \"indeterminate\")(\"mat-pseudo-checkbox-checked\", ctx.state === \"checked\")(\"mat-pseudo-checkbox-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { state: \"state\", disabled: \"disabled\" }, decls: 0, vars: 0, template: function MatPseudoCheckbox_Template(rf, ctx) { }, styles: [\".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\\\"\\\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatPseudoCheckbox.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatPseudoCheckbox.propDecorators = {\n    state: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatPseudoCheckbox, [{\n        type: Component,\n        args: [{\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                selector: 'mat-pseudo-checkbox',\n                template: '',\n                host: {\n                    'class': 'mat-pseudo-checkbox',\n                    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n                    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n                    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                styles: [\".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\\\"\\\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}\\n\"]\n            }]\n    }], function () { return [{ type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { state: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatPseudoCheckboxModule {\n}\nMatPseudoCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatPseudoCheckboxModule });\nMatPseudoCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatPseudoCheckboxModule_Factory(t) { return new (t || MatPseudoCheckboxModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatPseudoCheckboxModule, { declarations: [MatPseudoCheckbox], exports: [MatPseudoCheckbox] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatPseudoCheckboxModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatPseudoCheckbox],\n                declarations: [MatPseudoCheckbox]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nclass MatOptgroupBase {\n}\nconst _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n// tslint:disable-next-line:class-name\nclass _MatOptgroupBase extends _MatOptgroupMixinBase {\n    constructor() {\n        super(...arguments);\n        /** Unique id for the underlying label. */\n        this._labelId = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n    }\n}\n_MatOptgroupBase.ɵfac = function _MatOptgroupBase_Factory(t) { return ɵ_MatOptgroupBase_BaseFactory(t || _MatOptgroupBase); };\n_MatOptgroupBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatOptgroupBase, inputs: { label: \"label\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatOptgroupBase.propDecorators = {\n    label: [{ type: Input }]\n};\nconst ɵ_MatOptgroupBase_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(_MatOptgroupBase);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatOptgroupBase, [{\n        type: Directive\n    }], null, { label: [{\n            type: Input\n        }] }); })();\n/**\n * Injection token that can be used to reference instances of `MatOptgroup`. It serves as\n * alternative token to the actual `MatOptgroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_OPTGROUP = new InjectionToken('MatOptgroup');\n/**\n * Component that is used to group instances of `mat-option`.\n */\nclass MatOptgroup extends _MatOptgroupBase {\n}\nMatOptgroup.ɵfac = function MatOptgroup_Factory(t) { return ɵMatOptgroup_BaseFactory(t || MatOptgroup); };\nMatOptgroup.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatOptgroup, selectors: [[\"mat-optgroup\"]], hostAttrs: [\"role\", \"group\", 1, \"mat-optgroup\"], hostVars: 4, hostBindings: function MatOptgroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled.toString())(\"aria-labelledby\", ctx._labelId);\n        ɵngcc0.ɵɵclassProp(\"mat-optgroup-disabled\", ctx.disabled);\n    } }, inputs: { disabled: \"disabled\" }, exportAs: [\"matOptgroup\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_OPTGROUP, useExisting: MatOptgroup }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 4, vars: 2, consts: [[1, \"mat-optgroup-label\", 3, \"id\"]], template: function MatOptgroup_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0);\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"id\", ctx._labelId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\"\", ctx.label, \" \");\n    } }, styles: [\".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}\\n\"], encapsulation: 2, changeDetection: 0 });\nconst ɵMatOptgroup_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatOptgroup);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatOptgroup, [{\n        type: Component,\n        args: [{\n                selector: 'mat-optgroup',\n                exportAs: 'matOptgroup',\n                template: \"<label class=\\\"mat-optgroup-label\\\" [id]=\\\"_labelId\\\">{{ label }} <ng-content></ng-content></label>\\n<ng-content select=\\\"mat-option, ng-container\\\"></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled'],\n                host: {\n                    'class': 'mat-optgroup',\n                    'role': 'group',\n                    '[class.mat-optgroup-disabled]': 'disabled',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-labelledby]': '_labelId'\n                },\n                providers: [{ provide: MAT_OPTGROUP, useExisting: MatOptgroup }],\n                styles: [\".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}\\n\"]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/** Event object emitted by MatOption when selected or deselected. */\nclass MatOptionSelectionChange {\n    constructor(\n    /** Reference to the option that emitted the event. */\n    source, \n    /** Whether the change in the option's value was a result of a user action. */\n    isUserInput = false) {\n        this.source = source;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Injection token used to provide the parent component to options.\n */\nconst MAT_OPTION_PARENT_COMPONENT = new InjectionToken('MAT_OPTION_PARENT_COMPONENT');\n// tslint:disable-next-line:class-name\nclass _MatOptionBase {\n    constructor(_element, _changeDetectorRef, _parent, group) {\n        this._element = _element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._parent = _parent;\n        this.group = group;\n        this._selected = false;\n        this._active = false;\n        this._disabled = false;\n        this._mostRecentViewValue = '';\n        /** The unique ID of the option. */\n        this.id = `mat-option-${_uniqueIdCounter++}`;\n        /** Event emitted when the option is selected or deselected. */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onSelectionChange = new EventEmitter();\n        /** Emits when the state of the option changes and any parents have to be notified. */\n        this._stateChanges = new Subject();\n    }\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() { return this._parent && this._parent.multiple; }\n    /** Whether or not the option is currently selected. */\n    get selected() { return this._selected; }\n    /** Whether the option is disabled. */\n    get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /** Whether ripples for the option are disabled. */\n    get disableRipple() { return this._parent && this._parent.disableRipple; }\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active() {\n        return this._active;\n    }\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue() {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this._getHostElement().textContent || '').trim();\n    }\n    /** Selects the option. */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n    /** Deselects the option. */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n    /** Sets focus onto this option. */\n    focus(_origin, options) {\n        // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n        // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n        const element = this._getHostElement();\n        if (typeof element.focus === 'function') {\n            element.focus(options);\n        }\n    }\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles() {\n        if (!this._active) {\n            this._active = true;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles() {\n        if (this._active) {\n            this._active = false;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        return this.viewValue;\n    }\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event) {\n        if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n            this._selectViaInteraction();\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction() {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent(true);\n        }\n    }\n    /**\n     * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n     * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n     * attributes adds a significant amount of noise to screen-reader users without providing useful\n     * information.\n     */\n    _getAriaSelected() {\n        return this.selected || (this.multiple ? false : null);\n    }\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Gets the host DOM element. */\n    _getHostElement() {\n        return this._element.nativeElement;\n    }\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n            if (viewValue !== this._mostRecentViewValue) {\n                this._mostRecentViewValue = viewValue;\n                this._stateChanges.next();\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    /** Emits the selection change event. */\n    _emitSelectionChangeEvent(isUserInput = false) {\n        this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n    }\n}\n_MatOptionBase.ɵfac = function _MatOptionBase_Factory(t) { return new (t || _MatOptionBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(_MatOptgroupBase)); };\n_MatOptionBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatOptionBase, inputs: { id: \"id\", disabled: \"disabled\", value: \"value\" }, outputs: { onSelectionChange: \"onSelectionChange\" } });\n_MatOptionBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: undefined },\n    { type: _MatOptgroupBase }\n];\n_MatOptionBase.propDecorators = {\n    value: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }],\n    onSelectionChange: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatOptionBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined }, { type: _MatOptgroupBase }]; }, { id: [{\n            type: Input\n        }], onSelectionChange: [{\n            type: Output\n        }], disabled: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }] }); })();\n/**\n * Single option inside of a `<mat-select>` element.\n */\nclass MatOption extends _MatOptionBase {\n    constructor(element, changeDetectorRef, parent, group) {\n        super(element, changeDetectorRef, parent, group);\n    }\n}\nMatOption.ɵfac = function MatOption_Factory(t) { return new (t || MatOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_OPTION_PARENT_COMPONENT, 8), ɵngcc0.ɵɵdirectiveInject(MAT_OPTGROUP, 8)); };\nMatOption.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatOption, selectors: [[\"mat-option\"]], hostAttrs: [\"role\", \"option\", 1, \"mat-option\", \"mat-focus-indicator\"], hostVars: 12, hostBindings: function MatOption_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatOption_click_HostBindingHandler() { return ctx._selectViaInteraction(); })(\"keydown\", function MatOption_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx._getTabIndex())(\"aria-selected\", ctx._getAriaSelected())(\"aria-disabled\", ctx.disabled.toString());\n        ɵngcc0.ɵɵclassProp(\"mat-selected\", ctx.selected)(\"mat-option-multiple\", ctx.multiple)(\"mat-active\", ctx.active)(\"mat-option-disabled\", ctx.disabled);\n    } }, exportAs: [\"matOption\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 4, vars: 3, consts: [[\"class\", \"mat-option-pseudo-checkbox\", 3, \"state\", \"disabled\", 4, \"ngIf\"], [1, \"mat-option-text\"], [\"mat-ripple\", \"\", 1, \"mat-option-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"], [1, \"mat-option-pseudo-checkbox\", 3, \"state\", \"disabled\"]], template: function MatOption_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatOption_mat_pseudo_checkbox_0_Template, 1, 2, \"mat-pseudo-checkbox\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"span\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.multiple);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", ctx._getHostElement())(\"matRippleDisabled\", ctx.disabled || ctx.disableRipple);\n    } }, directives: [ɵngcc3.NgIf, MatRipple, MatPseudoCheckbox], styles: [\".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:none;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}.cdk-high-contrast-active .mat-option{margin:0 1px}.cdk-high-contrast-active .mat-option.mat-active{border:solid 1px currentColor;margin:0}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.cdk-high-contrast-active .mat-option .mat-option-ripple{opacity:.5}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatOption.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_OPTION_PARENT_COMPONENT,] }] },\n    { type: MatOptgroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_OPTGROUP,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatOption, [{\n        type: Component,\n        args: [{\n                selector: 'mat-option',\n                exportAs: 'matOption',\n                host: {\n                    'role': 'option',\n                    '[attr.tabindex]': '_getTabIndex()',\n                    '[class.mat-selected]': 'selected',\n                    '[class.mat-option-multiple]': 'multiple',\n                    '[class.mat-active]': 'active',\n                    '[id]': 'id',\n                    '[attr.aria-selected]': '_getAriaSelected()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[class.mat-option-disabled]': 'disabled',\n                    '(click)': '_selectViaInteraction()',\n                    '(keydown)': '_handleKeydown($event)',\n                    'class': 'mat-option mat-focus-indicator'\n                },\n                template: \"<mat-pseudo-checkbox *ngIf=\\\"multiple\\\" class=\\\"mat-option-pseudo-checkbox\\\"\\n    [state]=\\\"selected ? 'checked' : 'unchecked'\\\" [disabled]=\\\"disabled\\\"></mat-pseudo-checkbox>\\n\\n<span class=\\\"mat-option-text\\\"><ng-content></ng-content></span>\\n\\n<div class=\\\"mat-option-ripple\\\" mat-ripple\\n     [matRippleTrigger]=\\\"_getHostElement()\\\"\\n     [matRippleDisabled]=\\\"disabled || disableRipple\\\">\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:none;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}.cdk-high-contrast-active .mat-option{margin:0 1px}.cdk-high-contrast-active .mat-option.mat-active{border:solid 1px currentColor;margin:0}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.cdk-high-contrast-active .mat-option .mat-option-ripple{opacity:.5}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_OPTION_PARENT_COMPONENT]\n            }] }, { type: MatOptgroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_OPTGROUP]\n            }] }]; }, null); })();\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nfunction _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {\n    if (optionGroups.length) {\n        let optionsArray = options.toArray();\n        let groups = optionGroups.toArray();\n        let groupCounter = 0;\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n        return groupCounter;\n    }\n    return 0;\n}\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nfunction _getOptionScrollPosition(optionIndex, optionHeight, currentScrollPosition, panelHeight) {\n    const optionOffset = optionIndex * optionHeight;\n    if (optionOffset < currentScrollPosition) {\n        return optionOffset;\n    }\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n    return currentScrollPosition;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatOptionModule {\n}\nMatOptionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatOptionModule });\nMatOptionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatOptionModule_Factory(t) { return new (t || MatOptionModule)(); }, imports: [[MatRippleModule, CommonModule, MatPseudoCheckboxModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatOptionModule, { declarations: function () { return [MatOption, MatOptgroup]; }, imports: function () { return [MatRippleModule, CommonModule, MatPseudoCheckboxModule]; }, exports: function () { return [MatOption, MatOptgroup]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatOptionModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n                exports: [MatOption, MatOptgroup],\n                declarations: [MatOption, MatOptgroup]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * InjectionToken that can be used to specify the global label options.\n * @deprecated Use `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token from\n *     `@angular/material/form-field` instead.\n * @breaking-change 11.0.0\n */\nconst MAT_LABEL_GLOBAL_OPTIONS = new InjectionToken('mat-label-global-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nconst JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8, OCT = 9, NOV = 10, DEC = 11;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { APR, AUG, AnimationCurves, AnimationDurations, DEC, DateAdapter, ErrorStateMatcher, FEB, JAN, JUL, JUN, MAR, MATERIAL_SANITY_CHECKS, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MAT_DATE_LOCALE_FACTORY, MAT_DATE_LOCALE_PROVIDER, MAT_LABEL_GLOBAL_OPTIONS, MAT_NATIVE_DATE_FORMATS, MAT_OPTGROUP, MAT_OPTION_PARENT_COMPONENT, MAT_RIPPLE_GLOBAL_OPTIONS, MAY, MatCommonModule, MatLine, MatLineModule, MatLineSetter, MatNativeDateModule, MatOptgroup, MatOption, MatOptionModule, MatOptionSelectionChange, MatPseudoCheckbox, MatPseudoCheckboxModule, MatRipple, MatRippleModule, NOV, NativeDateAdapter, NativeDateModule, OCT, RippleRef, RippleRenderer, SEP, ShowOnDirtyErrorStateMatcher, VERSION, _MatOptgroupBase, _MatOptionBase, _countGroupLabelsBeforeOption, _getOptionScrollPosition, defaultRippleAnimationConfig, mixinColor, mixinDisableRipple, mixinDisabled, mixinErrorState, mixinInitialized, mixinTabIndex, setLines, ɵ0$1 as ɵ0, MATERIAL_SANITY_CHECKS_FACTORY as ɵangular_material_src_material_core_core_a };\n\n//# sourceMappingURL=core.js.map","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MaterialModule } from '../material/material.module';\nimport { DaysPickerComponent } from './components/days-picker/days-picker.component';\nimport { CalendarComponent } from './components/calendar/calendar.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nconst components = [\n  DaysPickerComponent,\n  CalendarComponent,\n];\n\n@NgModule({\n  declarations: components,\n  imports: [CommonModule, MaterialModule],\n  exports: [...components, CommonModule, ReactiveFormsModule],\n})\nexport class SharedModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAC_ENTER = 3;\nconst BACKSPACE = 8;\nconst TAB = 9;\nconst NUM_CENTER = 12;\nconst ENTER = 13;\nconst SHIFT = 16;\nconst CONTROL = 17;\nconst ALT = 18;\nconst PAUSE = 19;\nconst CAPS_LOCK = 20;\nconst ESCAPE = 27;\nconst SPACE = 32;\nconst PAGE_UP = 33;\nconst PAGE_DOWN = 34;\nconst END = 35;\nconst HOME = 36;\nconst LEFT_ARROW = 37;\nconst UP_ARROW = 38;\nconst RIGHT_ARROW = 39;\nconst DOWN_ARROW = 40;\nconst PLUS_SIGN = 43;\nconst PRINT_SCREEN = 44;\nconst INSERT = 45;\nconst DELETE = 46;\nconst ZERO = 48;\nconst ONE = 49;\nconst TWO = 50;\nconst THREE = 51;\nconst FOUR = 52;\nconst FIVE = 53;\nconst SIX = 54;\nconst SEVEN = 55;\nconst EIGHT = 56;\nconst NINE = 57;\nconst FF_SEMICOLON = 59; // Firefox (Gecko) fires this for semicolon instead of 186\nconst FF_EQUALS = 61; // Firefox (Gecko) fires this for equals instead of 187\nconst QUESTION_MARK = 63;\nconst AT_SIGN = 64;\nconst A = 65;\nconst B = 66;\nconst C = 67;\nconst D = 68;\nconst E = 69;\nconst F = 70;\nconst G = 71;\nconst H = 72;\nconst I = 73;\nconst J = 74;\nconst K = 75;\nconst L = 76;\nconst M = 77;\nconst N = 78;\nconst O = 79;\nconst P = 80;\nconst Q = 81;\nconst R = 82;\nconst S = 83;\nconst T = 84;\nconst U = 85;\nconst V = 86;\nconst W = 87;\nconst X = 88;\nconst Y = 89;\nconst Z = 90;\nconst META = 91; // WIN_KEY_LEFT\nconst MAC_WK_CMD_LEFT = 91;\nconst MAC_WK_CMD_RIGHT = 93;\nconst CONTEXT_MENU = 93;\nconst NUMPAD_ZERO = 96;\nconst NUMPAD_ONE = 97;\nconst NUMPAD_TWO = 98;\nconst NUMPAD_THREE = 99;\nconst NUMPAD_FOUR = 100;\nconst NUMPAD_FIVE = 101;\nconst NUMPAD_SIX = 102;\nconst NUMPAD_SEVEN = 103;\nconst NUMPAD_EIGHT = 104;\nconst NUMPAD_NINE = 105;\nconst NUMPAD_MULTIPLY = 106;\nconst NUMPAD_PLUS = 107;\nconst NUMPAD_MINUS = 109;\nconst NUMPAD_PERIOD = 110;\nconst NUMPAD_DIVIDE = 111;\nconst F1 = 112;\nconst F2 = 113;\nconst F3 = 114;\nconst F4 = 115;\nconst F5 = 116;\nconst F6 = 117;\nconst F7 = 118;\nconst F8 = 119;\nconst F9 = 120;\nconst F10 = 121;\nconst F11 = 122;\nconst F12 = 123;\nconst NUM_LOCK = 144;\nconst SCROLL_LOCK = 145;\nconst FIRST_MEDIA = 166;\nconst FF_MINUS = 173;\nconst MUTE = 173; // Firefox (Gecko) fires 181 for MUTE\nconst VOLUME_DOWN = 174; // Firefox (Gecko) fires 182 for VOLUME_DOWN\nconst VOLUME_UP = 175; // Firefox (Gecko) fires 183 for VOLUME_UP\nconst FF_MUTE = 181;\nconst FF_VOLUME_DOWN = 182;\nconst LAST_MEDIA = 183;\nconst FF_VOLUME_UP = 183;\nconst SEMICOLON = 186; // Firefox (Gecko) fires 59 for SEMICOLON\nconst EQUALS = 187; // Firefox (Gecko) fires 61 for EQUALS\nconst COMMA = 188;\nconst DASH = 189; // Firefox (Gecko) fires 173 for DASH/MINUS\nconst SLASH = 191;\nconst APOSTROPHE = 192;\nconst TILDE = 192;\nconst OPEN_SQUARE_BRACKET = 219;\nconst BACKSLASH = 220;\nconst CLOSE_SQUARE_BRACKET = 221;\nconst SINGLE_QUOTE = 222;\nconst MAC_META = 224;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Checks whether a modifier key is pressed.\n * @param event Event to be checked.\n */\nfunction hasModifierKey(event, ...modifiers) {\n    if (modifiers.length) {\n        return modifiers.some(modifier => event[modifier]);\n    }\n    return event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { A, ALT, APOSTROPHE, AT_SIGN, B, BACKSLASH, BACKSPACE, C, CAPS_LOCK, CLOSE_SQUARE_BRACKET, COMMA, CONTEXT_MENU, CONTROL, D, DASH, DELETE, DOWN_ARROW, E, EIGHT, END, ENTER, EQUALS, ESCAPE, F, F1, F10, F11, F12, F2, F3, F4, F5, F6, F7, F8, F9, FF_EQUALS, FF_MINUS, FF_MUTE, FF_SEMICOLON, FF_VOLUME_DOWN, FF_VOLUME_UP, FIRST_MEDIA, FIVE, FOUR, G, H, HOME, I, INSERT, J, K, L, LAST_MEDIA, LEFT_ARROW, M, MAC_ENTER, MAC_META, MAC_WK_CMD_LEFT, MAC_WK_CMD_RIGHT, META, MUTE, N, NINE, NUMPAD_DIVIDE, NUMPAD_EIGHT, NUMPAD_FIVE, NUMPAD_FOUR, NUMPAD_MINUS, NUMPAD_MULTIPLY, NUMPAD_NINE, NUMPAD_ONE, NUMPAD_PERIOD, NUMPAD_PLUS, NUMPAD_SEVEN, NUMPAD_SIX, NUMPAD_THREE, NUMPAD_TWO, NUMPAD_ZERO, NUM_CENTER, NUM_LOCK, O, ONE, OPEN_SQUARE_BRACKET, P, PAGE_DOWN, PAGE_UP, PAUSE, PLUS_SIGN, PRINT_SCREEN, Q, QUESTION_MARK, R, RIGHT_ARROW, S, SCROLL_LOCK, SEMICOLON, SEVEN, SHIFT, SINGLE_QUOTE, SIX, SLASH, SPACE, T, TAB, THREE, TILDE, TWO, U, UP_ARROW, V, VOLUME_DOWN, VOLUME_UP, W, X, Y, Z, ZERO, hasModifierKey };\n\n//# sourceMappingURL=keycodes.js.map","import { coerceElement, coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ɵɵdefineInjectable, Injectable, ɵɵinject, EventEmitter, Directive, ElementRef, NgZone, Output, Input, NgModule } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nclass MutationObserverFactory {\n    create(callback) {\n        return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n    }\n}\nMutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) { return new (t || MutationObserverFactory)(); };\nMutationObserverFactory.ɵprov = ɵɵdefineInjectable({ factory: function MutationObserverFactory_Factory() { return new MutationObserverFactory(); }, token: MutationObserverFactory, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MutationObserverFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], null, null); })();\n/** An injectable service that allows watching elements for changes to their content. */\nclass ContentObserver {\n    constructor(_mutationObserverFactory) {\n        this._mutationObserverFactory = _mutationObserverFactory;\n        /** Keeps track of the existing MutationObservers so they can be reused. */\n        this._observedElements = new Map();\n    }\n    ngOnDestroy() {\n        this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n    }\n    observe(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        return new Observable((observer) => {\n            const stream = this._observeElement(element);\n            const subscription = stream.subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n                this._unobserveElement(element);\n            };\n        });\n    }\n    /**\n     * Observes the given element by using the existing MutationObserver if available, or creating a\n     * new one if not.\n     */\n    _observeElement(element) {\n        if (!this._observedElements.has(element)) {\n            const stream = new Subject();\n            const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n            if (observer) {\n                observer.observe(element, {\n                    characterData: true,\n                    childList: true,\n                    subtree: true\n                });\n            }\n            this._observedElements.set(element, { observer, stream, count: 1 });\n        }\n        else {\n            this._observedElements.get(element).count++;\n        }\n        return this._observedElements.get(element).stream;\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n     * observing this element.\n     */\n    _unobserveElement(element) {\n        if (this._observedElements.has(element)) {\n            this._observedElements.get(element).count--;\n            if (!this._observedElements.get(element).count) {\n                this._cleanupObserver(element);\n            }\n        }\n    }\n    /** Clean up the underlying MutationObserver for the specified element. */\n    _cleanupObserver(element) {\n        if (this._observedElements.has(element)) {\n            const { observer, stream } = this._observedElements.get(element);\n            if (observer) {\n                observer.disconnect();\n            }\n            stream.complete();\n            this._observedElements.delete(element);\n        }\n    }\n}\nContentObserver.ɵfac = function ContentObserver_Factory(t) { return new (t || ContentObserver)(ɵngcc0.ɵɵinject(MutationObserverFactory)); };\nContentObserver.ɵprov = ɵɵdefineInjectable({ factory: function ContentObserver_Factory() { return new ContentObserver(ɵɵinject(MutationObserverFactory)); }, token: ContentObserver, providedIn: \"root\" });\nContentObserver.ctorParameters = () => [\n    { type: MutationObserverFactory }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MutationObserverFactory }]; }, null); })();\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nclass CdkObserveContent {\n    constructor(_contentObserver, _elementRef, _ngZone) {\n        this._contentObserver = _contentObserver;\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        /** Event emitted for each change in the element's content. */\n        this.event = new EventEmitter();\n        this._disabled = false;\n        this._currentSubscription = null;\n    }\n    /**\n     * Whether observing content is disabled. This option can be used\n     * to disconnect the underlying MutationObserver until it is needed.\n     */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._disabled ? this._unsubscribe() : this._subscribe();\n    }\n    /** Debounce interval for emitting the changes. */\n    get debounce() { return this._debounce; }\n    set debounce(value) {\n        this._debounce = coerceNumberProperty(value);\n        this._subscribe();\n    }\n    ngAfterContentInit() {\n        if (!this._currentSubscription && !this.disabled) {\n            this._subscribe();\n        }\n    }\n    ngOnDestroy() {\n        this._unsubscribe();\n    }\n    _subscribe() {\n        this._unsubscribe();\n        const stream = this._contentObserver.observe(this._elementRef);\n        // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n        // Consider brining it back inside the zone next time we're making breaking changes.\n        // Bringing it back inside can cause things like infinite change detection loops and changed\n        // after checked errors if people's code isn't handling it properly.\n        this._ngZone.runOutsideAngular(() => {\n            this._currentSubscription =\n                (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n        });\n    }\n    _unsubscribe() {\n        if (this._currentSubscription) {\n            this._currentSubscription.unsubscribe();\n        }\n    }\n}\nCdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) { return new (t || CdkObserveContent)(ɵngcc0.ɵɵdirectiveInject(ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkObserveContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkObserveContent, selectors: [[\"\", \"cdkObserveContent\", \"\"]], inputs: { disabled: [\"cdkObserveContentDisabled\", \"disabled\"], debounce: \"debounce\" }, outputs: { event: \"cdkObserveContent\" }, exportAs: [\"cdkObserveContent\"] });\nCdkObserveContent.ctorParameters = () => [\n    { type: ContentObserver },\n    { type: ElementRef },\n    { type: NgZone }\n];\nCdkObserveContent.propDecorators = {\n    event: [{ type: Output, args: ['cdkObserveContent',] }],\n    disabled: [{ type: Input, args: ['cdkObserveContentDisabled',] }],\n    debounce: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkObserveContent, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkObserveContent]',\n                exportAs: 'cdkObserveContent'\n            }]\n    }], function () { return [{ type: ContentObserver }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { event: [{\n            type: Output,\n            args: ['cdkObserveContent']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkObserveContentDisabled']\n        }], debounce: [{\n            type: Input\n        }] }); })();\nclass ObserversModule {\n}\nObserversModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ObserversModule });\nObserversModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ObserversModule_Factory(t) { return new (t || ObserversModule)(); }, providers: [MutationObserverFactory] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ObserversModule, { declarations: [CdkObserveContent], exports: [CdkObserveContent] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ObserversModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkObserveContent],\n                declarations: [CdkObserveContent],\n                providers: [MutationObserverFactory]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule };\n\n//# sourceMappingURL=observers.js.map","import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nexport function debounceTime(dueTime, scheduler = async) {\n    return (source) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\nclass DebounceTimeOperator {\n    constructor(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    }\n}\nclass DebounceTimeSubscriber extends Subscriber {\n    constructor(destination, dueTime, scheduler) {\n        super(destination);\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n        this.debouncedSubscription = null;\n        this.lastValue = null;\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    }\n    _complete() {\n        this.debouncedNext();\n        this.destination.complete();\n    }\n    debouncedNext() {\n        this.clearDebounce();\n        if (this.hasValue) {\n            const { lastValue } = this;\n            this.lastValue = null;\n            this.hasValue = false;\n            this.destination.next(lastValue);\n        }\n    }\n    clearDebounce() {\n        const debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    }\n}\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n//# sourceMappingURL=debounceTime.js.map","/**\n * @license Angular v10.0.7\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nimport * as ɵngcc0 from '@angular/core';\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach(name => {\n                    let values = headers[name];\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or overide for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        const params = rawParams.split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                this.map.set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(update.value);\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(update.value);\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.ɵfac = function HttpClient_Factory(t) { return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler)); };\nHttpClient.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpClient, factory: HttpClient.ɵfac });\nHttpClient.ctorParameters = () => [\n    { type: HttpHandler }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClient, [{\n        type: Injectable\n    }], function () { return [{ type: HttpHandler }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) { return new (t || NoopInterceptor)(); };\nNoopInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NoopInterceptor, factory: NoopInterceptor.ɵfac });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NoopInterceptor, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body,\n                    status: 200,\n                    statusText: 'OK',\n                    url,\n                }));\n                // Complete the stream, the response is over.\n                observer.complete();\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n}\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) { return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT)); };\nJsonpClientBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JsonpClientBackend, factory: JsonpClientBackend.ɵfac });\nJsonpClientBackend.ctorParameters = () => [\n    { type: JsonpCallbackContext },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JsonpClientBackend, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param req The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(req);\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) { return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend)); };\nJsonpInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JsonpInterceptor, factory: JsonpInterceptor.ɵfac });\nJsonpInterceptor.ctorParameters = () => [\n    { type: JsonpClientBackend }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JsonpInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpClientBackend }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n */\nclass XhrFactory {\n}\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\nclass BrowserXhr {\n    constructor() { }\n    build() {\n        return (new XMLHttpRequest());\n    }\n}\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) { return new (t || BrowserXhr)(); };\nBrowserXhr.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BrowserXhr, factory: BrowserXhr.ɵfac });\nBrowserXhr.ctorParameters = () => [];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BrowserXhr, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                const status = xhr.status === 1223 ? 204 : xhr.status;\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                let body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error) => {\n                const { url } = partialFromXhr();\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                if (xhr.readyState !== xhr.DONE) {\n                    xhr.abort();\n                }\n            };\n        });\n    }\n}\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) { return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(XhrFactory)); };\nHttpXhrBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXhrBackend, factory: HttpXhrBackend.ɵfac });\nHttpXhrBackend.ctorParameters = () => [\n    { type: XhrFactory }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpXhrBackend, [{\n        type: Injectable\n    }], function () { return [{ type: XhrFactory }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) { return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME)); };\nHttpXsrfCookieExtractor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfCookieExtractor, factory: HttpXsrfCookieExtractor.ɵfac });\nHttpXsrfCookieExtractor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_COOKIE_NAME]\n            }] }]; }, null); })();\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    intercept(req, next) {\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) { return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME)); };\nHttpXsrfInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfInterceptor, factory: HttpXsrfInterceptor.ɵfac });\nHttpXsrfInterceptor.ctorParameters = () => [\n    { type: HttpXsrfTokenExtractor },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: HttpXsrfTokenExtractor }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_HEADER_NAME]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    handle(req) {\n        if (this.chain === null) {\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) { return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };\nHttpInterceptingHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpInterceptingHandler, factory: HttpInterceptingHandler.ɵfac });\nHttpInterceptingHandler.ctorParameters = () => [\n    { type: HttpBackend },\n    { type: Injector }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpInterceptingHandler, [{\n        type: Injectable\n    }], function () { return [{ type: HttpBackend }, { type: ɵngcc0.Injector }]; }, null); })();\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientXsrfModule });\nHttpClientXsrfModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientXsrfModule_Factory(t) { return new (t || HttpClientXsrfModule)(); }, providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n    ] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClientXsrfModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientModule });\nHttpClientModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientModule_Factory(t) { return new (t || HttpClientModule)(); }, providers: [\n        HttpClient,\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n        HttpXhrBackend,\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n        BrowserXhr,\n        { provide: XhrFactory, useExisting: BrowserXhr },\n    ], imports: [[\n            HttpClientXsrfModule.withOptions({\n                cookieName: 'XSRF-TOKEN',\n                headerName: 'X-XSRF-TOKEN'\n            }),\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, { imports: [HttpClientXsrfModule] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClientModule, [{\n        type: NgModule,\n        args: [{\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN'\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    BrowserXhr,\n                    { provide: XhrFactory, useExisting: BrowserXhr },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientJsonpModule });\nHttpClientJsonpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientJsonpModule_Factory(t) { return new (t || HttpClientJsonpModule)(); }, providers: [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n    ] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClientJsonpModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler, NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, BrowserXhr as ɵangular_packages_common_http_http_d, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h };\n\n//# sourceMappingURL=http.js.map","import { SecurityContext, ɵɵdefineInjectable, ɵɵinject, ErrorHandler, Injectable, Optional, Inject, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nconst _c0 = [\"*\"];\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(data, options) {\n        this.options = options;\n        // Note that we can't use `instanceof SVGElement` here,\n        // because it'll break during server-side rendering.\n        if (!!data.nodeName) {\n            this.svgElement = data;\n        }\n        else {\n            this.url = data;\n        }\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral, options);\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        const svgElement = this._svgElementFromString(sanitizedLiteral);\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, className = alias) {\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param className\n     */\n    setDefaultFontSetClass(className) {\n        this._defaultFontSetClass = className;\n        return this;\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        // Return (copy of) cached icon if possible.\n        const key = iconKey(namespace, name);\n        const config = this._svgIconConfigs.get(key);\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgElement) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(config.svgElement));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(tap(svg => config.svgElement = svg), map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgElement)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            if (config.svgElement) {\n                const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config)\n            .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText, config.options)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        // If the SVG for this icon set has already been parsed, do nothing.\n        if (config.svgElement) {\n            return of(config.svgElement);\n        }\n        return this._fetchIcon(config).pipe(map(svgText => {\n            // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n            // only needs to occur if the cache is yet unset.\n            if (!config.svgElement) {\n                config.svgElement = this._svgElementFromString(svgText);\n            }\n            return config.svgElement;\n        }));\n    }\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     */\n    _createSvgElementForSingleIcon(responseText, options) {\n        const svg = this._svgElementFromString(responseText);\n        this._setSvgAttributes(svg, options);\n        return svg;\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString('<svg></svg>');\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        var _a;\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n        // Observable. Figure out why and fix it.\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n}\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) { return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler)); };\nMatIconRegistry.ɵprov = ɵɵdefineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(ɵɵinject(HttpClient, 8), ɵɵinject(DomSanitizer), ɵɵinject(DOCUMENT, 8), ɵɵinject(ErrorHandler)); }, token: MatIconRegistry, providedIn: \"root\" });\nMatIconRegistry.ctorParameters = () => [\n    { type: HttpClient, decorators: [{ type: Optional }] },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ErrorHandler }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.HttpClient, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.DomSanitizer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, null); })();\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => _location ? (_location.pathname + _location.search) : ''\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = attr => `[${attr}]`;\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconMixinBase {\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() { return this._fontSet; }\n    set fontSet(value) {\n        this._fontSet = this._cleanupFontValue(value);\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() { return this._fontIcon; }\n    set fontIcon(value) {\n        this._fontIcon = this._cleanupFontValue(value);\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return parts;\n            default: throw Error(`Invalid icon name: \"${iconName}\"`);\n        }\n    }\n    ngOnChanges(changes) {\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        const svgIconChanges = changes['svgIcon'];\n        if (svgIconChanges) {\n            this._currentIconFetch.unsubscribe();\n            if (this.svgIcon) {\n                const [namespace, iconName] = this._splitIconName(this.svgIcon);\n                this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n                    .pipe(take(1))\n                    .subscribe(svg => this._setSvgElement(svg), (err) => {\n                    const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                    this._errorHandler.handleError(new Error(errorMessage));\n                });\n            }\n            else if (svgIconChanges.previousValue) {\n                this._clearSvgElement();\n            }\n        }\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        const styleTags = svg.querySelectorAll('style');\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n}\nMatIcon.ɵfac = function MatIcon_Factory(t) { return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler)); };\nMatIcon.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatIcon, selectors: [[\"mat-icon\"]], hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"], hostVars: 4, hostBindings: function MatIcon_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n    } }, inputs: { color: \"color\", inline: \"inline\", fontSet: \"fontSet\", fontIcon: \"fontIcon\", svgIcon: \"svgIcon\" }, exportAs: [\"matIcon\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatIcon_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatIcon.ctorParameters = () => [\n    { type: ElementRef },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_ICON_LOCATION,] }] },\n    { type: ErrorHandler }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: Input }],\n    svgIcon: [{ type: Input }],\n    fontSet: [{ type: Input }],\n    fontIcon: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n        type: Component,\n        args: [{\n                template: '<ng-content></ng-content>',\n                selector: 'mat-icon',\n                exportAs: 'matIcon',\n                inputs: ['color'],\n                host: {\n                    'role': 'img',\n                    'class': 'mat-icon notranslate',\n                    '[class.mat-icon-inline]': 'inline',\n                    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MatIconRegistry }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['aria-hidden']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_ICON_LOCATION]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, { inline: [{\n            type: Input\n        }], fontSet: [{\n            type: Input\n        }], fontIcon: [{\n            type: Input\n        }], svgIcon: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatIconModule {\n}\nMatIconModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatIconModule });\nMatIconModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatIconModule_Factory(t) { return new (t || MatIconModule)(); }, imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, { declarations: function () { return [MatIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatIcon, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, ɵ0 };\n\n//# sourceMappingURL=icon.js.map","import { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let config;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        config = configOrBufferSize;\n    }\n    else {\n        config = {\n            bufferSize: configOrBufferSize,\n            windowTime,\n            refCount: false,\n            scheduler\n        };\n    }\n    return (source) => source.lift(shareReplayOperator(config));\n}\nfunction shareReplayOperator({ bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY, refCount: useRefCount, scheduler }) {\n    let subject;\n    let refCount = 0;\n    let subscription;\n    let hasError = false;\n    let isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n            subscription = source.subscribe({\n                next(value) { subject.next(value); },\n                error(err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete() {\n                    isComplete = true;\n                    subscription = undefined;\n                    subject.complete();\n                },\n            });\n        }\n        const innerSub = subject.subscribe(this);\n        this.add(() => {\n            refCount--;\n            innerSub.unsubscribe();\n            if (subscription && !isComplete && useRefCount && refCount === 0) {\n                subscription.unsubscribe();\n                subscription = undefined;\n                subject = undefined;\n            }\n        });\n    };\n}\n//# sourceMappingURL=shareReplay.js.map","import { isArray } from './isArray';\nexport function isNumeric(val) {\n    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n//# sourceMappingURL=isNumeric.js.map","import { Subscriber } from '../Subscriber';\nexport function pairwise() {\n    return (source) => source.lift(new PairwiseOperator());\n}\nclass PairwiseOperator {\n    call(subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    }\n}\nclass PairwiseSubscriber extends Subscriber {\n    constructor(destination) {\n        super(destination);\n        this.hasPrev = false;\n    }\n    _next(value) {\n        let pair;\n        if (this.hasPrev) {\n            pair = [this.prev, value];\n        }\n        else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n        if (pair) {\n            this.destination.next(pair);\n        }\n    }\n}\n//# sourceMappingURL=pairwise.js.map","import { InjectionToken, inject, EventEmitter, ɵɵdefineInjectable, ɵɵinject, Injectable, Optional, Inject, Directive, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nconst DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY,\n});\n/** @docs-private */\nfunction DIR_DOCUMENT_FACTORY() {\n    return inject(DOCUMENT);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nclass Directionality {\n    constructor(_document) {\n        /** The current 'ltr' or 'rtl' value. */\n        this.value = 'ltr';\n        /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n        this.change = new EventEmitter();\n        if (_document) {\n            // TODO: handle 'auto' value -\n            // We still need to account for dir=\"auto\".\n            // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n            // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n            const bodyDir = _document.body ? _document.body.dir : null;\n            const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n            const value = bodyDir || htmlDir;\n            this.value = (value === 'ltr' || value === 'rtl') ? value : 'ltr';\n        }\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n}\nDirectionality.ɵfac = function Directionality_Factory(t) { return new (t || Directionality)(ɵngcc0.ɵɵinject(DIR_DOCUMENT, 8)); };\nDirectionality.ɵprov = ɵɵdefineInjectable({ factory: function Directionality_Factory() { return new Directionality(ɵɵinject(DIR_DOCUMENT, 8)); }, token: Directionality, providedIn: \"root\" });\nDirectionality.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DIR_DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Directionality, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DIR_DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\nclass Dir {\n    constructor() {\n        /** Normalized direction that accounts for invalid/unsupported values. */\n        this._dir = 'ltr';\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Event emitted when the direction changes. */\n        this.change = new EventEmitter();\n    }\n    /** @docs-private */\n    get dir() { return this._dir; }\n    set dir(value) {\n        const old = this._dir;\n        const normalizedValue = value ? value.toLowerCase() : value;\n        this._rawDir = value;\n        this._dir = (normalizedValue === 'ltr' || normalizedValue === 'rtl') ? normalizedValue : 'ltr';\n        if (old !== this._dir && this._isInitialized) {\n            this.change.emit(this._dir);\n        }\n    }\n    /** Current layout direction of the element. */\n    get value() { return this.dir; }\n    /** Initialize once default value has been set. */\n    ngAfterContentInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n}\nDir.ɵfac = function Dir_Factory(t) { return new (t || Dir)(); };\nDir.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: Dir, selectors: [[\"\", \"dir\", \"\"]], hostVars: 1, hostBindings: function Dir_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"dir\", ctx._rawDir);\n    } }, inputs: { dir: \"dir\" }, outputs: { change: \"dirChange\" }, exportAs: [\"dir\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: Directionality, useExisting: Dir }])] });\nDir.propDecorators = {\n    change: [{ type: Output, args: ['dirChange',] }],\n    dir: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Dir, [{\n        type: Directive,\n        args: [{\n                selector: '[dir]',\n                providers: [{ provide: Directionality, useExisting: Dir }],\n                host: { '[attr.dir]': '_rawDir' },\n                exportAs: 'dir'\n            }]\n    }], function () { return []; }, { change: [{\n            type: Output,\n            args: ['dirChange']\n        }], dir: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass BidiModule {\n}\nBidiModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BidiModule });\nBidiModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function BidiModule_Factory(t) { return new (t || BidiModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BidiModule, { declarations: [Dir], exports: [Dir] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BidiModule, [{\n        type: NgModule,\n        args: [{\n                exports: [Dir],\n                declarations: [Dir]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality, DIR_DOCUMENT_FACTORY as ɵangular_material_src_cdk_bidi_bidi_a };\n\n//# sourceMappingURL=bidi.js.map","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { map } from '../operators/map';\nimport { isObject } from '../util/isObject';\nimport { from } from './from';\nexport function forkJoin(...sources) {\n    if (sources.length === 1) {\n        const first = sources[0];\n        if (isArray(first)) {\n            return forkJoinInternal(first, null);\n        }\n        if (isObject(first) && Object.getPrototypeOf(first) === Object.prototype) {\n            const keys = Object.keys(first);\n            return forkJoinInternal(keys.map(key => first[key]), keys);\n        }\n    }\n    if (typeof sources[sources.length - 1] === 'function') {\n        const resultSelector = sources.pop();\n        sources = (sources.length === 1 && isArray(sources[0])) ? sources[0] : sources;\n        return forkJoinInternal(sources, null).pipe(map((args) => resultSelector(...args)));\n    }\n    return forkJoinInternal(sources, null);\n}\nfunction forkJoinInternal(sources, keys) {\n    return new Observable(subscriber => {\n        const len = sources.length;\n        if (len === 0) {\n            subscriber.complete();\n            return;\n        }\n        const values = new Array(len);\n        let completed = 0;\n        let emitted = 0;\n        for (let i = 0; i < len; i++) {\n            const source = from(sources[i]);\n            let hasValue = false;\n            subscriber.add(source.subscribe({\n                next: value => {\n                    if (!hasValue) {\n                        hasValue = true;\n                        emitted++;\n                    }\n                    values[i] = value;\n                },\n                error: err => subscriber.error(err),\n                complete: () => {\n                    completed++;\n                    if (completed === len || !hasValue) {\n                        if (emitted === len) {\n                            subscriber.next(keys ?\n                                keys.reduce((result, key, i) => (result[key] = values[i], result), {}) :\n                                values);\n                        }\n                        subscriber.complete();\n                    }\n                }\n            }));\n        }\n    });\n}\n//# sourceMappingURL=forkJoin.js.map","import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, Directive, forwardRef, Input, ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Optional, Inject, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Output, ViewChild, ViewContainerRef, TemplateRef, IterableDiffers, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { isDataSource, ArrayDataSource } from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the virtual scrolling strategy. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\n\nconst _c0 = [\"contentWrapper\"];\nconst _c1 = [\"*\"];\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() { }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() { }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        let firstVisibleIndex = scrollOffset / this._itemSize;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() { return this._itemSize; }\n    set itemSize(value) { this._itemSize = coerceNumberProperty(value); }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() { return this._minBufferPx; }\n    set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() { return this._maxBufferPx; }\n    set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) { return new (t || CdkFixedSizeVirtualScroll)(); };\nCdkFixedSizeVirtualScroll.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkFixedSizeVirtualScroll, selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]], inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n            }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkFixedSizeVirtualScroll.propDecorators = {\n    itemSize: [{ type: Input }],\n    minBufferPx: [{ type: Input }],\n    maxBufferPx: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkFixedSizeVirtualScroll, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                providers: [{\n                        provide: VIRTUAL_SCROLL_STRATEGY,\n                        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                        deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n                    }]\n            }]\n    }], function () { return []; }, { itemSize: [{\n            type: Input\n        }], minBufferPx: [{\n            type: Input\n        }], maxBufferPx: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                .subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementRef) {\n        let element = elementRef.nativeElement;\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = element.parentElement);\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) { return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\nScrollDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(ɵɵinject(NgZone), ɵɵinject(Platform), ɵɵinject(DOCUMENT, 8)); }, token: ScrollDispatcher, providedIn: \"root\" });\nScrollDispatcher.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* NORMAL */) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) { return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nCdkScrollable.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkScrollable, selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]] });\nCdkScrollable.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkScrollable, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-scrollable], [cdkScrollable]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ScrollDispatcher }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // We don't need to keep track of the subscription,\n            // because we complete the `change` stream on destroy.\n            this.change().subscribe(() => this._updateViewportSize());\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._getDocument();\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            documentElement.scrollTop || 0;\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            documentElement.scrollLeft || 0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser ?\n            { width: window.innerWidth, height: window.innerHeight } :\n            { width: 0, height: 0 };\n    }\n}\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) { return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\nViewportRuler.ɵprov = ɵɵdefineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(ɵɵinject(Platform), ɵɵinject(NgZone), ɵɵinject(DOCUMENT, 8)); }, token: ViewportRuler, providedIn: \"root\" });\nViewportRuler.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ViewportRuler, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, \n    /**\n     * @deprecated `viewportRuler` parameter to become required.\n     * @breaking-change 11.0.0\n     */\n    viewportRuler) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject.asObservable();\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        // @breaking-change 11.0.0 Remove null check for `viewportRuler`.\n        if (viewportRuler) {\n            this._viewportChanges = viewportRuler.change().subscribe(() => {\n                this.checkViewportSize();\n            });\n        }\n    }\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        return from ?\n            super.measureScrollOffset(from) :\n            super.measureScrollOffset(this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n}\nCdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) { return new (t || CdkVirtualScrollViewport)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ViewportRuler, 8)); };\nCdkVirtualScrollViewport.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkVirtualScrollViewport, selectors: [[\"cdk-virtual-scroll-viewport\"]], viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n    } }, hostAttrs: [1, \"cdk-virtual-scroll-viewport\"], hostVars: 4, hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation !== \"horizontal\");\n    } }, inputs: { orientation: \"orientation\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkScrollable,\n                useExisting: CdkVirtualScrollViewport\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 4, vars: 4, consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]], template: function CdkVirtualScrollViewport_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx._totalContentWidth)(\"height\", ctx._totalContentHeight);\n    } }, styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"], encapsulation: 2, changeDetection: 0 });\nCdkVirtualScrollViewport.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ScrollDispatcher },\n    { type: ViewportRuler, decorators: [{ type: Optional }] }\n];\nCdkVirtualScrollViewport.propDecorators = {\n    orientation: [{ type: Input }],\n    scrolledIndexChange: [{ type: Output }],\n    _contentWrapper: [{ type: ViewChild, args: ['contentWrapper', { static: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkVirtualScrollViewport, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-virtual-scroll-viewport',\n                template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\",\n                host: {\n                    'class': 'cdk-virtual-scroll-viewport',\n                    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [{\n                        provide: CdkScrollable,\n                        useExisting: CdkVirtualScrollViewport\n                    }],\n                styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [VIRTUAL_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ScrollDispatcher }, { type: ViewportRuler, decorators: [{\n                type: Optional\n            }] }]; }, { scrolledIndexChange: [{\n            type: Output\n        }], orientation: [{\n            type: Input\n        }], _contentWrapper: [{\n            type: ViewChild,\n            args: ['contentWrapper', { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /**\n         * The size of the cache used to store templates that are not being used for re-use later.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n         */\n        this.cdkVirtualForTemplateCacheSize = 20;\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges\n            .pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /**\n         * The template cache used to hold on ot template instancess that have been stamped out, but don't\n         * currently need to be rendered. These instances will be reused in the future rather than\n         * stamping out brand new ones.\n         */\n        this._templateCache = [];\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            ngZone.run(() => this.viewChange.next(this._renderedRange));\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // Slice the value if its an NgIterable to ensure we're working with an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.prototype.slice.call(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ?\n            (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n            undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode ?\n            getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode) : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        for (let view of this._templateCache) {\n            view.destroy();\n        }\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            let view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            if (record.previousIndex == null) { // Item added.\n                const view = this._insertViewForNewItem(currentIndex);\n                view.context.$implicit = record.item;\n            }\n            else if (currentIndex == null) { // Item removed.\n                this._cacheView(this._detachView(adjustedPreviousIndex));\n            }\n            else { // Item moved.\n                const view = this._viewContainerRef.get(adjustedPreviousIndex);\n                this._viewContainerRef.move(view, currentIndex);\n                view.context.$implicit = record.item;\n            }\n        });\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Cache the given detached view. */\n    _cacheView(view) {\n        if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n            this._templateCache.push(view);\n        }\n        else {\n            const index = this._viewContainerRef.indexOf(view);\n            // It's very unlikely that the index will ever be -1, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                this._viewContainerRef.remove(index);\n            }\n        }\n    }\n    /** Inserts a view for a new item, either from the cache or by creating a new one. */\n    _insertViewForNewItem(index) {\n        return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    /** Creates a new embedded view and moves it to the given index */\n    _createEmbeddedViewAt(index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return this._viewContainerRef.createEmbeddedView(this._template, {\n            $implicit: null,\n            // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n            // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n            cdkVirtualForOf: this._cdkVirtualForOf,\n            index: -1,\n            count: -1,\n            first: false,\n            last: false,\n            odd: false,\n            even: false\n        }, index);\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n    _insertViewFromCache(index) {\n        const cachedView = this._templateCache.pop();\n        if (cachedView) {\n            this._viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n    /** Detaches the embedded view at the given index. */\n    _detachView(index) {\n        return this._viewContainerRef.detach(index);\n    }\n}\nCdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) { return new (t || CdkVirtualForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkVirtualForOf.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkVirtualForOf, selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]], inputs: { cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\", cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\" } });\nCdkVirtualForOf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: CdkVirtualScrollViewport, decorators: [{ type: SkipSelf }] },\n    { type: NgZone }\n];\nCdkVirtualForOf.propDecorators = {\n    cdkVirtualForOf: [{ type: Input }],\n    cdkVirtualForTrackBy: [{ type: Input }],\n    cdkVirtualForTemplate: [{ type: Input }],\n    cdkVirtualForTemplateCacheSize: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkVirtualForOf, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkVirtualFor][cdkVirtualForOf]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: CdkVirtualScrollViewport, decorators: [{\n                type: SkipSelf\n            }] }, { type: ɵngcc0.NgZone }]; }, { cdkVirtualForTemplateCacheSize: [{\n            type: Input\n        }], cdkVirtualForOf: [{\n            type: Input\n        }], cdkVirtualForTrackBy: [{\n            type: Input\n        }], cdkVirtualForTemplate: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkScrollableModule {\n}\nCdkScrollableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkScrollableModule });\nCdkScrollableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CdkScrollableModule_Factory(t) { return new (t || CdkScrollableModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkScrollableModule, { declarations: [CdkScrollable], exports: [CdkScrollable] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkScrollableModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkScrollable],\n                declarations: [CdkScrollable]\n            }]\n    }], null, null); })();\nclass ScrollingModule {\n}\nScrollingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ScrollingModule });\nScrollingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ScrollingModule_Factory(t) { return new (t || ScrollingModule)(); }, imports: [[\n            BidiModule,\n            PlatformModule,\n            CdkScrollableModule\n        ], BidiModule, CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollingModule, { declarations: function () { return [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]; }, imports: function () { return [BidiModule,\n        PlatformModule, CdkScrollableModule]; }, exports: function () { return [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollingModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    BidiModule,\n                    PlatformModule,\n                    CdkScrollableModule\n                ],\n                exports: [\n                    BidiModule,\n                    CdkScrollableModule,\n                    CdkFixedSizeVirtualScroll,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n                declarations: [\n                    CdkFixedSizeVirtualScroll,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n\n//# sourceMappingURL=scrolling.js.map","import { ElementRef, Directive, TemplateRef, ViewContainerRef, EventEmitter, ComponentFactoryResolver, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nclass Portal {\n    /** Attach this portal to a host. */\n    attach(host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        let host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal extends Portal {\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nclass TemplatePortal extends Portal {\n    constructor(template, viewContainerRef, context) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nclass DomPortal extends Portal {\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nclass BasePortalOutlet {\n    constructor() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /** Whether this host has an attached portal. */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n    attach(portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    }\n    /** Detaches a previously attached portal. */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /** @docs-private */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    constructor(\n    /** Element into which the content is projected. */\n    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            this.outletElement.appendChild(element);\n            super.setDisposeFn(() => {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        let viewContainer = portal.viewContainerRef;\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        // Note that we want to detect changes after the nodes have been moved so that\n        // any directives inside the portal that are looking at the DOM inside a lifecycle\n        // hook won't be invoked too early.\n        viewRef.detectChanges();\n        this.setDisposeFn((() => {\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose() {\n        super.dispose();\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.ɵfac = function CdkPortal_Factory(t) { return new (t || CdkPortal)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkPortal.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkPortal, selectors: [[\"\", \"cdkPortal\", \"\"]], exportAs: [\"cdkPortal\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkPortal.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ViewContainerRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkPortal, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortal]',\n                exportAs: 'cdkPortal'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n}\nTemplatePortalDirective.ɵfac = function TemplatePortalDirective_Factory(t) { return ɵTemplatePortalDirective_BaseFactory(t || TemplatePortalDirective); };\nTemplatePortalDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TemplatePortalDirective, selectors: [[\"\", \"cdk-portal\", \"\"], [\"\", \"portal\", \"\"]], exportAs: [\"cdkPortal\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkPortal,\n                useExisting: TemplatePortalDirective\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵTemplatePortalDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TemplatePortalDirective);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TemplatePortalDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-portal], [portal]',\n                exportAs: 'cdkPortal',\n                providers: [{\n                        provide: CdkPortal,\n                        useExisting: TemplatePortalDirective\n                    }]\n            }]\n    }], null, null); })();\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    constructor(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /** Whether the portal component is initialized. */\n        this._isInitialized = false;\n        /** Emits when a portal is attached to the outlet. */\n        this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            portal.setAttachedHost(this);\n            element.parentNode.insertBefore(anchorNode, element);\n            this._getRootNode().appendChild(element);\n            super.setDisposeFn(() => {\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /** Portal associated with the Portal outlet. */\n    get portal() {\n        return this._attachedPortal;\n    }\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal;\n    }\n    /** Component or view reference that is attached to the portal. */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        const viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n    /** Gets the root node of the portal outlet. */\n    _getRootNode() {\n        const nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE ?\n            nativeElement : nativeElement.parentNode);\n    }\n}\nCdkPortalOutlet.ɵfac = function CdkPortalOutlet_Factory(t) { return new (t || CdkPortalOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nCdkPortalOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkPortalOutlet, selectors: [[\"\", \"cdkPortalOutlet\", \"\"]], inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkPortalOutlet.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nCdkPortalOutlet.propDecorators = {\n    attached: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkPortalOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalOutlet]',\n                exportAs: 'cdkPortalOutlet',\n                inputs: ['portal: cdkPortalOutlet']\n            }]\n    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { attached: [{\n            type: Output\n        }] }); })();\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n}\nPortalHostDirective.ɵfac = function PortalHostDirective_Factory(t) { return ɵPortalHostDirective_BaseFactory(t || PortalHostDirective); };\nPortalHostDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PortalHostDirective, selectors: [[\"\", \"cdkPortalHost\", \"\"], [\"\", \"portalHost\", \"\"]], inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, exportAs: [\"cdkPortalHost\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkPortalOutlet,\n                useExisting: PortalHostDirective\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵPortalHostDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(PortalHostDirective);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PortalHostDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalHost], [portalHost]',\n                exportAs: 'cdkPortalHost',\n                inputs: ['portal: cdkPortalHost'],\n                providers: [{\n                        provide: CdkPortalOutlet,\n                        useExisting: PortalHostDirective\n                    }]\n            }]\n    }], null, null); })();\nclass PortalModule {\n}\nPortalModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PortalModule });\nPortalModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PortalModule_Factory(t) { return new (t || PortalModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PortalModule, { declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective], exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PortalModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n */\nclass PortalInjector {\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    get(token, notFoundValue) {\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n\n//# sourceMappingURL=portal.js.map","import { Subscriber } from '../Subscriber';\nexport function takeWhile(predicate, inclusive = false) {\n    return (source) => source.lift(new TakeWhileOperator(predicate, inclusive));\n}\nclass TakeWhileOperator {\n    constructor(predicate, inclusive) {\n        this.predicate = predicate;\n        this.inclusive = inclusive;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\n    }\n}\nclass TakeWhileSubscriber extends Subscriber {\n    constructor(destination, predicate, inclusive) {\n        super(destination);\n        this.predicate = predicate;\n        this.inclusive = inclusive;\n        this.index = 0;\n    }\n    _next(value) {\n        const destination = this.destination;\n        let result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    }\n    nextOrComplete(value, predicateResult) {\n        const destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            if (this.inclusive) {\n                destination.next(value);\n            }\n            destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=takeWhile.js.map","import { ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, Optional, SkipSelf, ElementRef, ApplicationRef, ComponentFactoryResolver, Injector, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n            bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nScrollStrategyOptions.ɵprov = ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(ɵɵinject(ScrollDispatcher), ɵɵinject(ViewportRuler), ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\nScrollStrategyOptions.ctorParameters = () => [\n    { type: ScrollDispatcher },\n    { type: ViewportRuler },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        /**\n         * Array of HTML elements clicking on which should not be considered as outside click\n         */\n        this.excludeFromOutsideClick = [];\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\nConnectedOverlayPositionChange.ctorParameters = () => [\n    { type: ConnectionPositionPair },\n    { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n];\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = function BaseOverlayDispatcher_Factory(t) { return new (t || BaseOverlayDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nBaseOverlayDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function BaseOverlayDispatcher_Factory() { return new BaseOverlayDispatcher(ɵɵinject(DOCUMENT)); }, token: BaseOverlayDispatcher, providedIn: \"root\" });\nBaseOverlayDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BaseOverlayDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document) {\n        super(document);\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener);\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayKeyboardDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(ɵɵinject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\nOverlayKeyboardDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nconst OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform) {\n        super(document);\n        this._platform = _platform;\n        this._cursorStyleIsSet = false;\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            // Get the target through the `composedPath` if possible to account for shadow DOM.\n            const target = event.composedPath ? event.composedPath()[0] : event.target;\n            const overlays = this._attachedOverlays;\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1) {\n                    continue;\n                }\n                const config = overlayRef.getConfig();\n                const excludeElements = [...config.excludeFromOutsideClick, overlayRef.overlayElement];\n                const isInsideClick = excludeElements.some(e => e.contains(target));\n                // If it is inside click just break - we should do nothing\n                // If it is outside click dispatch the mouse event, and proceed with the next overlay\n                if (isInsideClick) {\n                    break;\n                }\n                overlayRef._outsidePointerEvents.next(event);\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // tslint:disable: max-line-length\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body.\n        // See https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // and https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        // tslint:enable: max-line-length\n        if (!this._isAttached) {\n            this._document.body.addEventListener('click', this._clickListener, true);\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = this._document.body.style.cursor;\n                this._document.body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('click', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                this._document.body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) { return new (t || OverlayOutsideClickDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayOutsideClickDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function OverlayOutsideClickDispatcher_Factory() { return new OverlayOutsideClickDispatcher(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: OverlayOutsideClickDispatcher, providedIn: \"root\" });\nOverlayOutsideClickDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayOutsideClickDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Whether we're in a testing environment.\n * TODO(crisbeto): remove this once we have an overlay testing module.\n */\nconst isTestEnvironment = typeof window !== 'undefined' && !!window &&\n    !!(window.__karma__ || window.jasmine);\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, \n    /**\n     * @deprecated `platform` parameter to become required.\n     * @breaking-change 10.0.0\n     */\n    _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        const container = this._containerElement;\n        if (container && container.parentNode) {\n            container.parentNode.removeChild(container);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        // @breaking-change 10.0.0 Remove null check for `_platform`.\n        const isBrowser = this._platform ? this._platform.isBrowser : typeof window !== 'undefined';\n        const containerClass = 'cdk-overlay-container';\n        if (isBrowser || isTestEnvironment) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` +\n                `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (isTestEnvironment) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayContainer.ɵprov = ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: OverlayContainer, providedIn: \"root\" });\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n    return parentContainer || new OverlayContainer(_document);\n}\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nconst OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        DOCUMENT // We need to use the InjectionToken somewhere to keep TS happy\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, \n    // @breaking-change 8.0.0 `_location` parameter to be made required.\n    _location, \n    // @breaking-change 9.0.0 `_mouseClickDispatcher` parameter to be made required.\n    _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        let attachResult = this._portalOutlet.attach(portal);\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        // @breaking-change 8.0.0 remove the null check for `_location`\n        // once the constructor parameter is made required.\n        if (this._config.disposeOnNavigation && this._location) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        // @breaking-change 9.0.0 remove the null check for `_mouseClickDispatcher`\n        if (this._outsideClickDispatcher) {\n            this._outsideClickDispatcher.add(this);\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        // Stop listening for location changes.\n        this._locationChanges.unsubscribe();\n        // @breaking-change 9.0.0 remove the null check for `_outsideClickDispatcher`\n        if (this._outsideClickDispatcher) {\n            this._outsideClickDispatcher.remove(this);\n        }\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        // @breaking-change 9.0.0 remove the null check for `_outsideClickDispatcher`\n        if (this._outsideClickDispatcher) {\n            this._outsideClickDispatcher.remove(this);\n        }\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = null;\n        }\n        this._previousHostParent = this._pane = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick.asObservable();\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments.asObservable();\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments.asObservable();\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents.asObservable();\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents.asObservable();\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        let backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        let timeoutId;\n        let finishDetach = () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                if (backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n            }\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement == backdropToDetach) {\n                this._backdropElement = null;\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        };\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classList = element.classList;\n        coerceArray(cssClasses).forEach(cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            // Also trying to add an empty string to a DOMTokenList will throw.\n            if (cssClass) {\n                isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n            }\n        });\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .asObservable()\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._previousHostParent.removeChild(this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges.asObservable();\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, overlay, viewport, position) {\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = (x + overlay.width) - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param overlay Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, overlay, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        let virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach(pair => {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        });\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return (!units || units === 'px') ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n    /** Emits an event when the connection point changes. */\n    get onPositionChange() {\n        return this._positionStrategy.positionChanges;\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attach this position strategy to an overlay. */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /** Disposes all resources used by the position strategy. */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /** @docs-private */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        }\n        else {\n            this._direction = dir;\n        }\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    withOffsetX(offset) {\n        this._positionStrategy.withDefaultOffsetX(offset);\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    withOffsetY(offset) {\n        this._positionStrategy.withDefaultOffsetY(offset);\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked) {\n        this._positionStrategy.withLockedPosition(isLocked);\n        return this;\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    setOrigin(origin) {\n        this._positionStrategy.setOrigin(origin);\n        return this;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef\n     * @param originPos\n     * @param overlayPos\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @breaking-change 8.0.0\n     */\n    connectedTo(elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(OverlayContainer)); };\nOverlayPositionBuilder.ɵprov = ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(ɵɵinject(ViewportRuler), ɵɵinject(DOCUMENT), ɵɵinject(Platform), ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\nOverlayPositionBuilder.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: OverlayContainer }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }, { type: OverlayContainer }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, \n    // @breaking-change 8.0.0 `_location` parameter to be made required.\n    _location, \n    // @breaking-change 9.0.0 `_outsideClickDispatcher` parameter to be made required.\n    _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(OverlayOutsideClickDispatcher, 8)); };\nOverlay.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: Overlay.ɵfac });\nOverlay.ctorParameters = () => [\n    { type: ScrollStrategyOptions },\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: OverlayPositionBuilder },\n    { type: OverlayKeyboardDispatcher },\n    { type: Injector },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality },\n    { type: Location, decorators: [{ type: Optional }] },\n    { type: OverlayOutsideClickDispatcher, decorators: [{ type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Overlay, [{\n        type: Injectable\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ɵngcc0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc3.Directionality }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }, { type: OverlayOutsideClickDispatcher, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (config) => overlay.scrollStrategies.reposition(config);\n}\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkOverlayOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], exportAs: [\"cdkOverlayOrigin\"] });\nCdkOverlayOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() { return this._offsetX; }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() { return this._offsetY; }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() { return this._hasBackdrop; }\n    set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() { return this._lockPosition; }\n    set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() { return this._flexibleDimensions; }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() { return this._growAfterOpen; }\n    set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() { return this._push; }\n    set push(value) { this._push = coerceBooleanProperty(value); }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = this._position =\n            this.positionStrategy || this._createPositionStrategy();\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nCdkConnectedOverlay.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkConnectedOverlay.ctorParameters = () => [\n    { type: Overlay },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkConnectedOverlay.propDecorators = {\n    origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n    positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n    positionStrategy: [{ type: Input, args: ['cdkConnectedOverlayPositionStrategy',] }],\n    offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n    offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n    width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n    height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n    minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n    minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n    backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n    panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n    viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n    scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n    open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n    transformOriginSelector: [{ type: Input, args: ['cdkConnectedOverlayTransformOriginOn',] }],\n    hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n    lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n    flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n    growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n    push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n    backdropClick: [{ type: Output }],\n    positionChange: [{ type: Output }],\n    attach: [{ type: Output }],\n    detach: [{ type: Output }],\n    overlayKeydown: [{ type: Output }],\n    overlayOutsideClick: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            }]\n    }], function () { return [{ type: Overlay }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { viewportMargin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayViewportMargin']\n        }], open: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOpen']\n        }], backdropClick: [{\n            type: Output\n        }], positionChange: [{\n            type: Output\n        }], attach: [{\n            type: Output\n        }], detach: [{\n            type: Output\n        }], overlayKeydown: [{\n            type: Output\n        }], overlayOutsideClick: [{\n            type: Output\n        }], scrollStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayScrollStrategy']\n        }], offsetX: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetX']\n        }], offsetY: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetY']\n        }], hasBackdrop: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHasBackdrop']\n        }], lockPosition: [{\n            type: Input,\n            args: ['cdkConnectedOverlayLockPosition']\n        }], flexibleDimensions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayFlexibleDimensions']\n        }], growAfterOpen: [{\n            type: Input,\n            args: ['cdkConnectedOverlayGrowAfterOpen']\n        }], push: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPush']\n        }], positions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositions']\n        }], origin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOrigin']\n        }], positionStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositionStrategy']\n        }], width: [{\n            type: Input,\n            args: ['cdkConnectedOverlayWidth']\n        }], height: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHeight']\n        }], minWidth: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinWidth']\n        }], minHeight: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinHeight']\n        }], backdropClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayBackdropClass']\n        }], panelClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPanelClass']\n        }], transformOriginSelector: [{\n            type: Input,\n            args: ['cdkConnectedOverlayTransformOriginOn']\n        }] }); })();\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: OverlayModule });\nOverlayModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function OverlayModule_Factory(t) { return new (t || OverlayModule)(); }, providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay, CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollingModule]; }, exports: function () { return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ]\n            }]\n    }], null, null); })();\n/**\n * @deprecated Use `OverlayModule` instead.\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, \n    /**\n     * @deprecated `platform` parameter to become required.\n     * @breaking-change 10.0.0\n     */\n    platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return _document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null;\n    }\n}\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nFullscreenOverlayContainer.ɵprov = ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\nFullscreenOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectedPositionStrategy, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, OVERLAY_PROVIDERS, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_a, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_b, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_c, OVERLAY_CONTAINER_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_d, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_e, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_f, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_g, BaseOverlayDispatcher as ɵangular_material_src_cdk_overlay_overlay_h };\n\n//# sourceMappingURL=overlay.js.map","import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, isDevMode, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, ContentChildren, Input, ContentChild, Output, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, ErrorStateMatcher, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, HOME, END, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/overlay';\nimport * as ɵngcc7 from '@angular/common';\nimport * as ɵngcc8 from '@angular/material/form-field';\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatSelect_span_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n} }\nfunction MatSelect_ng_template_8_Template(rf, ctx) { if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 13, 14);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8._panelDoneAnimatingStream.next($event.toState); })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10._handleKeydown($event); });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\");\n} }\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\nMatSelectTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }])] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-select-trigger',\n                providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }]\n            }]\n    }], null, null); })();\nclass MatSelect extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, defaults) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Whether filling out the select is required in the form. */\n        this._required = false;\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** Whether the component is in multiple selection mode. */\n        this._multiple = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** The IDs of child options to be passed to the aria-owns attribute. */\n        this._optionIds = '';\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        /** Whether the component is disabling centering of the active option over the trigger. */\n        this._disableOptionCentering = false;\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        /** Aria label of the select. If not specified, the placeholder will be used as label. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        if (defaults) {\n            if (defaults.disableOptionCentering != null) {\n                this.disableOptionCentering = defaults.disableOptionCentering;\n            }\n            if (defaults.typeaheadDebounceInterval != null) {\n                this.typeaheadDebounceInterval = defaults.typeaheadDebounceInterval;\n            }\n        }\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() { return this._placeholder; }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        if (this._selectionModel) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() { return this._value; }\n    set value(newValue) {\n        if (newValue !== this._value) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() { return this._typeaheadDebounceInterval; }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() { return this._id; }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._scrollTop = 0;\n                this.openedChange.emit(true);\n            }\n            else {\n                this.openedChange.emit(false);\n                this.overlayDir.offsetX = 0;\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n        this._viewportRuler.change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this._panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n            return;\n        }\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n            if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                this.overlayDir.overlayRef.overlayElement) {\n                this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n            }\n        });\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            if (keyCode === HOME || keyCode === END) {\n                keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                manager.onKeydown(event);\n            }\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        }\n        else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._calculateOverlayOffsetX();\n            this.panel.nativeElement.scrollTop = this._scrollTop;\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            this._selectionModel.clear();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            this._selectionModel.clear();\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollActiveOptionIntoView();\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n        this._setOptionIds();\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected ? this._selectionModel.select(option) :\n                    this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Records option IDs to pass to the aria-owns property. */\n    _setOptionIds() {\n        this._optionIds = this.options.map(option => option.id).join(' ');\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollActiveOptionIntoView() {\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the index of the provided option in the option list. */\n    _getOptionIndex(option) {\n        return this.options.reduce((result, current, index) => {\n            if (result !== undefined) {\n                return result;\n            }\n            return option === current ? index : undefined;\n        }, undefined);\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset = this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0]);\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    /** Returns the aria-label of the select component. */\n    _getAriaLabel() {\n        // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n        // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n        return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n    }\n    /** Returns the aria-labelledby of the select component. */\n    _getAriaLabelledby() {\n        if (this.ariaLabelledby) {\n            return this.ariaLabelledby;\n        }\n        // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n        // computed label. `this.ariaLabel` is only the user-specified label.\n        if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n            this._getAriaLabel()) {\n            return null;\n        }\n        return this._parentFormField._labelId || null;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this._disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty;\n    }\n}\nMatSelect.ɵfac = function MatSelect_Factory(t) { return new (t || MatSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8)); };\nMatSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatSelect_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n    } }, hostAttrs: [\"role\", \"listbox\", 1, \"mat-select\"], hostVars: 19, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-label\", ctx._getAriaLabel())(\"aria-labelledby\", ctx._getAriaLabelledby())(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-owns\", ctx.panelOpen ? ctx._optionIds : null)(\"aria-multiselectable\", ctx.multiple)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", disableOptionCentering: \"disableOptionCentering\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c3, decls: 9, vars: 9, consts: [[\"cdk-overlay-origin\", \"\", \"aria-hidden\", \"true\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-panel-wrap\"], [3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() { return ctx.toggle(); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 11, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() { return ctx.close(); });\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    } }, directives: [ɵngcc6.CdkOverlayOrigin, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc6.CdkConnectedOverlay, ɵngcc7.NgSwitchDefault, ɵngcc7.NgClass], styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\\n\"], encapsulation: 2, data: { animation: [\n            matSelectAnimations.transformPanelWrap,\n            matSelectAnimations.transformPanel\n        ] }, changeDetection: 0 });\nMatSelect.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SELECT_CONFIG,] }] }\n];\nMatSelect.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger',] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    panelClass: [{ type: Input }],\n    customTrigger: [{ type: ContentChild, args: [MAT_SELECT_TRIGGER,] }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    typeaheadDebounceInterval: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n        type: Component,\n        args: [{\n                selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<div cdk-overlay-origin\\n     class=\\\"mat-select-trigger\\\"\\n     aria-hidden=\\\"true\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\">\\n    <span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\\\u00A0'}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span *ngSwitchDefault>{{triggerValue || '\\\\u00A0'}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'role': 'listbox',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-label]': '_getAriaLabel()',\n                    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    'class': 'mat-select',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()'\n                },\n                animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ],\n                providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ],\n                styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc8.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\n                type: Self\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SELECT_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.LiveAnnouncer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_SELECT_CONFIG]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], selectionChange: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], id: [{\n            type: Input\n        }], disableOptionCentering: [{\n            type: Input\n        }], typeaheadDebounceInterval: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], trigger: [{\n            type: ViewChild,\n            args: ['trigger']\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], overlayDir: [{\n            type: ViewChild,\n            args: [CdkConnectedOverlay]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], panelClass: [{\n            type: Input\n        }], customTrigger: [{\n            type: ContentChild,\n            args: [MAT_SELECT_TRIGGER]\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], errorStateMatcher: [{\n            type: Input\n        }], sortComparator: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\nMatSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); }, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[\n            CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n        ], CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule]; }, exports: function () { return [CdkScrollableModule,\n        MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatFormFieldModule,\n                    MatSelect,\n                    MatSelectTrigger,\n                    MatOptionModule,\n                    MatCommonModule\n                ],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, matSelectAnimations };\n\n//# sourceMappingURL=select.js.map","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { isDataSource } from '@angular/cdk/collections';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\n\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nconst _c1 = [\"caption\", \"colgroup, col\"];\nfunction CdkTextColumn_th_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n} }\nfunction CdkTextColumn_td_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n} }\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, Inject, Optional, Input, ContentChild, ElementRef, Injectable, NgZone, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, isDevMode, ChangeDetectorRef, Attribute, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /** Whether the sticky input has changed since it was last checked. */\n            this._hasStickyChanged = false;\n        }\n        /** Whether sticky positioning should be applied. */\n        get sticky() { return this._sticky; }\n        set sticky(v) {\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /** Whether the sticky value has changed since this was last called. */\n        hasStickyChanged() {\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) { return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkCellDef, selectors: [[\"\", \"cdkCellDef\", \"\"]] });\nCdkCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) { return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkHeaderCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCellDef, selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]] });\nCdkHeaderCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkHeaderCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkHeaderCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) { return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkFooterCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCellDef, selectors: [[\"\", \"cdkFooterCellDef\", \"\"]] });\nCdkFooterCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkFooterCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkFooterCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n// Boilerplate for applying mixins to CdkColumnDef.\n/** @docs-private */\nclass CdkColumnDefBase {\n}\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    constructor(_table) {\n        super();\n        this._table = _table;\n        this._stickyEnd = false;\n    }\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        // If the directive is set without a name (updated programatically), then this setter will\n        // trigger with an empty string and should not overwrite the programatically set value.\n        if (name) {\n            this._name = name;\n            this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n        }\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    set stickyEnd(v) {\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n}\nCdkColumnDef.ɵfac = function CdkColumnDef_Factory(t) { return new (t || CdkColumnDef)(ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkColumnDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkColumnDef, selectors: [[\"\", \"cdkColumnDef\", \"\"]], contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n    } }, inputs: { sticky: \"sticky\", name: [\"cdkColumnDef\", \"name\"], stickyEnd: \"stickyEnd\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkColumnDef.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\nCdkColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['cdkColumnDef',] }],\n    stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\n    cell: [{ type: ContentChild, args: [CdkCellDef,] }],\n    headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef,] }],\n    footerCell: [{ type: ContentChild, args: [CdkFooterCellDef,] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkColumnDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkColumnDef]',\n                inputs: ['sticky'],\n                providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, { name: [{\n            type: Input,\n            args: ['cdkColumnDef']\n        }], stickyEnd: [{\n            type: Input,\n            args: ['stickyEnd']\n        }], cell: [{\n            type: ContentChild,\n            args: [CdkCellDef]\n        }], headerCell: [{\n            type: ContentChild,\n            args: [CdkHeaderCellDef]\n        }], footerCell: [{\n            type: ContentChild,\n            args: [CdkFooterCellDef]\n        }] }); })();\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\n        elementRef.nativeElement.classList.add(columnClassName);\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) { return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkHeaderCell.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCell, selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]], hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkHeaderCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\n                host: {\n                    'class': 'cdk-header-cell',\n                    'role': 'columnheader'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) { return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkFooterCell.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCell, selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-footer-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkFooterCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                host: {\n                    'class': 'cdk-footer-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkCell.ɵfac = function CdkCell_Factory(t) { return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkCell.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkCell, selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-cell, td[cdk-cell]',\n                host: {\n                    'class': 'cdk-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @docs-private\n */\nclass _Schedule {\n    constructor() {\n        this.tasks = [];\n        this.endTasks = [];\n    }\n}\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n        this._currentSchedule = null;\n        this._destroyed = new Subject();\n    }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.endTasks.push(task);\n    }\n    /** Prevent any further tasks from running. */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    _createScheduleIfNeeded() {\n        if (this._currentSchedule) {\n            return;\n        }\n        this._currentSchedule = new _Schedule();\n        this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n            const schedule = this._currentSchedule;\n            this._currentSchedule = null;\n            for (const task of schedule.tasks) {\n                task();\n            }\n            for (const task of schedule.endTasks) {\n                task();\n            }\n        });\n    }\n}\n_CoalescedStyleScheduler.ɵfac = function _CoalescedStyleScheduler_Factory(t) { return new (t || _CoalescedStyleScheduler)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\n_CoalescedStyleScheduler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: _CoalescedStyleScheduler, factory: _CoalescedStyleScheduler.ɵfac });\n_CoalescedStyleScheduler.ctorParameters = () => [\n    { type: NgZone }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_CoalescedStyleScheduler, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n    constructor(\n    /** @docs-private */ template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) { return new (t || BaseRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nBaseRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BaseRowDef, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nBaseRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BaseRowDef, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/** @docs-private */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) { return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkHeaderRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderRowDef, selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]], inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkHeaderRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkHeaderRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkHeaderRowDef]',\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/** @docs-private */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) { return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkFooterRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkFooterRowDef, selectors: [[\"\", \"cdkFooterRowDef\", \"\"]], inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkFooterRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkFooterRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkFooterRowDef]',\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n}\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) { return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkRowDef, selectors: [[\"\", \"cdkRowDef\", \"\"]], inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkRowDef]',\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) { return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkCellOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkCellOutlet, selectors: [[\"\", \"cdkCellOutlet\", \"\"]] });\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\nCdkCellOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkCellOutlet, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) { return new (t || CdkHeaderRow)(); };\nCdkHeaderRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkHeaderRow, selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkHeaderRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkHeaderRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-header-row, tr[cdk-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-header-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n}\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) { return new (t || CdkFooterRow)(); };\nCdkFooterRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkFooterRow, selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkFooterRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkFooterRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-footer-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n}\nCdkRow.ɵfac = function CdkRow_Factory(t) { return new (t || CdkRow)(); };\nCdkRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkRow, selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-row, tr[cdk-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkNoDataRow.ɵfac = function CdkNoDataRow_Factory(t) { return new (t || CdkNoDataRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkNoDataRow.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkNoDataRow, selectors: [[\"ng-template\", \"cdkNoDataRow\", \"\"]] });\nCdkNoDataRow.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkNoDataRow, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkNoDataRow]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._isBrowser = _isBrowser;\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        const elementsToClear = [];\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            elementsToClear.push(row);\n            for (let i = 0; i < row.children.length; i++) {\n                elementsToClear.push(row.children[i]);\n            }\n        }\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            for (const element of elementsToClear) {\n                this._removeStickyStyle(element, stickyDirections);\n            }\n        });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n        if (!rows.length || !this._isBrowser || !(stickyStartStates.some(state => state) ||\n            stickyEndStates.some(state => state))) {\n            return;\n        }\n        const firstRow = rows[0];\n        const numCells = firstRow.children.length;\n        const cellWidths = this._getCellWidths(firstRow);\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            const isRtl = this.direction === 'rtl';\n            const start = isRtl ? 'right' : 'left';\n            const end = isRtl ? 'left' : 'right';\n            for (const row of rows) {\n                for (let i = 0; i < numCells; i++) {\n                    const cell = row.children[i];\n                    if (stickyStartStates[i]) {\n                        this._addStickyStyle(cell, start, startPositions[i]);\n                    }\n                    if (stickyEndStates[i]) {\n                        this._addStickyStyle(cell, end, endPositions[i]);\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n        // sticky states need to be reversed as well.\n        const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n        const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n        // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n        const stickyHeights = [];\n        const elementsToStick = [];\n        for (let rowIndex = 0, stickyHeight = 0; rowIndex < rows.length; rowIndex++) {\n            stickyHeights[rowIndex] = stickyHeight;\n            if (!states[rowIndex]) {\n                continue;\n            }\n            const row = rows[rowIndex];\n            elementsToStick[rowIndex] = this._isNativeHtmlTable ?\n                Array.from(row.children) : [row];\n            if (rowIndex !== rows.length - 1) {\n                stickyHeight += row.getBoundingClientRect().height;\n            }\n        }\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n        // (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                const height = stickyHeights[rowIndex];\n                for (const element of elementsToStick[rowIndex]) {\n                    this._addStickyStyle(element, position, height);\n                }\n            }\n        });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        const tfoot = tableElement.querySelector('tfoot');\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            if (stickyStates.some(state => !state)) {\n                this._removeStickyStyle(tfoot, ['bottom']);\n            }\n            else {\n                this._addStickyStyle(tfoot, 'bottom', 0);\n            }\n        });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n        }\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => !!element.style[dir]);\n        if (!hasDirection) {\n            element.style.position = '';\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue) {\n        element.classList.add(this._stickCellCss);\n        element.style[dir] = `${dirValue}px`;\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        element.style.zIndex = this._getCalculatedZIndex(element);\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row) {\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            let cell = firstRowCells[i];\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) { return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nDataRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DataRowOutlet, selectors: [[\"\", \"rowOutlet\", \"\"]] });\nDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[rowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) { return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nHeaderRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: HeaderRowOutlet, selectors: [[\"\", \"headerRowOutlet\", \"\"]] });\nHeaderRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HeaderRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[headerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) { return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nFooterRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FooterRowOutlet, selectors: [[\"\", \"footerRowOutlet\", \"\"]] });\nFooterRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FooterRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[footerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nNoDataRowOutlet.ɵfac = function NoDataRowOutlet_Factory(t) { return new (t || NoDataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nNoDataRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NoDataRowOutlet, selectors: [[\"\", \"noDataRowOutlet\", \"\"]] });\nNoDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NoDataRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[noDataRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n    constructor(_differs, _changeDetectorRef, _coalescedStyleScheduler, _elementRef, role, _dir, _document, _platform) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        /** Whether the no data row is currently showing anything. */\n        this._isShowingNoDataRow = false;\n        this._multiTemplateDataRows = false;\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * @docs-private\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    set trackBy(fn) {\n        if (isDevMode() && fn != null && typeof fn !== 'function' && console &&\n            console.warn) {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n            this.updateStickyColumnStyles();\n        }\n    }\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n    }\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        const columnsChanged = this._renderUpdatedColumns();\n        const stickyColumnStyleUpdateNeeded = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        else if (stickyColumnStyleUpdateNeeded) {\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n            // called when it row data arrives. Otherwise, we need to call it proactively.\n            this.updateStickyColumnStyles();\n        }\n        this._checkStickyStates();\n    }\n    ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n        this._noDataRowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n        this._cachedRenderRowsMap.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            this._updateNoDataRow();\n            return;\n        }\n        const viewContainer = this._rowOutlet.viewContainer;\n        changes.forEachOperation((record, prevIndex, currentIndex) => {\n            if (record.previousIndex == null) {\n                this._insertRow(record.item, currentIndex);\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove(prevIndex);\n            }\n            else {\n                const view = viewContainer.get(prevIndex);\n                viewContainer.move(view, currentIndex);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            const rowView = viewContainer.get(record.currentIndex);\n            rowView.context.$implicit = record.item.data;\n        });\n        this._updateNoDataRow();\n        this.updateStickyColumnStyles();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n        this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            // Collect all the rows rendered with this row definition.\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            let data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                let renderRow = renderRowsForData[j];\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                if (cache.has(renderRow.rowDef)) {\n                    cache.get(renderRow.rowDef).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            const cachedRenderRows = (cache && cache.has(rowDef)) ? cache.get(rowDef) : [];\n            if (cachedRenderRows.length) {\n                const dataRow = cachedRenderRows.shift();\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n        // Force re-render data rows if the list of column definitions have changed.\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n        if (dataColumnsChanged) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed.\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n        if (headerColumnsChanged) {\n            this._forceRenderHeaderRows();\n        }\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n        if (footerColumnsChanged) {\n            this._forceRenderFooterRows();\n        }\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n        const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return columnDef;\n        });\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            const viewRef = rowOutlet.viewContainer.get(i);\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     */\n    _insertRow(renderRow, renderIndex) {\n        const rowDef = renderRow.rowDef;\n        const context = { $implicit: renderRow.data };\n        this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            const viewRef = viewContainer.get(renderIndex);\n            const context = viewRef.context;\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            const column = this._columnDefsByName.get(columnId);\n            if (!column) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n    _applyNativeTableSections() {\n        const documentFragment = this._document.createDocumentFragment();\n        const sections = [\n            { tag: 'thead', outlets: [this._headerRowOutlet] },\n            { tag: 'tbody', outlets: [this._rowOutlet, this._noDataRowOutlet] },\n            { tag: 'tfoot', outlets: [this._footerRowOutlet] },\n        ];\n        for (const section of sections) {\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            for (const outlet of section.outlets) {\n                element.appendChild(outlet.elementRef.nativeElement);\n            }\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n        return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n        if (this._noDataRow) {\n            const shouldShow = this._rowOutlet.viewContainer.length === 0;\n            if (shouldShow !== this._isShowingNoDataRow) {\n                const container = this._noDataRowOutlet.viewContainer;\n                shouldShow ? container.createEmbeddedView(this._noDataRow.templateRef) : container.clear();\n                this._isShowingNoDataRow = shouldShow;\n            }\n        }\n    }\n}\nCdkTable.ɵfac = function CdkTable_Factory(t) { return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(_CoalescedStyleScheduler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform)); };\nCdkTable.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkTable, selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]], contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkNoDataRow, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRow = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n    } }, viewQuery: function CdkTable_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(DataRowOutlet, true);\n        ɵngcc0.ɵɵstaticViewQuery(HeaderRowOutlet, true);\n        ɵngcc0.ɵɵstaticViewQuery(FooterRowOutlet, true);\n        ɵngcc0.ɵɵstaticViewQuery(NoDataRowOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRowOutlet = _t.first);\n    } }, hostAttrs: [1, \"cdk-table\"], inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: \"multiTemplateDataRows\" }, exportAs: [\"cdkTable\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CDK_TABLE, useExisting: CdkTable },\n            _CoalescedStyleScheduler,\n        ])], ngContentSelectors: _c1, decls: 6, vars: 0, consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]], template: function CdkTable_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n        ɵngcc0.ɵɵelementContainer(2, 0);\n        ɵngcc0.ɵɵelementContainer(3, 1);\n        ɵngcc0.ɵɵelementContainer(4, 2);\n        ɵngcc0.ɵɵelementContainer(5, 3);\n    } }, directives: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], encapsulation: 2 });\nCdkTable.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: _CoalescedStyleScheduler },\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\nCdkTable.propDecorators = {\n    trackBy: [{ type: Input }],\n    dataSource: [{ type: Input }],\n    multiTemplateDataRows: [{ type: Input }],\n    _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet, { static: true },] }],\n    _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet, { static: true },] }],\n    _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet, { static: true },] }],\n    _noDataRowOutlet: [{ type: ViewChild, args: [NoDataRowOutlet, { static: true },] }],\n    _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef, { descendants: true },] }],\n    _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef, { descendants: true },] }],\n    _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef, {\n                    descendants: true\n                },] }],\n    _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef, {\n                    descendants: true\n                },] }],\n    _noDataRow: [{ type: ContentChild, args: [CdkNoDataRow,] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTable, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-table, table[cdk-table]',\n                exportAs: 'cdkTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'cdk-table'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n                // The view for `MatTable` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [\n                    { provide: CDK_TABLE, useExisting: CdkTable },\n                    _CoalescedStyleScheduler,\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }, { type: _CoalescedStyleScheduler }, { type: ɵngcc0.ElementRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['role']\n            }] }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, { trackBy: [{\n            type: Input\n        }], dataSource: [{\n            type: Input\n        }], multiTemplateDataRows: [{\n            type: Input\n        }], _rowOutlet: [{\n            type: ViewChild,\n            args: [DataRowOutlet, { static: true }]\n        }], _headerRowOutlet: [{\n            type: ViewChild,\n            args: [HeaderRowOutlet, { static: true }]\n        }], _footerRowOutlet: [{\n            type: ViewChild,\n            args: [FooterRowOutlet, { static: true }]\n        }], _noDataRowOutlet: [{\n            type: ViewChild,\n            args: [NoDataRowOutlet, { static: true }]\n        }], _contentColumnDefs: [{\n            type: ContentChildren,\n            args: [CdkColumnDef, { descendants: true }]\n        }], _contentRowDefs: [{\n            type: ContentChildren,\n            args: [CdkRowDef, { descendants: true }]\n        }], _contentHeaderRowDefs: [{\n            type: ContentChildren,\n            args: [CdkHeaderRowDef, {\n                    descendants: true\n                }]\n        }], _contentFooterRowDefs: [{\n            type: ContentChildren,\n            args: [CdkFooterRowDef, {\n                    descendants: true\n                }]\n        }], _noDataRow: [{\n            type: ContentChild,\n            args: [CdkNoDataRow]\n        }] }); })();\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n    constructor(_table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /** Alignment of the cell values. */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    /** Column name that should be used to reference this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n        const name = this.name;\n        if (isDevMode() && !name) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n}\nCdkTextColumn.ɵfac = function CdkTextColumn_Factory(t) { return new (t || CdkTextColumn)(ɵngcc0.ɵɵdirectiveInject(CdkTable, 8), ɵngcc0.ɵɵdirectiveInject(TEXT_COLUMN_OPTIONS, 8)); };\nCdkTextColumn.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkTextColumn, selectors: [[\"cdk-text-column\"]], viewQuery: function CdkTextColumn_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkColumnDef, true);\n        ɵngcc0.ɵɵstaticViewQuery(CdkCellDef, true);\n        ɵngcc0.ɵɵstaticViewQuery(CdkHeaderCellDef, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n    } }, inputs: { justify: \"justify\", name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\" }, decls: 3, vars: 0, consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]], template: function CdkTextColumn_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtemplate(1, CdkTextColumn_th_1_Template, 2, 3, \"th\", 1);\n        ɵngcc0.ɵɵtemplate(2, CdkTextColumn_td_2_Template, 2, 3, \"td\", 2);\n        ɵngcc0.ɵɵelementContainerEnd();\n    } }, directives: [CdkColumnDef, CdkHeaderCellDef, CdkCellDef, CdkHeaderCell, CdkCell], encapsulation: 2 });\nCdkTextColumn.ctorParameters = () => [\n    { type: CdkTable, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\n];\nCdkTextColumn.propDecorators = {\n    name: [{ type: Input }],\n    headerText: [{ type: Input }],\n    dataAccessor: [{ type: Input }],\n    justify: [{ type: Input }],\n    columnDef: [{ type: ViewChild, args: [CdkColumnDef, { static: true },] }],\n    cell: [{ type: ViewChild, args: [CdkCellDef, { static: true },] }],\n    headerCell: [{ type: ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTextColumn, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-text-column',\n                template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: CdkTable, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [TEXT_COLUMN_OPTIONS]\n            }] }]; }, { justify: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], headerText: [{\n            type: Input\n        }], dataAccessor: [{\n            type: Input\n        }], columnDef: [{\n            type: ViewChild,\n            args: [CdkColumnDef, { static: true }]\n        }], cell: [{\n            type: ViewChild,\n            args: [CdkCellDef, { static: true }]\n        }], headerCell: [{\n            type: ViewChild,\n            args: [CdkHeaderCellDef, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    NoDataRowOutlet,\n];\nclass CdkTableModule {\n}\nCdkTableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkTableModule });\nCdkTableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CdkTableModule_Factory(t) { return new (t || CdkTableModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, { declarations: [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet], exports: [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTableModule, [{\n        type: NgModule,\n        args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, StickyStyler, TEXT_COLUMN_OPTIONS, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\n\n//# sourceMappingURL=table.js.map","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\n\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true\n};\nlet _uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\nclass MatButtonToggleChange {\n    constructor(\n    /** The MatButtonToggle that emits the event. */\n    source, \n    /** The value assigned to the MatButtonToggle. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** Event emitted when the group's value changes. */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** `name` attribute for the underlying `input` element. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            });\n        }\n    }\n    /** Whether the toggle group is vertical. */\n    get vertical() { return this._vertical; }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** Value of the toggle group. */\n    get value() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n    get selected() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /** Whether multiple button toggles can be selected. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether multiple button toggle group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle._markForCheck());\n        }\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new MatButtonToggleChange(source, this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            this.selected.checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then(() => this._updateModelValue(isUserInput));\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /** Clears the selected toggles. */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => toggle.checked = false);\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n    _selectValue(value) {\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) { return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggleGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatButtonToggleGroup, selectors: [[\"mat-button-toggle-group\"]], contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    } }, hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"], hostVars: 5, hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, exportAs: [\"matButtonToggleGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n            { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n        ])] });\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                },] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n                },\n                exportAs: 'matButtonToggleGroup'\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { valueChange: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], appearance: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], _buttonToggles: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                }]\n        }] }); })();\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {\n}\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /** Event emitted when the group value changes. */\n        this.change = new EventEmitter();\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** Unique ID for the underlying `button` element. */\n    get buttonId() { return `${this.id}-button`; }\n    /** The appearance style of the button. */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /** Whether the button is checked. */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    set checked(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the button is disabled. */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    ngOnInit() {\n        const group = this.buttonToggleGroup;\n        this._isSingleSelector = group && !group.multiple;\n        this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = group.name;\n        }\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As as side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /** Focuses the button. */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick() {\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) { return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatButtonToggle, selectors: [[\"mat-button-toggle\"]], viewQuery: function MatButtonToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    } }, hostAttrs: [1, \"mat-button-toggle\"], hostVars: 11, hostBindings: function MatButtonToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() { return ctx.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", 0 - 1)(\"id\", ctx.id)(\"name\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { disableRipple: \"disableRipple\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\", id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], value: \"value\" }, outputs: { change: \"change\" }, exportAs: [\"matButtonToggle\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 9, consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]], template: function MatButtonToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() { return ctx._onButtonClick(); });\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"div\", 3);\n        ɵngcc0.ɵɵelement(5, \"div\", 4);\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? 0 - 1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    } }, directives: [ɵngcc2.MatRipple], styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_GROUP,] }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button',] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <div class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</button>\\n\\n<div class=\\\"mat-button-toggle-focus-overlay\\\"></div>\\n<div class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n                    // but can still receive focus from things like cdkFocusInitial.\n                    '[attr.tabindex]': '-1',\n                    '[attr.id]': 'id',\n                    '[attr.name]': 'null',\n                    '(focus)': 'focus()'\n                },\n                styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n            }]\n    }], function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_GROUP]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], tabIndex: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _buttonElement: [{\n            type: ViewChild,\n            args: ['button']\n        }], value: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatButtonToggleModule });\nMatButtonToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatButtonToggleModule_Factory(t) { return new (t || MatButtonToggleModule)(); }, imports: [[MatCommonModule, MatRippleModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, { declarations: function () { return [MatButtonToggleGroup, MatButtonToggle]; }, imports: function () { return [MatCommonModule, MatRippleModule]; }, exports: function () { return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n\n//# sourceMappingURL=button-toggle.js.map","import { Subject } from './Subject';\nimport { queue } from './scheduler/queue';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nexport class ReplaySubject extends Subject {\n    constructor(bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY, scheduler) {\n        super();\n        this.scheduler = scheduler;\n        this._events = [];\n        this._infiniteTimeWindow = false;\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\n        if (windowTime === Number.POSITIVE_INFINITY) {\n            this._infiniteTimeWindow = true;\n            this.next = this.nextInfiniteTimeWindow;\n        }\n        else {\n            this.next = this.nextTimeWindow;\n        }\n    }\n    nextInfiniteTimeWindow(value) {\n        const _events = this._events;\n        _events.push(value);\n        if (_events.length > this._bufferSize) {\n            _events.shift();\n        }\n        super.next(value);\n    }\n    nextTimeWindow(value) {\n        this._events.push(new ReplayEvent(this._getNow(), value));\n        this._trimBufferThenGetEvents();\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        const _infiniteTimeWindow = this._infiniteTimeWindow;\n        const _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n        const scheduler = this.scheduler;\n        const len = _events.length;\n        let subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.isStopped || this.hasError) {\n            subscription = Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));\n        }\n        if (_infiniteTimeWindow) {\n            for (let i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i]);\n            }\n        }\n        else {\n            for (let i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i].value);\n            }\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    }\n    _getNow() {\n        return (this.scheduler || queue).now();\n    }\n    _trimBufferThenGetEvents() {\n        const now = this._getNow();\n        const _bufferSize = this._bufferSize;\n        const _windowTime = this._windowTime;\n        const _events = this._events;\n        const eventsCount = _events.length;\n        let spliceCount = 0;\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    }\n}\nclass ReplayEvent {\n    constructor(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n}\n//# sourceMappingURL=ReplaySubject.js.map","import { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Inject, NgZone, ViewChild, ContentChild, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MAT_LABEL_GLOBAL_OPTIONS, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, merge, fromEvent } from 'rxjs';\nimport { startWith, takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/cdk/observers';\n\nconst _c0 = [\"underline\"];\nconst _c1 = [\"connectionContainer\"];\nconst _c2 = [\"inputContainer\"];\nconst _c3 = [\"label\"];\nfunction MatFormField_ng_container_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 14);\n    ɵngcc0.ɵɵelement(2, \"div\", 15);\n    ɵngcc0.ɵɵelement(3, \"div\", 16);\n    ɵngcc0.ɵɵelement(4, \"div\", 17);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(5, \"div\", 18);\n    ɵngcc0.ɵɵelement(6, \"div\", 15);\n    ɵngcc0.ɵɵelement(7, \"div\", 16);\n    ɵngcc0.ɵɵelement(8, \"div\", 17);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n} }\nfunction MatFormField_div_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 19);\n    ɵngcc0.ɵɵprojection(1, 1);\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction MatFormField_label_9_ng_container_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementStart(2, \"span\");\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r10._control.placeholder);\n} }\nfunction MatFormField_label_9_ng_content_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 3, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatFormField_label_9_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 23);\n    ɵngcc0.ɵɵtext(1, \" *\");\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction MatFormField_label_9_Template(rf, ctx) { if (rf & 1) {\n    const _r14 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"label\", 20, 21);\n    ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatFormField_label_9_Template_label_cdkObserveContent_0_listener() { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.updateOutlineGap(); });\n    ɵngcc0.ɵɵtemplate(2, MatFormField_label_9_ng_container_2_Template, 4, 1, \"ng-container\", 12);\n    ɵngcc0.ɵɵtemplate(3, MatFormField_label_9_ng_content_3_Template, 1, 0, \"ng-content\", 12);\n    ɵngcc0.ɵɵtemplate(4, MatFormField_label_9_span_4_Template, 2, 0, \"span\", 22);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-empty\", ctx_r4._control.empty && !ctx_r4._shouldAlwaysFloat())(\"mat-form-field-empty\", ctx_r4._control.empty && !ctx_r4._shouldAlwaysFloat())(\"mat-accent\", ctx_r4.color == \"accent\")(\"mat-warn\", ctx_r4.color == \"warn\");\n    ɵngcc0.ɵɵproperty(\"cdkObserveContentDisabled\", ctx_r4.appearance != \"outline\")(\"id\", ctx_r4._labelId)(\"ngSwitch\", ctx_r4._hasLabel());\n    ɵngcc0.ɵɵattribute(\"for\", ctx_r4._control.id)(\"aria-owns\", ctx_r4._control.id);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r4.hideRequiredMarker && ctx_r4._control.required && !ctx_r4._control.disabled);\n} }\nfunction MatFormField_div_10_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 24);\n    ɵngcc0.ɵɵprojection(1, 4);\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction MatFormField_div_11_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 25, 26);\n    ɵngcc0.ɵɵelement(2, \"span\", 27);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵclassProp(\"mat-accent\", ctx_r6.color == \"accent\")(\"mat-warn\", ctx_r6.color == \"warn\");\n} }\nfunction MatFormField_div_13_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵprojection(1, 5);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transitionMessages\", ctx_r7._subscriptAnimationState);\n} }\nfunction MatFormField_div_14_div_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 31);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r16 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r16._hintLabelId);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r16.hintLabel);\n} }\nfunction MatFormField_div_14_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 28);\n    ɵngcc0.ɵɵtemplate(1, MatFormField_div_14_div_1_Template, 2, 2, \"div\", 29);\n    ɵngcc0.ɵɵprojection(2, 6);\n    ɵngcc0.ɵɵelement(3, \"div\", 30);\n    ɵngcc0.ɵɵprojection(4, 7);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r8 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transitionMessages\", ctx_r8._subscriptAnimationState);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r8.hintLabel);\n} }\nconst _c4 = [\"*\", [[\"\", \"matPrefix\", \"\"]], [[\"mat-placeholder\"]], [[\"mat-label\"]], [[\"\", \"matSuffix\", \"\"]], [[\"mat-error\"]], [[\"mat-hint\", 3, \"align\", \"end\"]], [[\"mat-hint\", \"align\", \"end\"]]];\nconst _c5 = [\"*\", \"[matPrefix]\", \"mat-placeholder\", \"mat-label\", \"[matSuffix]\", \"mat-error\", \"mat-hint:not([align='end'])\", \"mat-hint[align='end']\"];\nlet nextUniqueId = 0;\n/**\n * Injection token that can be used to reference instances of `MatError`. It serves as\n * alternative token to the actual `MatError` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_ERROR = new InjectionToken('MatError');\n/** Single error message to be shown underneath the form field. */\nclass MatError {\n    constructor() {\n        this.id = `mat-error-${nextUniqueId++}`;\n    }\n}\nMatError.ɵfac = function MatError_Factory(t) { return new (t || MatError)(); };\nMatError.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatError, selectors: [[\"mat-error\"]], hostAttrs: [\"role\", \"alert\", 1, \"mat-error\"], hostVars: 1, hostBindings: function MatError_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n    } }, inputs: { id: \"id\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_ERROR, useExisting: MatError }])] });\nMatError.propDecorators = {\n    id: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatError, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-error',\n                host: {\n                    'class': 'mat-error',\n                    'role': 'alert',\n                    '[attr.id]': 'id'\n                },\n                providers: [{ provide: MAT_ERROR, useExisting: MatError }]\n            }]\n    }], function () { return []; }, { id: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nconst matFormFieldAnimations = {\n    /** Animation that transitions the form field's error and hint messages. */\n    transitionMessages: trigger('transitionMessages', [\n        // TODO(mmalerba): Use angular animations for label animation as well.\n        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n        transition('void => enter', [\n            style({ opacity: 0, transform: 'translateY(-100%)' }),\n            animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** An interface which allows a control to work inside of a `MatFormField`. */\nclass MatFormFieldControl {\n}\nMatFormFieldControl.ɵfac = function MatFormFieldControl_Factory(t) { return new (t || MatFormFieldControl)(); };\nMatFormFieldControl.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatFormFieldControl });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatFormFieldControl, [{\n        type: Directive\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatFormFieldPlaceholderConflictError() {\n    return Error('Placeholder attribute and child element were both specified.');\n}\n/** @docs-private */\nfunction getMatFormFieldDuplicatedHintError(align) {\n    return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/** @docs-private */\nfunction getMatFormFieldMissingControlError() {\n    return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId$1 = 0;\n/**\n * Injection token that can be used to reference instances of `MatHint`. It serves as\n * alternative token to the actual `MatHint` class which could cause unnecessary\n * retention of the class and its directive metadata.\n *\n * *Note*: This is not part of the public API as the MDC-based form-field will not\n * need a lightweight token for `MatHint` and we want to reduce breaking changes.\n */\nconst _MAT_HINT = new InjectionToken('MatHint');\n/** Hint text to be shown underneath the form field control. */\nclass MatHint {\n    constructor() {\n        /** Whether to align the hint label at the start or end of the line. */\n        this.align = 'start';\n        /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n        this.id = `mat-hint-${nextUniqueId$1++}`;\n    }\n}\nMatHint.ɵfac = function MatHint_Factory(t) { return new (t || MatHint)(); };\nMatHint.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatHint, selectors: [[\"mat-hint\"]], hostAttrs: [1, \"mat-hint\"], hostVars: 4, hostBindings: function MatHint_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"align\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-right\", ctx.align == \"end\");\n    } }, inputs: { align: \"align\", id: \"id\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: _MAT_HINT, useExisting: MatHint }])] });\nMatHint.propDecorators = {\n    align: [{ type: Input }],\n    id: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatHint, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-hint',\n                host: {\n                    'class': 'mat-hint',\n                    '[class.mat-right]': 'align == \"end\"',\n                    '[attr.id]': 'id',\n                    // Remove align attribute to prevent it from interfering with layout.\n                    '[attr.align]': 'null'\n                },\n                providers: [{ provide: _MAT_HINT, useExisting: MatHint }]\n            }]\n    }], function () { return []; }, { align: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The floating label for a `mat-form-field`. */\nclass MatLabel {\n}\nMatLabel.ɵfac = function MatLabel_Factory(t) { return new (t || MatLabel)(); };\nMatLabel.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatLabel, selectors: [[\"mat-label\"]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatLabel, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-label'\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\nclass MatPlaceholder {\n}\nMatPlaceholder.ɵfac = function MatPlaceholder_Factory(t) { return new (t || MatPlaceholder)(); };\nMatPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatPlaceholder, selectors: [[\"mat-placeholder\"]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-placeholder'\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatPrefix`. It serves as\n * alternative token to the actual `MatPrefix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_PREFIX = new InjectionToken('MatPrefix');\n/** Prefix to be placed in front of the form field. */\nclass MatPrefix {\n}\nMatPrefix.ɵfac = function MatPrefix_Factory(t) { return new (t || MatPrefix)(); };\nMatPrefix.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatPrefix, selectors: [[\"\", \"matPrefix\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_PREFIX, useExisting: MatPrefix }])] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatPrefix, [{\n        type: Directive,\n        args: [{\n                selector: '[matPrefix]',\n                providers: [{ provide: MAT_PREFIX, useExisting: MatPrefix }]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatSuffix`. It serves as\n * alternative token to the actual `MatSuffix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SUFFIX = new InjectionToken('MatSuffix');\n/** Suffix to be placed at the end of the form field. */\nclass MatSuffix {\n}\nMatSuffix.ɵfac = function MatSuffix_Factory(t) { return new (t || MatSuffix)(); };\nMatSuffix.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSuffix, selectors: [[\"\", \"matSuffix\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_SUFFIX, useExisting: MatSuffix }])] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSuffix, [{\n        type: Directive,\n        args: [{\n                selector: '[matSuffix]',\n                providers: [{ provide: MAT_SUFFIX, useExisting: MatSuffix }]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId$2 = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nconst MAT_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to inject an instances of `MatFormField`. It serves\n * as alternative token to the actual `MatFormField` class which would cause unnecessary\n * retention of the `MatFormField` class and its component metadata.\n */\nconst MAT_FORM_FIELD = new InjectionToken('MatFormField');\n/** Container for form controls that applies Material Design styling and behavior. */\nclass MatFormField extends _MatFormFieldMixinBase {\n    constructor(_elementRef, _changeDetectorRef, labelOptions, _dir, _defaults, _platform, _ngZone, _animationMode) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._defaults = _defaults;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        /**\n         * Whether the outline gap needs to be calculated\n         * immediately on the next change detection run.\n         */\n        this._outlineGapCalculationNeededImmediately = false;\n        /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n        this._outlineGapCalculationNeededOnStable = false;\n        this._destroyed = new Subject();\n        /** Override for the logic that disables the label animation in certain cases. */\n        this._showAlwaysAnimate = false;\n        /** State of the mat-hint and mat-error animations. */\n        this._subscriptAnimationState = '';\n        this._hintLabel = '';\n        // Unique id for the hint label.\n        this._hintLabelId = `mat-hint-${nextUniqueId$2++}`;\n        // Unique id for the internal form field label.\n        this._labelId = `mat-form-field-label-${nextUniqueId$2++}`;\n        this._labelOptions = labelOptions ? labelOptions : {};\n        this.floatLabel = this._getDefaultFloatLabelState();\n        this._animationsEnabled = _animationMode !== 'NoopAnimations';\n        // Set the default through here so we invoke the setter on the first run.\n        this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n        this._hideRequiredMarker = (_defaults && _defaults.hideRequiredMarker != null) ?\n            _defaults.hideRequiredMarker : false;\n    }\n    /** The form-field appearance style. */\n    get appearance() { return this._appearance; }\n    set appearance(value) {\n        const oldValue = this._appearance;\n        this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n        if (this._appearance === 'outline' && oldValue !== value) {\n            this._outlineGapCalculationNeededOnStable = true;\n        }\n    }\n    /** Whether the required marker should be hidden. */\n    get hideRequiredMarker() { return this._hideRequiredMarker; }\n    set hideRequiredMarker(value) {\n        this._hideRequiredMarker = coerceBooleanProperty(value);\n    }\n    /** Whether the floating label should always float or not. */\n    _shouldAlwaysFloat() {\n        return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n    }\n    /** Whether the label can float or not. */\n    _canLabelFloat() { return this.floatLabel !== 'never'; }\n    /** Text for the form field hint. */\n    get hintLabel() { return this._hintLabel; }\n    set hintLabel(value) {\n        this._hintLabel = value;\n        this._processHints();\n    }\n    /**\n     * Whether the label should always float, never float or float as the user types.\n     *\n     * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n     * way to make the floating label emulate the behavior of a standard input placeholder. However\n     * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n     * appearances the `never` option has been disabled in favor of just using the placeholder.\n     */\n    get floatLabel() {\n        return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n    }\n    set floatLabel(value) {\n        if (value !== this._floatLabel) {\n            this._floatLabel = value || this._getDefaultFloatLabelState();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    get _control() {\n        // TODO(crisbeto): we need this workaround in order to support both Ivy and ViewEngine.\n        //  We should clean this up once Ivy is the default renderer.\n        return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n    }\n    set _control(value) {\n        this._explicitFormFieldControl = value;\n    }\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    getConnectedOverlayOrigin() {\n        return this._connectionContainerRef || this._elementRef;\n    }\n    ngAfterContentInit() {\n        this._validateControlChild();\n        const control = this._control;\n        if (control.controlType) {\n            this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n        }\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        control.stateChanges.pipe(startWith(null)).subscribe(() => {\n            this._validatePlaceholders();\n            this._syncDescribedByIds();\n            this._changeDetectorRef.markForCheck();\n        });\n        // Run change detection if the value changes.\n        if (control.ngControl && control.ngControl.valueChanges) {\n            control.ngControl.valueChanges\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(() => this._changeDetectorRef.markForCheck());\n        }\n        // Note that we have to run outside of the `NgZone` explicitly,\n        // in order to avoid throwing users into an infinite loop\n        // if `zone-patch-rxjs` is included.\n        this._ngZone.runOutsideAngular(() => {\n            this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n                if (this._outlineGapCalculationNeededOnStable) {\n                    this.updateOutlineGap();\n                }\n            });\n        });\n        // Run change detection and update the outline if the suffix or prefix changes.\n        merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n            this._outlineGapCalculationNeededOnStable = true;\n            this._changeDetectorRef.markForCheck();\n        });\n        // Re-validate when the number of hints changes.\n        this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n            this._processHints();\n            this._changeDetectorRef.markForCheck();\n        });\n        // Update the aria-described by when the number of errors changes.\n        this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n            this._syncDescribedByIds();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (this._dir) {\n            this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                if (typeof requestAnimationFrame === 'function') {\n                    this._ngZone.runOutsideAngular(() => {\n                        requestAnimationFrame(() => this.updateOutlineGap());\n                    });\n                }\n                else {\n                    this.updateOutlineGap();\n                }\n            });\n        }\n    }\n    ngAfterContentChecked() {\n        this._validateControlChild();\n        if (this._outlineGapCalculationNeededImmediately) {\n            this.updateOutlineGap();\n        }\n    }\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._subscriptAnimationState = 'enter';\n        this._changeDetectorRef.detectChanges();\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop) {\n        const ngControl = this._control ? this._control.ngControl : null;\n        return ngControl && ngControl[prop];\n    }\n    _hasPlaceholder() {\n        return !!(this._control && this._control.placeholder || this._placeholderChild);\n    }\n    _hasLabel() {\n        return !!(this._labelChildNonStatic || this._labelChildStatic);\n    }\n    _shouldLabelFloat() {\n        return this._canLabelFloat() &&\n            ((this._control && this._control.shouldLabelFloat) || this._shouldAlwaysFloat());\n    }\n    _hideControlPlaceholder() {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this.appearance === 'legacy' && !this._hasLabel() ||\n            this._hasLabel() && !this._shouldLabelFloat();\n    }\n    _hasFloatingLabel() {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n    }\n    /** Determines whether to display hints or errors. */\n    _getDisplayedMessages() {\n        return (this._errorChildren && this._errorChildren.length > 0 &&\n            this._control.errorState) ? 'error' : 'hint';\n    }\n    /** Animates the placeholder up and locks it in position. */\n    _animateAndLockLabel() {\n        if (this._hasFloatingLabel() && this._canLabelFloat()) {\n            // If animations are disabled, we shouldn't go in here,\n            // because the `transitionend` will never fire.\n            if (this._animationsEnabled && this._label) {\n                this._showAlwaysAnimate = true;\n                fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n                    this._showAlwaysAnimate = false;\n                });\n            }\n            this.floatLabel = 'always';\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n     * or child element with the `mat-placeholder` directive).\n     */\n    _validatePlaceholders() {\n        if (this._control.placeholder && this._placeholderChild) {\n            throw getMatFormFieldPlaceholderConflictError();\n        }\n    }\n    /** Does any extra processing that is required when handling the hints. */\n    _processHints() {\n        this._validateHints();\n        this._syncDescribedByIds();\n    }\n    /**\n     * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     */\n    _validateHints() {\n        if (this._hintChildren) {\n            let startHint;\n            let endHint;\n            this._hintChildren.forEach((hint) => {\n                if (hint.align === 'start') {\n                    if (startHint || this.hintLabel) {\n                        throw getMatFormFieldDuplicatedHintError('start');\n                    }\n                    startHint = hint;\n                }\n                else if (hint.align === 'end') {\n                    if (endHint) {\n                        throw getMatFormFieldDuplicatedHintError('end');\n                    }\n                    endHint = hint;\n                }\n            });\n        }\n    }\n    /** Gets the default float label state. */\n    _getDefaultFloatLabelState() {\n        return (this._defaults && this._defaults.floatLabel) || this._labelOptions.float || 'auto';\n    }\n    /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     */\n    _syncDescribedByIds() {\n        if (this._control) {\n            let ids = [];\n            if (this._getDisplayedMessages() === 'hint') {\n                const startHint = this._hintChildren ?\n                    this._hintChildren.find(hint => hint.align === 'start') : null;\n                const endHint = this._hintChildren ?\n                    this._hintChildren.find(hint => hint.align === 'end') : null;\n                if (startHint) {\n                    ids.push(startHint.id);\n                }\n                else if (this._hintLabel) {\n                    ids.push(this._hintLabelId);\n                }\n                if (endHint) {\n                    ids.push(endHint.id);\n                }\n            }\n            else if (this._errorChildren) {\n                ids = this._errorChildren.map(error => error.id);\n            }\n            this._control.setDescribedByIds(ids);\n        }\n    }\n    /** Throws an error if the form field's control is missing. */\n    _validateControlChild() {\n        if (!this._control) {\n            throw getMatFormFieldMissingControlError();\n        }\n    }\n    /**\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\n     * appearance.\n     */\n    updateOutlineGap() {\n        const labelEl = this._label ? this._label.nativeElement : null;\n        if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n            !labelEl.textContent.trim()) {\n            return;\n        }\n        if (!this._platform.isBrowser) {\n            // getBoundingClientRect isn't available on the server.\n            return;\n        }\n        // If the element is not present in the DOM, the outline gap will need to be calculated\n        // the next time it is checked and in the DOM.\n        if (!this._isAttachedToDOM()) {\n            this._outlineGapCalculationNeededImmediately = true;\n            return;\n        }\n        let startWidth = 0;\n        let gapWidth = 0;\n        const container = this._connectionContainerRef.nativeElement;\n        const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n        const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n        if (this._label && this._label.nativeElement.children.length) {\n            const containerRect = container.getBoundingClientRect();\n            // If the container's width and height are zero, it means that the element is\n            // invisible and we can't calculate the outline gap. Mark the element as needing\n            // to be checked the next time the zone stabilizes. We can't do this immediately\n            // on the next change detection, because even if the element becomes visible,\n            // the `ClientRect` won't be reclaculated immediately. We reset the\n            // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n            if (containerRect.width === 0 && containerRect.height === 0) {\n                this._outlineGapCalculationNeededOnStable = true;\n                this._outlineGapCalculationNeededImmediately = false;\n                return;\n            }\n            const containerStart = this._getStartEnd(containerRect);\n            const labelChildren = labelEl.children;\n            const labelStart = this._getStartEnd(labelChildren[0].getBoundingClientRect());\n            let labelWidth = 0;\n            for (let i = 0; i < labelChildren.length; i++) {\n                labelWidth += labelChildren[i].offsetWidth;\n            }\n            startWidth = Math.abs(labelStart - containerStart) - outlineGapPadding;\n            gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n        }\n        for (let i = 0; i < startEls.length; i++) {\n            startEls[i].style.width = `${startWidth}px`;\n        }\n        for (let i = 0; i < gapEls.length; i++) {\n            gapEls[i].style.width = `${gapWidth}px`;\n        }\n        this._outlineGapCalculationNeededOnStable =\n            this._outlineGapCalculationNeededImmediately = false;\n    }\n    /** Gets the start end of the rect considering the current directionality. */\n    _getStartEnd(rect) {\n        return (this._dir && this._dir.value === 'rtl') ? rect.right : rect.left;\n    }\n    /** Checks whether the form field is attached to the DOM. */\n    _isAttachedToDOM() {\n        const element = this._elementRef.nativeElement;\n        if (element.getRootNode) {\n            const rootNode = element.getRootNode();\n            // If the element is inside the DOM the root node will be either the document\n            // or the closest shadow root, otherwise it'll be the element itself.\n            return rootNode && rootNode !== element;\n        }\n        // Otherwise fall back to checking if it's in the document. This doesn't account for\n        // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n        return document.documentElement.contains(element);\n    }\n}\nMatFormField.ɵfac = function MatFormField_Factory(t) { return new (t || MatFormField)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_LABEL_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatFormField.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatFormField, selectors: [[\"mat-form-field\"]], contentQueries: function MatFormField_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatFormFieldControl, true);\n        ɵngcc0.ɵɵstaticContentQuery(dirIndex, MatFormFieldControl, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLabel, true);\n        ɵngcc0.ɵɵstaticContentQuery(dirIndex, MatLabel, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatPlaceholder, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_ERROR, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _MAT_HINT, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_PREFIX, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SUFFIX, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._controlNonStatic = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._controlStatic = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._labelChildNonStatic = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._labelChildStatic = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderChild = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._errorChildren = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._hintChildren = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._prefixChildren = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._suffixChildren = _t);\n    } }, viewQuery: function MatFormField_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵstaticViewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(_c2, true);\n        ɵngcc0.ɵɵviewQuery(_c3, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.underlineRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._connectionContainerRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputContainerRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._label = _t.first);\n    } }, hostAttrs: [1, \"mat-form-field\"], hostVars: 44, hostBindings: function MatFormField_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-form-field-appearance-standard\", ctx.appearance == \"standard\")(\"mat-form-field-appearance-fill\", ctx.appearance == \"fill\")(\"mat-form-field-appearance-outline\", ctx.appearance == \"outline\")(\"mat-form-field-appearance-legacy\", ctx.appearance == \"legacy\")(\"mat-form-field-invalid\", ctx._control.errorState)(\"mat-form-field-can-float\", ctx._canLabelFloat())(\"mat-form-field-should-float\", ctx._shouldLabelFloat())(\"mat-form-field-has-label\", ctx._hasFloatingLabel())(\"mat-form-field-hide-placeholder\", ctx._hideControlPlaceholder())(\"mat-form-field-disabled\", ctx._control.disabled)(\"mat-form-field-autofilled\", ctx._control.autofilled)(\"mat-focused\", ctx._control.focused)(\"mat-accent\", ctx.color == \"accent\")(\"mat-warn\", ctx.color == \"warn\")(\"ng-untouched\", ctx._shouldForward(\"untouched\"))(\"ng-touched\", ctx._shouldForward(\"touched\"))(\"ng-pristine\", ctx._shouldForward(\"pristine\"))(\"ng-dirty\", ctx._shouldForward(\"dirty\"))(\"ng-valid\", ctx._shouldForward(\"valid\"))(\"ng-invalid\", ctx._shouldForward(\"invalid\"))(\"ng-pending\", ctx._shouldForward(\"pending\"))(\"_mat-animation-noopable\", !ctx._animationsEnabled);\n    } }, inputs: { color: \"color\", floatLabel: \"floatLabel\", appearance: \"appearance\", hideRequiredMarker: \"hideRequiredMarker\", hintLabel: \"hintLabel\" }, exportAs: [\"matFormField\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_FORM_FIELD, useExisting: MatFormField },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c5, decls: 15, vars: 8, consts: [[1, \"mat-form-field-wrapper\"], [1, \"mat-form-field-flex\", 3, \"click\"], [\"connectionContainer\", \"\"], [4, \"ngIf\"], [\"class\", \"mat-form-field-prefix\", 4, \"ngIf\"], [1, \"mat-form-field-infix\"], [\"inputContainer\", \"\"], [1, \"mat-form-field-label-wrapper\"], [\"class\", \"mat-form-field-label\", 3, \"cdkObserveContentDisabled\", \"id\", \"mat-empty\", \"mat-form-field-empty\", \"mat-accent\", \"mat-warn\", \"ngSwitch\", \"cdkObserveContent\", 4, \"ngIf\"], [\"class\", \"mat-form-field-suffix\", 4, \"ngIf\"], [\"class\", \"mat-form-field-underline\", 4, \"ngIf\"], [1, \"mat-form-field-subscript-wrapper\", 3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [\"class\", \"mat-form-field-hint-wrapper\", 4, \"ngSwitchCase\"], [1, \"mat-form-field-outline\"], [1, \"mat-form-field-outline-start\"], [1, \"mat-form-field-outline-gap\"], [1, \"mat-form-field-outline-end\"], [1, \"mat-form-field-outline\", \"mat-form-field-outline-thick\"], [1, \"mat-form-field-prefix\"], [1, \"mat-form-field-label\", 3, \"cdkObserveContentDisabled\", \"id\", \"ngSwitch\", \"cdkObserveContent\"], [\"label\", \"\"], [\"class\", \"mat-placeholder-required mat-form-field-required-marker\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"aria-hidden\", \"true\", 1, \"mat-placeholder-required\", \"mat-form-field-required-marker\"], [1, \"mat-form-field-suffix\"], [1, \"mat-form-field-underline\"], [\"underline\", \"\"], [1, \"mat-form-field-ripple\"], [1, \"mat-form-field-hint-wrapper\"], [\"class\", \"mat-hint\", 3, \"id\", 4, \"ngIf\"], [1, \"mat-form-field-hint-spacer\"], [1, \"mat-hint\", 3, \"id\"]], template: function MatFormField_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c4);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"click\", function MatFormField_Template_div_click_1_listener($event) { return ctx._control.onContainerClick && ctx._control.onContainerClick($event); });\n        ɵngcc0.ɵɵtemplate(3, MatFormField_ng_container_3_Template, 9, 0, \"ng-container\", 3);\n        ɵngcc0.ɵɵtemplate(4, MatFormField_div_4_Template, 2, 0, \"div\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5, 6);\n        ɵngcc0.ɵɵprojection(7);\n        ɵngcc0.ɵɵelementStart(8, \"span\", 7);\n        ɵngcc0.ɵɵtemplate(9, MatFormField_label_9_Template, 5, 16, \"label\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(10, MatFormField_div_10_Template, 2, 0, \"div\", 9);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(11, MatFormField_div_11_Template, 3, 4, \"div\", 10);\n        ɵngcc0.ɵɵelementStart(12, \"div\", 11);\n        ɵngcc0.ɵɵtemplate(13, MatFormField_div_13_Template, 2, 1, \"div\", 12);\n        ɵngcc0.ɵɵtemplate(14, MatFormField_div_14_Template, 5, 2, \"div\", 13);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.appearance == \"outline\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._prefixChildren.length);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._hasFloatingLabel());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._suffixChildren.length);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.appearance != \"outline\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx._getDisplayedMessages());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"error\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"hint\");\n    } }, directives: [ɵngcc3.NgIf, ɵngcc3.NgSwitch, ɵngcc3.NgSwitchCase, ɵngcc4.CdkObserveContent], styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}.cdk-high-contrast-active .mat-form-field-infix{border-image:linear-gradient(transparent, transparent)}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}[dir=rtl] .mat-form-field-label-wrapper{left:auto;right:0}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),width 400ms cubic-bezier(0.25, 0.8, 0.25, 1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-empty.mat-form-field-label,.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scale3d(1, 1.0001, 1)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(0.5);opacity:0;transition:background-color 300ms cubic-bezier(0.55, 0, 0.55, 0.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:scaleX(1);transition:transform 300ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 300ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-subscript-wrapper .mat-icon,.mat-form-field-label-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none}\\n\", \".mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:\\\"\\\";display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em}\\n\", \".mat-input-element{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date],.mat-input-element[type=datetime],.mat-input-element[type=datetime-local],.mat-input-element[type=month],.mat-input-element[type=week],.mat-input-element[type=time]{line-height:1}.mat-input-element[type=date]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=month]::after,.mat-input-element[type=week]::after,.mat-input-element[type=time]::after{content:\\\" \\\";white-space:pre;width:1px}.mat-input-element::-webkit-inner-spin-button,.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button{font-size:.75em}.mat-input-element::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-moz-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-moz-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-webkit-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-webkit-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element:-ms-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element:-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-ms-expand{display:none}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}select.mat-input-element::-ms-value{color:inherit;background:none}.mat-focused .cdk-high-contrast-active select.mat-input-element::-ms-value{color:inherit}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px;pointer-events:none}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select .mat-input-element{padding-right:15px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-input-element{padding-right:0;padding-left:15px}.mat-form-field-type-mat-native-select .mat-form-field-label-wrapper{max-width:calc(100% - 10px)}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\\n\", \".mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px}\\n\", \".mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-0.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-end{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap{border-width:2px}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap{transition:none}\\n\", \".mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:2px}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}\\n\"], encapsulation: 2, data: { animation: [matFormFieldAnimations.transitionMessages] }, changeDetection: 0 });\nMatFormField.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD_DEFAULT_OPTIONS,] }] },\n    { type: Platform },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatFormField.propDecorators = {\n    appearance: [{ type: Input }],\n    hideRequiredMarker: [{ type: Input }],\n    hintLabel: [{ type: Input }],\n    floatLabel: [{ type: Input }],\n    underlineRef: [{ type: ViewChild, args: ['underline',] }],\n    _connectionContainerRef: [{ type: ViewChild, args: ['connectionContainer', { static: true },] }],\n    _inputContainerRef: [{ type: ViewChild, args: ['inputContainer',] }],\n    _label: [{ type: ViewChild, args: ['label',] }],\n    _controlNonStatic: [{ type: ContentChild, args: [MatFormFieldControl,] }],\n    _controlStatic: [{ type: ContentChild, args: [MatFormFieldControl, { static: true },] }],\n    _labelChildNonStatic: [{ type: ContentChild, args: [MatLabel,] }],\n    _labelChildStatic: [{ type: ContentChild, args: [MatLabel, { static: true },] }],\n    _placeholderChild: [{ type: ContentChild, args: [MatPlaceholder,] }],\n    _errorChildren: [{ type: ContentChildren, args: [MAT_ERROR, { descendants: true },] }],\n    _hintChildren: [{ type: ContentChildren, args: [_MAT_HINT, { descendants: true },] }],\n    _prefixChildren: [{ type: ContentChildren, args: [MAT_PREFIX, { descendants: true },] }],\n    _suffixChildren: [{ type: ContentChildren, args: [MAT_SUFFIX, { descendants: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatFormField, [{\n        type: Component,\n        args: [{\n                selector: 'mat-form-field',\n                exportAs: 'matFormField',\n                template: \"<div class=\\\"mat-form-field-wrapper\\\">\\n  <div class=\\\"mat-form-field-flex\\\" #connectionContainer\\n       (click)=\\\"_control.onContainerClick && _control.onContainerClick($event)\\\">\\n\\n    <!-- Outline used for outline appearance. -->\\n    <ng-container *ngIf=\\\"appearance == 'outline'\\\">\\n      <div class=\\\"mat-form-field-outline\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n      <div class=\\\"mat-form-field-outline mat-form-field-outline-thick\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n    </ng-container>\\n\\n    <div class=\\\"mat-form-field-prefix\\\" *ngIf=\\\"_prefixChildren.length\\\">\\n      <ng-content select=\\\"[matPrefix]\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-infix\\\" #inputContainer>\\n      <ng-content></ng-content>\\n\\n      <span class=\\\"mat-form-field-label-wrapper\\\">\\n        <!-- We add aria-owns as a workaround for an issue in JAWS & NVDA where the label isn't\\n             read if it comes before the control in the DOM. -->\\n        <label class=\\\"mat-form-field-label\\\"\\n               (cdkObserveContent)=\\\"updateOutlineGap()\\\"\\n               [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\"\\n               [id]=\\\"_labelId\\\"\\n               [attr.for]=\\\"_control.id\\\"\\n               [attr.aria-owns]=\\\"_control.id\\\"\\n               [class.mat-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-form-field-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-accent]=\\\"color == 'accent'\\\"\\n               [class.mat-warn]=\\\"color == 'warn'\\\"\\n               #label\\n               *ngIf=\\\"_hasFloatingLabel()\\\"\\n               [ngSwitch]=\\\"_hasLabel()\\\">\\n\\n          <!-- @breaking-change 8.0.0 remove in favor of mat-label element an placeholder attr. -->\\n          <ng-container *ngSwitchCase=\\\"false\\\">\\n            <ng-content select=\\\"mat-placeholder\\\"></ng-content>\\n            <span>{{_control.placeholder}}</span>\\n          </ng-container>\\n\\n          <ng-content select=\\\"mat-label\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n\\n          <!-- @breaking-change 8.0.0 remove `mat-placeholder-required` class -->\\n          <span\\n            class=\\\"mat-placeholder-required mat-form-field-required-marker\\\"\\n            aria-hidden=\\\"true\\\"\\n            *ngIf=\\\"!hideRequiredMarker && _control.required && !_control.disabled\\\">&#32;*</span>\\n        </label>\\n      </span>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\">\\n      <ng-content select=\\\"[matSuffix]\\\"></ng-content>\\n    </div>\\n  </div>\\n\\n  <!-- Underline used for legacy, standard, and box appearances. -->\\n  <div class=\\\"mat-form-field-underline\\\" #underline\\n       *ngIf=\\\"appearance != 'outline'\\\">\\n    <span class=\\\"mat-form-field-ripple\\\"\\n          [class.mat-accent]=\\\"color == 'accent'\\\"\\n          [class.mat-warn]=\\\"color == 'warn'\\\"></span>\\n  </div>\\n\\n  <div class=\\\"mat-form-field-subscript-wrapper\\\"\\n       [ngSwitch]=\\\"_getDisplayedMessages()\\\">\\n    <div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <ng-content select=\\\"mat-error\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\"\\n      [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <!-- TODO(mmalerba): use an actual <mat-hint> once all selectors are switched to mat-* -->\\n      <div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div>\\n      <ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content>\\n      <div class=\\\"mat-form-field-hint-spacer\\\"></div>\\n      <ng-content select=\\\"mat-hint[align='end']\\\"></ng-content>\\n    </div>\\n  </div>\\n</div>\\n\",\n                animations: [matFormFieldAnimations.transitionMessages],\n                host: {\n                    'class': 'mat-form-field',\n                    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n                    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n                    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n                    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n                    '[class.mat-form-field-invalid]': '_control.errorState',\n                    '[class.mat-form-field-can-float]': '_canLabelFloat()',\n                    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n                    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n                    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n                    '[class.mat-form-field-disabled]': '_control.disabled',\n                    '[class.mat-form-field-autofilled]': '_control.autofilled',\n                    '[class.mat-focused]': '_control.focused',\n                    '[class.mat-accent]': 'color == \"accent\"',\n                    '[class.mat-warn]': 'color == \"warn\"',\n                    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n                    '[class.ng-touched]': '_shouldForward(\"touched\")',\n                    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n                    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n                    '[class.ng-valid]': '_shouldForward(\"valid\")',\n                    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n                    '[class.ng-pending]': '_shouldForward(\"pending\")',\n                    '[class._mat-animation-noopable]': '!_animationsEnabled'\n                },\n                inputs: ['color'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [\n                    { provide: MAT_FORM_FIELD, useExisting: MatFormField },\n                ],\n                styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}.cdk-high-contrast-active .mat-form-field-infix{border-image:linear-gradient(transparent, transparent)}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}[dir=rtl] .mat-form-field-label-wrapper{left:auto;right:0}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),width 400ms cubic-bezier(0.25, 0.8, 0.25, 1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-empty.mat-form-field-label,.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scale3d(1, 1.0001, 1)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(0.5);opacity:0;transition:background-color 300ms cubic-bezier(0.55, 0, 0.55, 0.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:scaleX(1);transition:transform 300ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 300ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-subscript-wrapper .mat-icon,.mat-form-field-label-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none}\\n\", \".mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:\\\"\\\";display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em}\\n\", \".mat-input-element{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date],.mat-input-element[type=datetime],.mat-input-element[type=datetime-local],.mat-input-element[type=month],.mat-input-element[type=week],.mat-input-element[type=time]{line-height:1}.mat-input-element[type=date]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=month]::after,.mat-input-element[type=week]::after,.mat-input-element[type=time]::after{content:\\\" \\\";white-space:pre;width:1px}.mat-input-element::-webkit-inner-spin-button,.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button{font-size:.75em}.mat-input-element::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-moz-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-moz-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-webkit-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-webkit-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element:-ms-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element:-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-ms-expand{display:none}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}select.mat-input-element::-ms-value{color:inherit;background:none}.mat-focused .cdk-high-contrast-active select.mat-input-element::-ms-value{color:inherit}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px;pointer-events:none}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select .mat-input-element{padding-right:15px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-input-element{padding-right:0;padding-left:15px}.mat-form-field-type-mat-native-select .mat-form-field-label-wrapper{max-width:calc(100% - 10px)}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\\n\", \".mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px}\\n\", \".mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-0.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-end{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap{border-width:2px}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap{transition:none}\\n\", \".mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:2px}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_LABEL_GLOBAL_OPTIONS]\n            }] }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD_DEFAULT_OPTIONS]\n            }] }, { type: ɵngcc2.Platform }, { type: ɵngcc0.NgZone }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { floatLabel: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], hideRequiredMarker: [{\n            type: Input\n        }], hintLabel: [{\n            type: Input\n        }], underlineRef: [{\n            type: ViewChild,\n            args: ['underline']\n        }], _connectionContainerRef: [{\n            type: ViewChild,\n            args: ['connectionContainer', { static: true }]\n        }], _inputContainerRef: [{\n            type: ViewChild,\n            args: ['inputContainer']\n        }], _label: [{\n            type: ViewChild,\n            args: ['label']\n        }], _controlNonStatic: [{\n            type: ContentChild,\n            args: [MatFormFieldControl]\n        }], _controlStatic: [{\n            type: ContentChild,\n            args: [MatFormFieldControl, { static: true }]\n        }], _labelChildNonStatic: [{\n            type: ContentChild,\n            args: [MatLabel]\n        }], _labelChildStatic: [{\n            type: ContentChild,\n            args: [MatLabel, { static: true }]\n        }], _placeholderChild: [{\n            type: ContentChild,\n            args: [MatPlaceholder]\n        }], _errorChildren: [{\n            type: ContentChildren,\n            args: [MAT_ERROR, { descendants: true }]\n        }], _hintChildren: [{\n            type: ContentChildren,\n            args: [_MAT_HINT, { descendants: true }]\n        }], _prefixChildren: [{\n            type: ContentChildren,\n            args: [MAT_PREFIX, { descendants: true }]\n        }], _suffixChildren: [{\n            type: ContentChildren,\n            args: [MAT_SUFFIX, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatFormFieldModule {\n}\nMatFormFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatFormFieldModule });\nMatFormFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatFormFieldModule_Factory(t) { return new (t || MatFormFieldModule)(); }, imports: [[\n            CommonModule,\n            MatCommonModule,\n            ObserversModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatFormFieldModule, { declarations: function () { return [MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix]; }, imports: function () { return [CommonModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [MatCommonModule, MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatFormFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    MatError,\n                    MatFormField,\n                    MatHint,\n                    MatLabel,\n                    MatPlaceholder,\n                    MatPrefix,\n                    MatSuffix,\n                ],\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    MatCommonModule,\n                    MatError,\n                    MatFormField,\n                    MatHint,\n                    MatLabel,\n                    MatPlaceholder,\n                    MatPrefix,\n                    MatSuffix,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_ERROR, MAT_FORM_FIELD, MAT_FORM_FIELD_DEFAULT_OPTIONS, MAT_PREFIX, MAT_SUFFIX, MatError, MatFormField, MatFormFieldControl, MatFormFieldModule, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix, _MAT_HINT, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, getMatFormFieldPlaceholderConflictError, matFormFieldAnimations };\n\n//# sourceMappingURL=form-field.js.map","import { ɵɵdefineInjectable, ɵɵinject, PLATFORM_ID, Injectable, Inject, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nimport * as ɵngcc0 from '@angular/core';\nlet hasV8BreakIterator;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n    hasV8BreakIterator = (typeof Intl !== 'undefined' && Intl.v8BreakIterator);\n}\ncatch (_a) {\n    hasV8BreakIterator = false;\n}\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\nclass Platform {\n    constructor(_platformId) {\n        this._platformId = _platformId;\n        // We want to use the Angular platform check because if the Document is shimmed\n        // without the navigator, the following checks will fail. This is preferred because\n        // sometimes the Document may be shimmed without the user's knowledge or intention\n        /** Whether the Angular application is being rendered in the browser. */\n        this.isBrowser = this._platformId ?\n            isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n        /** Whether the current browser is Microsoft Edge. */\n        this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n        /** Whether the current rendering engine is Microsoft Trident. */\n        this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n        // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n        /** Whether the current rendering engine is Blink. */\n        this.BLINK = this.isBrowser && (!!(window.chrome || hasV8BreakIterator) &&\n            typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);\n        // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n        // ensure that Webkit runs standalone and is not used as another engine's base.\n        /** Whether the current rendering engine is WebKit. */\n        this.WEBKIT = this.isBrowser &&\n            /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n        /** Whether the current platform is Apple iOS. */\n        this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n            !('MSStream' in window);\n        // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n        // them self as Gecko-like browsers and modify the userAgent's according to that.\n        // Since we only cover one explicit Firefox case, we can simply check for Firefox\n        // instead of having an unstable check for Gecko.\n        /** Whether the current browser is Firefox. */\n        this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n        /** Whether the current platform is Android. */\n        // Trident on mobile adds the android platform to the userAgent to trick detections.\n        this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n        // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n        // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n        // Safari browser should also use Webkit as its layout engine.\n        /** Whether the current browser is Safari. */\n        this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n    }\n}\nPlatform.ɵfac = function Platform_Factory(t) { return new (t || Platform)(ɵngcc0.ɵɵinject(PLATFORM_ID)); };\nPlatform.ɵprov = ɵɵdefineInjectable({ factory: function Platform_Factory() { return new Platform(ɵɵinject(PLATFORM_ID)); }, token: Platform, providedIn: \"root\" });\nPlatform.ctorParameters = () => [\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Platform, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass PlatformModule {\n}\nPlatformModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PlatformModule });\nPlatformModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PlatformModule_Factory(t) { return new (t || PlatformModule)(); } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PlatformModule, [{\n        type: NgModule,\n        args: [{}]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes;\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n    // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n    // first changing it to something else:\n    // The specified value \"\" does not conform to the required format.\n    // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n    'color',\n    'button',\n    'checkbox',\n    'date',\n    'datetime-local',\n    'email',\n    'file',\n    'hidden',\n    'image',\n    'month',\n    'number',\n    'password',\n    'radio',\n    'range',\n    'reset',\n    'search',\n    'submit',\n    'tel',\n    'text',\n    'time',\n    'url',\n    'week',\n];\n/** @returns The input types supported by this browser. */\nfunction getSupportedInputTypes() {\n    // Result is cached.\n    if (supportedInputTypes) {\n        return supportedInputTypes;\n    }\n    // We can't check if an input type is not supported until we're on the browser, so say that\n    // everything is supported when not on the browser. We don't use `Platform` here since it's\n    // just a helper function and can't inject it.\n    if (typeof document !== 'object' || !document) {\n        supportedInputTypes = new Set(candidateInputTypes);\n        return supportedInputTypes;\n    }\n    let featureTestInput = document.createElement('input');\n    supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n        featureTestInput.setAttribute('type', value);\n        return featureTestInput.type === value;\n    }));\n    return supportedInputTypes;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents;\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nfunction supportsPassiveEventListeners() {\n    if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n        try {\n            window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n                get: () => supportsPassiveEvents = true\n            }));\n        }\n        finally {\n            supportsPassiveEvents = supportsPassiveEvents || false;\n        }\n    }\n    return supportsPassiveEvents;\n}\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param options Object to be normalized.\n */\nfunction normalizePassiveListenerOptions(options) {\n    return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType;\n/** Check whether the browser supports scroll behaviors. */\nfunction supportsScrollBehavior() {\n    return !!(typeof document == 'object' && 'scrollBehavior' in document.documentElement.style);\n}\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nfunction getRtlScrollAxisType() {\n    // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n    if (typeof document !== 'object' || !document) {\n        return 0 /* NORMAL */;\n    }\n    if (rtlScrollAxisType == null) {\n        // Create a 1px wide scrolling container and a 2px wide content element.\n        const scrollContainer = document.createElement('div');\n        const containerStyle = scrollContainer.style;\n        scrollContainer.dir = 'rtl';\n        containerStyle.width = '1px';\n        containerStyle.overflow = 'auto';\n        containerStyle.visibility = 'hidden';\n        containerStyle.pointerEvents = 'none';\n        containerStyle.position = 'absolute';\n        const content = document.createElement('div');\n        const contentStyle = content.style;\n        contentStyle.width = '2px';\n        contentStyle.height = '1px';\n        scrollContainer.appendChild(content);\n        document.body.appendChild(scrollContainer);\n        rtlScrollAxisType = 0 /* NORMAL */;\n        // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n        // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n        // dealing with one of the other two types of browsers.\n        if (scrollContainer.scrollLeft === 0) {\n            // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n            // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n            // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n            // return 0 when we read it again.\n            scrollContainer.scrollLeft = 1;\n            rtlScrollAxisType =\n                scrollContainer.scrollLeft === 0 ? 1 /* NEGATED */ : 2 /* INVERTED */;\n        }\n        scrollContainer.parentNode.removeChild(scrollContainer);\n    }\n    return rtlScrollAxisType;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet shadowDomIsSupported;\n/** Checks whether the user's browser support Shadow DOM. */\nfunction _supportsShadowDom() {\n    if (shadowDomIsSupported == null) {\n        const head = typeof document !== 'undefined' ? document.head : null;\n        shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));\n    }\n    return shadowDomIsSupported;\n}\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nfunction _getShadowRoot(element) {\n    if (_supportsShadowDom()) {\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n        // Note that this should be caught by `_supportsShadowDom`, but some\n        // teams have been able to hit this code path on unsupported browsers.\n        if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n            return rootNode;\n        }\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Platform, PlatformModule, _getShadowRoot, _supportsShadowDom, getRtlScrollAxisType, getSupportedInputTypes, normalizePassiveListenerOptions, supportsPassiveEventListeners, supportsScrollBehavior };\n\n//# sourceMappingURL=platform.js.map","export const DAYS_OF_WEEK: string[] = (() => {\n  const locale = navigator.languages?.length\n    ? navigator.languages[0]\n    : navigator.language;\n  const now = new Date();\n  now.setDate(now.getDate() - now.getDay());\n  const [y, m, d] = [now.getFullYear(), now.getMonth(), now.getDate()];\n  const options = { weekday: 'short' };\n  return Array.from(Array(7)).map((_, i) =>\n    new Date(y, m, d + i).toLocaleDateString(locale, options)\n  );\n})();\n","import { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function observeOn(scheduler, delay = 0) {\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nexport class ObserveOnOperator {\n    constructor(scheduler, delay = 0) {\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    }\n}\nexport class ObserveOnSubscriber extends Subscriber {\n    constructor(destination, scheduler, delay = 0) {\n        super(destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    static dispatch(arg) {\n        const { notification, destination } = arg;\n        notification.observe(destination);\n        this.unsubscribe();\n    }\n    scheduleMessage(notification) {\n        const destination = this.destination;\n        destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    }\n    _next(value) {\n        this.scheduleMessage(Notification.createNext(value));\n    }\n    _error(err) {\n        this.scheduleMessage(Notification.createError(err));\n        this.unsubscribe();\n    }\n    _complete() {\n        this.scheduleMessage(Notification.createComplete());\n        this.unsubscribe();\n    }\n}\nexport class ObserveOnMessage {\n    constructor(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n}\n//# sourceMappingURL=observeOn.js.map","import { normalizePassiveListenerOptions, Platform, PlatformModule } from '@angular/cdk/platform';\nimport { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, EventEmitter, Directive, ElementRef, Output, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options to pass to the animationstart listener. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject.asObservable();\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            }\n        });\n        return result.asObservable();\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n}\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) { return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nAutofillMonitor.ɵprov = ɵɵdefineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(ɵɵinject(Platform), ɵɵinject(NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\nAutofillMonitor.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, null); })();\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) { return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor)); };\nCdkAutofill.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAutofill, selectors: [[\"\", \"cdkAutofill\", \"\"]], outputs: { cdkAutofill: \"cdkAutofill\" } });\nCdkAutofill.ctorParameters = () => [\n    { type: ElementRef },\n    { type: AutofillMonitor }\n];\nCdkAutofill.propDecorators = {\n    cdkAutofill: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAutofill]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: AutofillMonitor }]; }, { cdkAutofill: [{\n            type: Output\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n        this._measuringClass = _platform.FIREFOX ?\n            'cdk-textarea-autosize-measuring-firefox' :\n            'cdk-textarea-autosize-measuring';\n    }\n    /** Minimum amount of rows in the textarea. */\n    get minRows() { return this._minRows; }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() { return this._maxRows; }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ?\n            `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ?\n            `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n            });\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        this._textareaElement.parentNode.removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const placeholderText = textarea.placeholder;\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n        // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n        // need to be removed temporarily.\n        textarea.classList.add(this._measuringClass);\n        textarea.placeholder = '';\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const height = textarea.scrollHeight - 4;\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        textarea.classList.remove(this._measuringClass);\n        textarea.placeholder = placeholderText;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        const document = this._getDocument();\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n}\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) { return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8)); };\nCdkTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTextareaAutosize, selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"], hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() { return ctx._noopInputHandler(); });\n    } }, inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"] }, exportAs: [\"cdkTextareaAutosize\"] });\nCdkTextareaAutosize.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nCdkTextareaAutosize.propDecorators = {\n    minRows: [{ type: Input, args: ['cdkAutosizeMinRows',] }],\n    maxRows: [{ type: Input, args: ['cdkAutosizeMaxRows',] }],\n    enabled: [{ type: Input, args: ['cdkTextareaAutosize',] }],\n    _noopInputHandler: [{ type: HostListener, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[cdkTextareaAutosize]',\n                exportAs: 'cdkTextareaAutosize',\n                host: {\n                    'class': 'cdk-textarea-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { minRows: [{\n            type: Input,\n            args: ['cdkAutosizeMinRows']\n        }], maxRows: [{\n            type: Input,\n            args: ['cdkAutosizeMaxRows']\n        }], enabled: [{\n            type: Input,\n            args: ['cdkTextareaAutosize']\n        }], _noopInputHandler: [{\n            type: HostListener,\n            args: ['input']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass TextFieldModule {\n}\nTextFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TextFieldModule });\nTextFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TextFieldModule_Factory(t) { return new (t || TextFieldModule)(); }, imports: [[PlatformModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, { declarations: function () { return [CdkAutofill, CdkTextareaAutosize]; }, imports: function () { return [PlatformModule]; }, exports: function () { return [CdkAutofill, CdkTextareaAutosize]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkAutofill, CdkTextareaAutosize],\n                imports: [PlatformModule],\n                exports: [CdkAutofill, CdkTextareaAutosize]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n\n//# sourceMappingURL=text-field.js.map","import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nimport * as ɵngcc5 from '@angular/material/form-field';\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n    get matAutosizeMinRows() { return this.minRows; }\n    set matAutosizeMinRows(value) { this.minRows = value; }\n    get matAutosizeMaxRows() { return this.maxRows; }\n    set matAutosizeMaxRows(value) { this.maxRows = value; }\n    get matAutosize() { return this.enabled; }\n    set matAutosize(value) { this.enabled = value; }\n    get matTextareaAutosize() { return this.enabled; }\n    set matTextareaAutosize(value) { this.enabled = value; }\n}\nMatTextareaAutosize.ɵfac = function MatTextareaAutosize_Factory(t) { return ɵMatTextareaAutosize_BaseFactory(t || MatTextareaAutosize); };\nMatTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTextareaAutosize, selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"], inputs: { cdkAutosizeMinRows: \"cdkAutosizeMinRows\", cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\", matAutosizeMinRows: \"matAutosizeMinRows\", matAutosizeMaxRows: \"matAutosizeMaxRows\", matAutosize: [\"mat-autosize\", \"matAutosize\"], matTextareaAutosize: \"matTextareaAutosize\" }, exportAs: [\"matTextareaAutosize\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTextareaAutosize.propDecorators = {\n    matAutosizeMinRows: [{ type: Input }],\n    matAutosizeMaxRows: [{ type: Input }],\n    matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n    matTextareaAutosize: [{ type: Input }]\n};\nconst ɵMatTextareaAutosize_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], null, { matAutosizeMinRows: [{\n            type: Input\n        }], matAutosizeMaxRows: [{\n            type: Input\n        }], matAutosize: [{\n            type: Input,\n            args: ['mat-autosize']\n        }], matTextareaAutosize: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatInputMixinBase = mixinErrorState(MatInputBase);\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputMixinBase {\n    constructor(_elementRef, _platform, \n    /** @docs-private */\n    ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // @breaking-change 8.0.0 `_formField` parameter to be made required.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this.ngControl = ngControl;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._required = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(t => getSupportedInputTypes().has(t));\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', (event) => {\n                    let el = event.target;\n                    if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                });\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() { return this._id; }\n    set id(value) { this._id = value || this._uid; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Input type of the element. */\n    get type() { return this._type; }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._inputValueAccessor.value; }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() { return this._readonly; }\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const formField = this._formField;\n        const placeholder = (!formField || !formField._hideControlPlaceholder()) ? this.placeholder : null;\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder ?\n                element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n        }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n            !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return this.focused || selectElement.multiple || !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n}\nMatInput.ɵfac = function MatInput_Factory(t) { return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.MatFormField, 8)); };\nMatInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatInput, selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]], hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"], hostVars: 10, hostBindings: function MatInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() { return ctx._focusChanged(true); })(\"blur\", function MatInput_blur_HostBindingHandler() { return ctx._focusChanged(false); })(\"input\", function MatInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"data-placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-invalid\", ctx.errorState)(\"aria-required\", ctx.required.toString());\n        ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n    } }, inputs: { id: \"id\", disabled: \"disabled\", required: \"required\", type: \"type\", value: \"value\", readonly: \"readonly\", placeholder: \"placeholder\", errorStateMatcher: \"errorStateMatcher\" }, exportAs: [\"matInput\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatInput }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n    { type: AutofillMonitor },\n    { type: NgZone },\n    { type: MatFormField, decorators: [{ type: Optional }] }\n];\nMatInput.propDecorators = {\n    disabled: [{ type: Input }],\n    id: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    type: [{ type: Input }],\n    errorStateMatcher: [{ type: Input }],\n    value: [{ type: Input }],\n    readonly: [{ type: Input }],\n    _focusChanged: [{ type: HostListener, args: ['focus', ['true'],] }, { type: HostListener, args: ['blur', ['false'],] }],\n    _onInput: [{ type: HostListener, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatInput, [{\n        type: Directive,\n        args: [{\n                selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                exportAs: 'matInput',\n                host: {\n                    /**\n                     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                     */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    // At the time of writing, we have a lot of customer tests that look up the input based on its\n                    // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                    // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                    '[attr.data-placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-required]': 'required.toString()'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc2.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc2.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [MAT_INPUT_VALUE_ACCESSOR]\n            }] }, { type: ɵngcc4.AutofillMonitor }, { type: ɵngcc0.NgZone }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }] }]; }, { id: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], readonly: [{\n            type: Input\n        }], _focusChanged: [{\n            type: HostListener,\n            args: ['focus', ['true']]\n        }, {\n            type: HostListener,\n            args: ['blur', ['false']]\n        }], _onInput: [{\n            type: HostListener,\n            args: ['input']\n        }], placeholder: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {\n}\nMatInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatInputModule });\nMatInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatInputModule_Factory(t) { return new (t || MatInputModule)(); }, providers: [ErrorStateMatcher], imports: [[\n            TextFieldModule,\n            MatFormFieldModule,\n        ], TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, { declarations: function () { return [MatInput, MatTextareaAutosize]; }, imports: function () { return [TextFieldModule,\n        MatFormFieldModule]; }, exports: function () { return [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule, MatInput, MatTextareaAutosize]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    TextFieldModule,\n                    MatFormFieldModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                    // be used together with `MatFormField`.\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };\n\n//# sourceMappingURL=input.js.map","import { AsyncAction } from './AsyncAction';\nexport class QueueAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    schedule(state, delay = 0) {\n        if (delay > 0) {\n            return super.schedule(state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    }\n    execute(state, delay) {\n        return (delay > 0 || this.closed) ?\n            super.execute(state, delay) :\n            this._execute(state, delay);\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        return scheduler.flush(this);\n    }\n}\n//# sourceMappingURL=QueueAction.js.map","import { AsyncScheduler } from './AsyncScheduler';\nexport class QueueScheduler extends AsyncScheduler {\n}\n//# sourceMappingURL=QueueScheduler.js.map","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\nexport const queue = new QueueScheduler(QueueAction);\n//# sourceMappingURL=queue.js.map","import { DOCUMENT } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, QueryList, isDevMode, NgZone, Directive, ElementRef, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport { Platform, normalizePassiveListenerOptions, _getShadowRoot, PlatformModule } from '@angular/cdk/platform';\nimport { Subject, Subscription, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** IDs are delimited by an empty space, as per the spec. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nconst ID_DELIMITER = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction addAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    if (ids.some(existingId => existingId.trim() == id.trim())) {\n        return;\n    }\n    ids.push(id.trim());\n    el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction removeAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    const filteredIds = ids.filter(val => val != id.trim());\n    if (filteredIds.length) {\n        el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n    }\n    else {\n        el.removeAttribute(attr);\n    }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction getAriaReferenceIds(el, attr) {\n    // Get string array of all individual ids (whitespace delimited) in the attribute value\n    return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** ID used for the body container where all messages are appended. */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/** ID prefix used for each created message element. */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/** Attribute given to each host element that is described by a message element. */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n/** Global map of all registered message elements that have been placed into the document. */\nconst messageRegistry = new Map();\n/** Container for all registered messages. */\nlet messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\nclass AriaDescriber {\n    constructor(_document, \n    /**\n     * @breaking-change 8.0.0 `_platform` parameter to be made required.\n     */\n    _platform) {\n        this._platform = _platform;\n        this._document = _document;\n    }\n    /**\n     * Adds to the host element an aria-describedby reference to a hidden element that contains\n     * the message. If the same message has already been registered, then it will reuse the created\n     * message element.\n     */\n    describe(hostElement, message) {\n        if (!this._canBeDescribed(hostElement, message)) {\n            return;\n        }\n        if (typeof message !== 'string') {\n            // We need to ensure that the element has an ID.\n            this._setMessageId(message);\n            messageRegistry.set(message, { messageElement: message, referenceCount: 0 });\n        }\n        else if (!messageRegistry.has(message)) {\n            this._createMessageElement(message);\n        }\n        if (!this._isElementDescribedByMessage(hostElement, message)) {\n            this._addMessageReference(hostElement, message);\n        }\n    }\n    /** Removes the host element's aria-describedby reference to the message element. */\n    removeDescription(hostElement, message) {\n        if (!message || !this._isElementNode(hostElement)) {\n            return;\n        }\n        if (this._isElementDescribedByMessage(hostElement, message)) {\n            this._removeMessageReference(hostElement, message);\n        }\n        // If the message is a string, it means that it's one that we created for the\n        // consumer so we can remove it safely, otherwise we should leave it in place.\n        if (typeof message === 'string') {\n            const registeredMessage = messageRegistry.get(message);\n            if (registeredMessage && registeredMessage.referenceCount === 0) {\n                this._deleteMessageElement(message);\n            }\n        }\n        if (messagesContainer && messagesContainer.childNodes.length === 0) {\n            this._deleteMessagesContainer();\n        }\n    }\n    /** Unregisters all created message elements and removes the message container. */\n    ngOnDestroy() {\n        const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n        for (let i = 0; i < describedElements.length; i++) {\n            this._removeCdkDescribedByReferenceIds(describedElements[i]);\n            describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n        }\n        if (messagesContainer) {\n            this._deleteMessagesContainer();\n        }\n        messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     */\n    _createMessageElement(message) {\n        const messageElement = this._document.createElement('div');\n        this._setMessageId(messageElement);\n        messageElement.textContent = message;\n        this._createMessagesContainer();\n        messagesContainer.appendChild(messageElement);\n        messageRegistry.set(message, { messageElement, referenceCount: 0 });\n    }\n    /** Assigns a unique ID to an element, if it doesn't have one already. */\n    _setMessageId(element) {\n        if (!element.id) {\n            element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`;\n        }\n    }\n    /** Deletes the message element from the global messages container. */\n    _deleteMessageElement(message) {\n        const registeredMessage = messageRegistry.get(message);\n        const messageElement = registeredMessage && registeredMessage.messageElement;\n        if (messagesContainer && messageElement) {\n            messagesContainer.removeChild(messageElement);\n        }\n        messageRegistry.delete(message);\n    }\n    /** Creates the global container for all aria-describedby messages. */\n    _createMessagesContainer() {\n        if (!messagesContainer) {\n            // @breaking-change 8.0.0 `_platform` null check can be removed once the parameter is required\n            const canBeAriaHidden = !this._platform || (!this._platform.EDGE && !this._platform.TRIDENT);\n            const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\n            // When going from the server to the client, we may end up in a situation where there's\n            // already a container on the page, but we don't have a reference to it. Clear the\n            // old container so we don't get duplicates. Doing this, instead of emptying the previous\n            // container, should be slightly faster.\n            if (preExistingContainer) {\n                preExistingContainer.parentNode.removeChild(preExistingContainer);\n            }\n            messagesContainer = this._document.createElement('div');\n            messagesContainer.id = MESSAGES_CONTAINER_ID;\n            messagesContainer.classList.add('cdk-visually-hidden');\n            // IE and Edge won't read out the messages if they're in an `aria-hidden` container.\n            // We only disable `aria-hidden` for these platforms, because it comes with the\n            // disadvantage that people might hit the messages when they've navigated past\n            // the end of the document using the arrow keys.\n            messagesContainer.setAttribute('aria-hidden', canBeAriaHidden + '');\n            this._document.body.appendChild(messagesContainer);\n        }\n    }\n    /** Deletes the global messages container. */\n    _deleteMessagesContainer() {\n        if (messagesContainer && messagesContainer.parentNode) {\n            messagesContainer.parentNode.removeChild(messagesContainer);\n            messagesContainer = null;\n        }\n    }\n    /** Removes all cdk-describedby messages that are hosted through the element. */\n    _removeCdkDescribedByReferenceIds(element) {\n        // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n        const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\n            .filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     */\n    _addMessageReference(element, message) {\n        const registeredMessage = messageRegistry.get(message);\n        // Add the aria-describedby reference and set the\n        // describedby_host attribute to mark the element.\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n        registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     */\n    _removeMessageReference(element, message) {\n        const registeredMessage = messageRegistry.get(message);\n        registeredMessage.referenceCount--;\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /** Returns true if the element has been described by the provided message ID. */\n    _isElementDescribedByMessage(element, message) {\n        const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n        const registeredMessage = messageRegistry.get(message);\n        const messageId = registeredMessage && registeredMessage.messageElement.id;\n        return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /** Determines whether a message can be described on a particular element. */\n    _canBeDescribed(element, message) {\n        if (!this._isElementNode(element)) {\n            return false;\n        }\n        if (message && typeof message === 'object') {\n            // We'd have to make some assumptions about the description element's text, if the consumer\n            // passed in an element. Assume that if an element is passed in, the consumer has verified\n            // that it can be used as a description.\n            return true;\n        }\n        const trimmedMessage = message == null ? '' : `${message}`.trim();\n        const ariaLabel = element.getAttribute('aria-label');\n        // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n        // element, because screen readers will end up reading out the same text twice in a row.\n        return trimmedMessage ? (!ariaLabel || ariaLabel.trim() !== trimmedMessage) : false;\n    }\n    /** Checks whether a node is an Element node. */\n    _isElementNode(element) {\n        return element.nodeType === this._document.ELEMENT_NODE;\n    }\n}\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) { return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nAriaDescriber.ɵprov = ɵɵdefineInjectable({ factory: function AriaDescriber_Factory() { return new AriaDescriber(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: AriaDescriber, providedIn: \"root\" });\nAriaDescriber.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AriaDescriber, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc1.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nclass ListKeyManager {\n    constructor(_items) {\n        this._items = _items;\n        this._activeItemIndex = -1;\n        this._activeItem = null;\n        this._wrap = false;\n        this._letterKeyStream = new Subject();\n        this._typeaheadSubscription = Subscription.EMPTY;\n        this._vertical = true;\n        this._allowedModifierKeys = [];\n        this._homeAndEnd = false;\n        /**\n         * Predicate function that can be used to check whether an item should be skipped\n         * by the key manager. By default, disabled items are skipped.\n         */\n        this._skipPredicateFn = (item) => item.disabled;\n        // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n        this._pressedLetters = [];\n        /**\n         * Stream that emits any time the TAB key is pressed, so components can react\n         * when focus is shifted off of the list.\n         */\n        this.tabOut = new Subject();\n        /** Stream that emits whenever the active item of the list manager changes. */\n        this.change = new Subject();\n        // We allow for the items to be an array because, in some cases, the consumer may\n        // not have access to a QueryList of the items they want to manage (e.g. when the\n        // items aren't being collected via `ViewChildren` or `ContentChildren`).\n        if (_items instanceof QueryList) {\n            _items.changes.subscribe((newItems) => {\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @param predicate Function that determines whether the given item should be skipped.\n     */\n    skipPredicate(predicate) {\n        this._skipPredicateFn = predicate;\n        return this;\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @param shouldWrap Whether the list should wrap when reaching the end.\n     */\n    withWrap(shouldWrap = true) {\n        this._wrap = shouldWrap;\n        return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled = true) {\n        this._vertical = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction) {\n        this._horizontal = direction;\n        return this;\n    }\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     */\n    withAllowedModifierKeys(keys) {\n        this._allowedModifierKeys = keys;\n        return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval = 200) {\n        if (this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n        this._typeaheadSubscription.unsubscribe();\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n        // and convert those letters back into a string. Afterwards find the first item that starts\n        // with that string and select it.\n        this._typeaheadSubscription = this._letterKeyStream.pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join(''))).subscribe(inputString => {\n            const items = this._getItemsArray();\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n                if (!this._skipPredicateFn(item) &&\n                    item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n            this._pressedLetters = [];\n        });\n        return this;\n    }\n    /**\n     * Configures the key manager to focus the first and last items\n     * respectively when the Home key and End Key are pressed.\n     */\n    withHomeAndEnd() {\n        this._homeAndEnd = true;\n        return this;\n    }\n    setActiveItem(item) {\n        const previousActiveItem = this._activeItem;\n        this.updateActiveItem(item);\n        if (this._activeItem !== previousActiveItem) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    onKeydown(event) {\n        const keyCode = event.keyCode;\n        const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n        const isModifierAllowed = modifiers.every(modifier => {\n            return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n        });\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n                return;\n            case DOWN_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case UP_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case RIGHT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case LEFT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case HOME:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setFirstItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case END:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setLastItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            default:\n                if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n                    // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                    // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                    if (event.key && event.key.length === 1) {\n                        this._letterKeyStream.next(event.key.toLocaleUpperCase());\n                    }\n                    else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                        this._letterKeyStream.next(String.fromCharCode(keyCode));\n                    }\n                }\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n        this._pressedLetters = [];\n        event.preventDefault();\n    }\n    /** Index of the currently active item. */\n    get activeItemIndex() {\n        return this._activeItemIndex;\n    }\n    /** The active item. */\n    get activeItem() {\n        return this._activeItem;\n    }\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n    isTyping() {\n        return this._pressedLetters.length > 0;\n    }\n    /** Sets the active item to the first enabled item in the list. */\n    setFirstItemActive() {\n        this._setActiveItemByIndex(0, 1);\n    }\n    /** Sets the active item to the last enabled item in the list. */\n    setLastItemActive() {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /** Sets the active item to the next enabled item in the list. */\n    setNextItemActive() {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /** Sets the active item to a previous enabled item in the list. */\n    setPreviousItemActive() {\n        this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n    updateActiveItem(item) {\n        const itemArray = this._getItemsArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n        const activeItem = itemArray[index];\n        // Explicitly check for `null` and `undefined` because other falsy values are valid.\n        this._activeItem = activeItem == null ? null : activeItem;\n        this._activeItemIndex = index;\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    _setActiveItemByDelta(delta) {\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    _setActiveInWrapMode(delta) {\n        const items = this._getItemsArray();\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            const item = items[index];\n            if (!this._skipPredicateFn(item)) {\n                this.setActiveItem(index);\n                return;\n            }\n        }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    _setActiveInDefaultMode(delta) {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    _setActiveItemByIndex(index, fallbackDelta) {\n        const items = this._getItemsArray();\n        if (!items[index]) {\n            return;\n        }\n        while (this._skipPredicateFn(items[index])) {\n            index += fallbackDelta;\n            if (!items[index]) {\n                return;\n            }\n        }\n        this.setActiveItem(index);\n    }\n    /** Returns the items as an array. */\n    _getItemsArray() {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ActiveDescendantKeyManager extends ListKeyManager {\n    setActiveItem(index) {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n        super.setActiveItem(index);\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass FocusKeyManager extends ListKeyManager {\n    constructor() {\n        super(...arguments);\n        this._origin = 'program';\n    }\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for the isFocusable method.\n */\nclass IsFocusableConfig {\n    constructor() {\n        /**\n         * Whether to count an element as focusable even if it is not currently visible.\n         */\n        this.ignoreVisibility = false;\n    }\n}\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nclass InteractivityChecker {\n    constructor(_platform) {\n        this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is disabled.\n     */\n    isDisabled(element) {\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\n        // a form control inside of a disabled form, but should capture the most common cases.\n        return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @returns Whether the element is visible.\n     */\n    isVisible(element) {\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is tabbable.\n     */\n    isTabbable(element) {\n        // Nothing is tabbable on the server 😎\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n        const frameElement = getFrameElement(getWindow(element));\n        if (frameElement) {\n            // Frame elements inherit their tabindex onto all child elements.\n            if (getTabIndexValue(frameElement) === -1) {\n                return false;\n            }\n            // Browsers disable tabbing to an element inside of an invisible frame.\n            if (!this.isVisible(frameElement)) {\n                return false;\n            }\n        }\n        let nodeName = element.nodeName.toLowerCase();\n        let tabIndexValue = getTabIndexValue(element);\n        if (element.hasAttribute('contenteditable')) {\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'iframe' || nodeName === 'object') {\n            // The frame or object's content may be tabbable depending on the content, but it's\n            // not possibly to reliably detect the content of the frames. We always consider such\n            // elements as non-tabbable.\n            return false;\n        }\n        // In iOS, the browser only considers some specific elements as tabbable.\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n            return false;\n        }\n        if (nodeName === 'audio') {\n            // Audio elements without controls enabled are never tabbable, regardless\n            // of the tabindex attribute explicitly being set.\n            if (!element.hasAttribute('controls')) {\n                return false;\n            }\n            // Audio elements with controls are by default tabbable unless the\n            // tabindex attribute is set to `-1` explicitly.\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'video') {\n            // For all video elements, if the tabindex attribute is set to `-1`, the video\n            // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n            // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n            // tabindex attribute is the source of truth here.\n            if (tabIndexValue === -1) {\n                return false;\n            }\n            // If the tabindex is explicitly set, and not `-1` (as per check before), the\n            // video element is always tabbable (regardless of whether it has controls or not).\n            if (tabIndexValue !== null) {\n                return true;\n            }\n            // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n            // has controls enabled. Firefox is special as videos are always tabbable regardless\n            // of whether there are controls or not.\n            return this._platform.FIREFOX || element.hasAttribute('controls');\n        }\n        return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param element Element to be checked.\n     * @param config The config object with options to customize this method's behavior\n     * @returns Whether the element is focusable.\n     */\n    isFocusable(element, config) {\n        // Perform checks in order of left to most expensive.\n        // Again, naive approach that does not capture many edge cases and browser quirks.\n        return isPotentiallyFocusable(element) && !this.isDisabled(element) &&\n            ((config === null || config === void 0 ? void 0 : config.ignoreVisibility) || this.isVisible(element));\n    }\n}\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) { return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nInteractivityChecker.ɵprov = ɵɵdefineInjectable({ factory: function InteractivityChecker_Factory() { return new InteractivityChecker(ɵɵinject(Platform)); }, token: InteractivityChecker, providedIn: \"root\" });\nInteractivityChecker.ctorParameters = () => [\n    { type: Platform }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InteractivityChecker, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window) {\n    try {\n        return window.frameElement;\n    }\n    catch (_a) {\n        return null;\n    }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element) {\n    // Use logic from jQuery to check for an invisible element.\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n    return !!(element.offsetWidth || element.offsetHeight ||\n        (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n/** Gets whether an element's  */\nfunction isNativeFormElement(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    return nodeName === 'input' ||\n        nodeName === 'select' ||\n        nodeName === 'button' ||\n        nodeName === 'textarea';\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element) {\n    return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element) {\n    return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\nfunction isInputElement(element) {\n    return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element) {\n    return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element) {\n    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n        return false;\n    }\n    let tabIndex = element.getAttribute('tabindex');\n    // IE11 parses tabindex=\"\" as the value \"-32768\"\n    if (tabIndex == '-32768') {\n        return false;\n    }\n    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element) {\n    if (!hasValidTabIndex(element)) {\n        return null;\n    }\n    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n    const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n    return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    let inputType = nodeName === 'input' && element.type;\n    return inputType === 'text'\n        || inputType === 'password'\n        || nodeName === 'select'\n        || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element) {\n    // Inputs are potentially focusable *unless* they're type=\"hidden\".\n    if (isHiddenInput(element)) {\n        return false;\n    }\n    return isNativeFormElement(element) ||\n        isAnchorWithHref(element) ||\n        element.hasAttribute('contenteditable') ||\n        hasValidTabIndex(element);\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node) {\n    // ownerDocument is null if `node` itself *is* a document.\n    return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to misalign.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change for 11.0.0 Remove this class.\n */\nclass FocusTrap {\n    constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n        this._element = _element;\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._hasAttached = false;\n        // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n        this.startAnchorListener = () => this.focusLastTabbableElement();\n        this.endAnchorListener = () => this.focusFirstTabbableElement();\n        this._enabled = true;\n        if (!deferAnchors) {\n            this.attachAnchors();\n        }\n    }\n    /** Whether the focus trap is active. */\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(value, this._startAnchor);\n            this._toggleAnchorTabIndex(value, this._endAnchor);\n        }\n    }\n    /** Destroys the focus trap by cleaning up the anchors. */\n    destroy() {\n        const startAnchor = this._startAnchor;\n        const endAnchor = this._endAnchor;\n        if (startAnchor) {\n            startAnchor.removeEventListener('focus', this.startAnchorListener);\n            if (startAnchor.parentNode) {\n                startAnchor.parentNode.removeChild(startAnchor);\n            }\n        }\n        if (endAnchor) {\n            endAnchor.removeEventListener('focus', this.endAnchorListener);\n            if (endAnchor.parentNode) {\n                endAnchor.parentNode.removeChild(endAnchor);\n            }\n        }\n        this._startAnchor = this._endAnchor = null;\n        this._hasAttached = false;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @returns Whether the focus trap managed to attach successfuly. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n    attachAnchors() {\n        // If we're not on the browser, there can be no focus to trap.\n        if (this._hasAttached) {\n            return true;\n        }\n        this._ngZone.runOutsideAngular(() => {\n            if (!this._startAnchor) {\n                this._startAnchor = this._createAnchor();\n                this._startAnchor.addEventListener('focus', this.startAnchorListener);\n            }\n            if (!this._endAnchor) {\n                this._endAnchor = this._createAnchor();\n                this._endAnchor.addEventListener('focus', this.endAnchorListener);\n            }\n        });\n        if (this._element.parentNode) {\n            this._element.parentNode.insertBefore(this._startAnchor, this._element);\n            this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n            this._hasAttached = true;\n        }\n        return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then either focuses the first element that the\n     * user specified, or the first tabbable element.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusInitialElementWhenReady() {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusInitialElement()));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusFirstTabbableElementWhenReady() {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusLastTabbableElementWhenReady() {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\n        });\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @param bound The boundary to get (start or end of trapped region).\n     * @returns The boundary element.\n     */\n    _getRegionBoundary(bound) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\n            `[cdkFocusRegion${bound}], ` +\n            `[cdk-focus-${bound}]`);\n        for (let i = 0; i < markers.length; i++) {\n            // @breaking-change 8.0.0\n            if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n                    `attribute will be removed in 8.0.0.`, markers[i]);\n            }\n            else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0.`, markers[i]);\n            }\n        }\n        if (bound == 'start') {\n            return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n        }\n        return markers.length ?\n            markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @returns Whether focus was moved successfuly.\n     */\n    focusInitialElement() {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` +\n            `[cdkFocusInitial]`);\n        if (redirectToElement) {\n            // @breaking-change 8.0.0\n            if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0`, redirectToElement);\n            }\n            // Warn the consumer if the element they've pointed to\n            // isn't focusable, when not in production mode.\n            if (isDevMode() && !this._checker.isFocusable(redirectToElement)) {\n                console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n            }\n            redirectToElement.focus();\n            return true;\n        }\n        return this.focusFirstTabbableElement();\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfuly.\n     */\n    focusFirstTabbableElement() {\n        const redirectToElement = this._getRegionBoundary('start');\n        if (redirectToElement) {\n            redirectToElement.focus();\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfuly.\n     */\n    focusLastTabbableElement() {\n        const redirectToElement = this._getRegionBoundary('end');\n        if (redirectToElement) {\n            redirectToElement.focus();\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfuly been attached.\n     */\n    hasAttached() {\n        return this._hasAttached;\n    }\n    /** Get the first tabbable element from a DOM subtree (inclusive). */\n    _getFirstTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n        // back to `childNodes` which includes text nodes, comments etc.\n        let children = root.children || root.childNodes;\n        for (let i = 0; i < children.length; i++) {\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getFirstTabbableElement(children[i]) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Get the last tabbable element from a DOM subtree (inclusive). */\n    _getLastTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in reverse DOM order.\n        let children = root.children || root.childNodes;\n        for (let i = children.length - 1; i >= 0; i--) {\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getLastTabbableElement(children[i]) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Creates an anchor element. */\n    _createAnchor() {\n        const anchor = this._document.createElement('div');\n        this._toggleAnchorTabIndex(this._enabled, anchor);\n        anchor.classList.add('cdk-visually-hidden');\n        anchor.classList.add('cdk-focus-trap-anchor');\n        anchor.setAttribute('aria-hidden', 'true');\n        return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @param isEnabled Whether the focus trap is enabled.\n     * @param anchor Anchor on which to toggle the tabindex.\n     */\n    _toggleAnchorTabIndex(isEnabled, anchor) {\n        // Remove the tabindex completely, rather than setting it to -1, because if the\n        // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n        isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n     * @param enabled: Whether the anchors should trap Tab.\n     */\n    toggleAnchors(enabled) {\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(enabled, this._startAnchor);\n            this._toggleAnchorTabIndex(enabled, this._endAnchor);\n        }\n    }\n    /** Executes a function when the zone is stable. */\n    _executeOnStable(fn) {\n        if (this._ngZone.isStable) {\n            fn();\n        }\n        else {\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(fn);\n        }\n    }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change for 11.0.0 Remove this class.\n */\nclass FocusTrapFactory {\n    constructor(_checker, _ngZone, _document) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param element The element around which focus will be trapped.\n     * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @returns The created focus trap instance.\n     */\n    create(element, deferCaptureElements = false) {\n        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n}\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) { return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nFocusTrapFactory.ɵprov = ɵɵdefineInjectable({ factory: function FocusTrapFactory_Factory() { return new FocusTrapFactory(ɵɵinject(InteractivityChecker), ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: FocusTrapFactory, providedIn: \"root\" });\nFocusTrapFactory.ctorParameters = () => [\n    { type: InteractivityChecker },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FocusTrapFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: InteractivityChecker }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/** Directive for trapping focus within a region. */\nclass CdkTrapFocus {\n    constructor(_elementRef, _focusTrapFactory, _document) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n        this._previouslyFocusedElement = null;\n        this._document = _document;\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    /** Whether the focus trap is active. */\n    get enabled() { return this.focusTrap.enabled; }\n    set enabled(value) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n    /**\n     * Whether the directive should automatially move focus into the trapped region upon\n     * initialization and return focus to the previous activeElement upon destruction.\n     */\n    get autoCapture() { return this._autoCapture; }\n    set autoCapture(value) { this._autoCapture = coerceBooleanProperty(value); }\n    ngOnDestroy() {\n        this.focusTrap.destroy();\n        // If we stored a previously focused element when using autoCapture, return focus to that\n        // element now that the trapped region is being destroyed.\n        if (this._previouslyFocusedElement) {\n            this._previouslyFocusedElement.focus();\n            this._previouslyFocusedElement = null;\n        }\n    }\n    ngAfterContentInit() {\n        this.focusTrap.attachAnchors();\n        if (this.autoCapture) {\n            this._captureFocus();\n        }\n    }\n    ngDoCheck() {\n        if (!this.focusTrap.hasAttached()) {\n            this.focusTrap.attachAnchors();\n        }\n    }\n    ngOnChanges(changes) {\n        const autoCaptureChange = changes['autoCapture'];\n        if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture &&\n            this.focusTrap.hasAttached()) {\n            this._captureFocus();\n        }\n    }\n    _captureFocus() {\n        this._previouslyFocusedElement = this._document.activeElement;\n        this.focusTrap.focusInitialElementWhenReady();\n    }\n}\nCdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) { return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nCdkTrapFocus.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTrapFocus, selectors: [[\"\", \"cdkTrapFocus\", \"\"]], inputs: { enabled: [\"cdkTrapFocus\", \"enabled\"], autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"] }, exportAs: [\"cdkTrapFocus\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkTrapFocus.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nCdkTrapFocus.propDecorators = {\n    enabled: [{ type: Input, args: ['cdkTrapFocus',] }],\n    autoCapture: [{ type: Input, args: ['cdkTrapFocusAutoCapture',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTrapFocus, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTrapFocus]',\n                exportAs: 'cdkTrapFocus'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FocusTrapFactory }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { enabled: [{\n            type: Input,\n            args: ['cdkTrapFocus']\n        }], autoCapture: [{\n            type: Input,\n            args: ['cdkTrapFocusAutoCapture']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\nclass ConfigurableFocusTrap extends FocusTrap {\n    constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n        super(_element, _checker, _ngZone, _document, config.defer);\n        this._focusTrapManager = _focusTrapManager;\n        this._inertStrategy = _inertStrategy;\n        this._focusTrapManager.register(this);\n    }\n    /** Whether the FocusTrap is enabled. */\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._enabled) {\n            this._focusTrapManager.register(this);\n        }\n        else {\n            this._focusTrapManager.deregister(this);\n        }\n    }\n    /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n    destroy() {\n        this._focusTrapManager.deregister(this);\n        super.destroy();\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _enable() {\n        this._inertStrategy.preventFocus(this);\n        this.toggleAnchors(true);\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _disable() {\n        this._inertStrategy.allowFocus(this);\n        this.toggleAnchors(false);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** IE 11 compatible closest implementation that is able to start from non-Element Nodes. */\nfunction closest(element, selector) {\n    if (!(element instanceof Node)) {\n        return null;\n    }\n    let curr = element;\n    while (curr != null && !(curr instanceof Element)) {\n        curr = curr.parentNode;\n    }\n    return curr && (hasNativeClosest ?\n        curr.closest(selector) : polyfillClosest(curr, selector));\n}\n/** Polyfill for browsers without Element.closest. */\nfunction polyfillClosest(element, selector) {\n    let curr = element;\n    while (curr != null && !(curr instanceof Element && matches(curr, selector))) {\n        curr = curr.parentNode;\n    }\n    return (curr || null);\n}\nconst hasNativeClosest = typeof Element != 'undefined' && !!Element.prototype.closest;\n/** IE 11 compatible matches implementation. */\nfunction matches(element, selector) {\n    return element.matches ?\n        element.matches(selector) :\n        element['msMatchesSelector'](selector);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\nclass EventListenerFocusTrapInertStrategy {\n    constructor() {\n        /** Focus event handler. */\n        this._listener = null;\n    }\n    /** Adds a document event listener that keeps focus inside the FocusTrap. */\n    preventFocus(focusTrap) {\n        // Ensure there's only one listener per document\n        if (this._listener) {\n            focusTrap._document.removeEventListener('focus', this._listener, true);\n        }\n        this._listener = (e) => this._trapFocus(focusTrap, e);\n        focusTrap._ngZone.runOutsideAngular(() => {\n            focusTrap._document.addEventListener('focus', this._listener, true);\n        });\n    }\n    /** Removes the event listener added in preventFocus. */\n    allowFocus(focusTrap) {\n        if (!this._listener) {\n            return;\n        }\n        focusTrap._document.removeEventListener('focus', this._listener, true);\n        this._listener = null;\n    }\n    /**\n     * Refocuses the first element in the FocusTrap if the focus event target was outside\n     * the FocusTrap.\n     *\n     * This is an event listener callback. The event listener is added in runOutsideAngular,\n     * so all this code runs outside Angular as well.\n     */\n    _trapFocus(focusTrap, event) {\n        const target = event.target;\n        const focusTrapRoot = focusTrap._element;\n        // Don't refocus if target was in an overlay, because the overlay might be associated\n        // with an element inside the FocusTrap, ex. mat-select.\n        if (!focusTrapRoot.contains(target) && closest(target, 'div.cdk-overlay-pane') === null) {\n            // Some legacy FocusTrap usages have logic that focuses some element on the page\n            // just before FocusTrap is destroyed. For backwards compatibility, wait\n            // to be sure FocusTrap is still enabled before refocusing.\n            setTimeout(() => {\n                // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n                if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n                    focusTrap.focusFirstTabbableElement();\n                }\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for creating a ConfigurableFocusTrap.\n */\nclass ConfigurableFocusTrapConfig {\n    constructor() {\n        /**\n         * Whether to defer the creation of FocusTrap elements to be\n         * done manually by the user. Default is to create them\n         * automatically.\n         */\n        this.defer = false;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the inert strategy. */\nconst FOCUS_TRAP_INERT_STRATEGY = new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\nclass FocusTrapManager {\n    constructor() {\n        // A stack of the FocusTraps on the page. Only the FocusTrap at the\n        // top of the stack is active.\n        this._focusTrapStack = [];\n    }\n    /**\n     * Disables the FocusTrap at the top of the stack, and then pushes\n     * the new FocusTrap onto the stack.\n     */\n    register(focusTrap) {\n        // Dedupe focusTraps that register multiple times.\n        this._focusTrapStack = this._focusTrapStack.filter((ft) => ft !== focusTrap);\n        let stack = this._focusTrapStack;\n        if (stack.length) {\n            stack[stack.length - 1]._disable();\n        }\n        stack.push(focusTrap);\n        focusTrap._enable();\n    }\n    /**\n     * Removes the FocusTrap from the stack, and activates the\n     * FocusTrap that is the new top of the stack.\n     */\n    deregister(focusTrap) {\n        focusTrap._disable();\n        const stack = this._focusTrapStack;\n        const i = stack.indexOf(focusTrap);\n        if (i !== -1) {\n            stack.splice(i, 1);\n            if (stack.length) {\n                stack[stack.length - 1]._enable();\n            }\n        }\n    }\n}\nFocusTrapManager.ɵfac = function FocusTrapManager_Factory(t) { return new (t || FocusTrapManager)(); };\nFocusTrapManager.ɵprov = ɵɵdefineInjectable({ factory: function FocusTrapManager_Factory() { return new FocusTrapManager(); }, token: FocusTrapManager, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FocusTrapManager, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Factory that allows easy instantiation of configurable focus traps. */\nclass ConfigurableFocusTrapFactory {\n    constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._focusTrapManager = _focusTrapManager;\n        this._document = _document;\n        // TODO split up the strategies into different modules, similar to DateAdapter.\n        this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n    }\n    create(element, config = new ConfigurableFocusTrapConfig()) {\n        let configObject;\n        if (typeof config === 'boolean') {\n            configObject = new ConfigurableFocusTrapConfig();\n            configObject.defer = config;\n        }\n        else {\n            configObject = config;\n        }\n        return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n    }\n}\nConfigurableFocusTrapFactory.ɵfac = function ConfigurableFocusTrapFactory_Factory(t) { return new (t || ConfigurableFocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(FocusTrapManager), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8)); };\nConfigurableFocusTrapFactory.ɵprov = ɵɵdefineInjectable({ factory: function ConfigurableFocusTrapFactory_Factory() { return new ConfigurableFocusTrapFactory(ɵɵinject(InteractivityChecker), ɵɵinject(NgZone), ɵɵinject(FocusTrapManager), ɵɵinject(DOCUMENT), ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8)); }, token: ConfigurableFocusTrapFactory, providedIn: \"root\" });\nConfigurableFocusTrapFactory.ctorParameters = () => [\n    { type: InteractivityChecker },\n    { type: NgZone },\n    { type: FocusTrapManager },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FOCUS_TRAP_INERT_STRATEGY,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ConfigurableFocusTrapFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: InteractivityChecker }, { type: ɵngcc0.NgZone }, { type: FocusTrapManager }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [FOCUS_TRAP_INERT_STRATEGY]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n    providedIn: 'root',\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n});\n/** @docs-private */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n    return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass LiveAnnouncer {\n    constructor(elementToken, _ngZone, _document, _defaultOptions) {\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        // We inject the live element and document as `any` because the constructor signature cannot\n        // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n        // a class decorator causes TypeScript to preserve the constructor signature types.\n        this._document = _document;\n        this._liveElement = elementToken || this._createLiveElement();\n    }\n    announce(message, ...args) {\n        const defaultOptions = this._defaultOptions;\n        let politeness;\n        let duration;\n        if (args.length === 1 && typeof args[0] === 'number') {\n            duration = args[0];\n        }\n        else {\n            [politeness, duration] = args;\n        }\n        this.clear();\n        clearTimeout(this._previousTimeout);\n        if (!politeness) {\n            politeness =\n                (defaultOptions && defaultOptions.politeness) ? defaultOptions.politeness : 'polite';\n        }\n        if (duration == null && defaultOptions) {\n            duration = defaultOptions.duration;\n        }\n        // TODO: ensure changing the politeness works on all environments we support.\n        this._liveElement.setAttribute('aria-live', politeness);\n        // This 100ms timeout is necessary for some browser + screen-reader combinations:\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n        //   second time without clearing and then using a non-zero delay.\n        // (using JAWS 17 at time of this writing).\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                clearTimeout(this._previousTimeout);\n                this._previousTimeout = setTimeout(() => {\n                    this._liveElement.textContent = message;\n                    resolve();\n                    if (typeof duration === 'number') {\n                        this._previousTimeout = setTimeout(() => this.clear(), duration);\n                    }\n                }, 100);\n            });\n        });\n    }\n    /**\n     * Clears the current text from the announcer element. Can be used to prevent\n     * screen readers from reading the text out again while the user is going\n     * through the page landmarks.\n     */\n    clear() {\n        if (this._liveElement) {\n            this._liveElement.textContent = '';\n        }\n    }\n    ngOnDestroy() {\n        clearTimeout(this._previousTimeout);\n        if (this._liveElement && this._liveElement.parentNode) {\n            this._liveElement.parentNode.removeChild(this._liveElement);\n            this._liveElement = null;\n        }\n    }\n    _createLiveElement() {\n        const elementClass = 'cdk-live-announcer-element';\n        const previousElements = this._document.getElementsByClassName(elementClass);\n        const liveEl = this._document.createElement('div');\n        // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n        for (let i = 0; i < previousElements.length; i++) {\n            previousElements[i].parentNode.removeChild(previousElements[i]);\n        }\n        liveEl.classList.add(elementClass);\n        liveEl.classList.add('cdk-visually-hidden');\n        liveEl.setAttribute('aria-atomic', 'true');\n        liveEl.setAttribute('aria-live', 'polite');\n        this._document.body.appendChild(liveEl);\n        return liveEl;\n    }\n}\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) { return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8)); };\nLiveAnnouncer.ɵprov = ɵɵdefineInjectable({ factory: function LiveAnnouncer_Factory() { return new LiveAnnouncer(ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵɵinject(NgZone), ɵɵinject(DOCUMENT), ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8)); }, token: LiveAnnouncer, providedIn: \"root\" });\nLiveAnnouncer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN,] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LiveAnnouncer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nclass CdkAriaLive {\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n        this._elementRef = _elementRef;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._contentObserver = _contentObserver;\n        this._ngZone = _ngZone;\n        this._politeness = 'off';\n    }\n    /** The aria-live politeness level to use when announcing messages. */\n    get politeness() { return this._politeness; }\n    set politeness(value) {\n        this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';\n        if (this._politeness === 'off') {\n            if (this._subscription) {\n                this._subscription.unsubscribe();\n                this._subscription = null;\n            }\n        }\n        else if (!this._subscription) {\n            this._subscription = this._ngZone.runOutsideAngular(() => {\n                return this._contentObserver\n                    .observe(this._elementRef)\n                    .subscribe(() => {\n                    // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n                    const elementText = this._elementRef.nativeElement.textContent;\n                    // The `MutationObserver` fires also for attribute\n                    // changes which we don't want to announce.\n                    if (elementText !== this._previousAnnouncedText) {\n                        this._liveAnnouncer.announce(elementText, this._politeness);\n                        this._previousAnnouncedText = elementText;\n                    }\n                });\n            });\n        }\n    }\n    ngOnDestroy() {\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n        }\n    }\n}\nCdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) { return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkAriaLive.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAriaLive, selectors: [[\"\", \"cdkAriaLive\", \"\"]], inputs: { politeness: [\"cdkAriaLive\", \"politeness\"] }, exportAs: [\"cdkAriaLive\"] });\nCdkAriaLive.ctorParameters = () => [\n    { type: ElementRef },\n    { type: LiveAnnouncer },\n    { type: ContentObserver },\n    { type: NgZone }\n];\nCdkAriaLive.propDecorators = {\n    politeness: [{ type: Input, args: ['cdkAriaLive',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAriaLive, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAriaLive]',\n                exportAs: 'cdkAriaLive'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: LiveAnnouncer }, { type: ɵngcc2.ContentObserver }, { type: ɵngcc0.NgZone }]; }, { politeness: [{\n            type: Input,\n            args: ['cdkAriaLive']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n */\nfunction isFakeMousedownFromScreenReader(event) {\n    return event.buttons === 0;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nconst TOUCH_BUFFER_MS = 650;\n/** InjectionToken for FocusMonitorOptions. */\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken('cdk-focus-monitor-default-options');\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true\n});\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\nclass FocusMonitor {\n    constructor(_ngZone, _platform, \n    /** @breaking-change 11.0.0 make document required */\n    document, options) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** The focus origin that the next focus event is a result of. */\n        this._origin = null;\n        /** Whether the window has just been focused. */\n        this._windowFocused = false;\n        /** Map of elements being monitored to their info. */\n        this._elementInfo = new Map();\n        /** The number of elements currently being monitored. */\n        this._monitoredElementCount = 0;\n        /**\n         * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n         * as well as the number of monitored elements that they contain. We have to treat focus/blur\n         * handlers differently from the rest of the events, because the browser won't emit events\n         * to the document when focus moves inside of a shadow root.\n         */\n        this._rootNodeFocusListenerCount = new Map();\n        /**\n         * Event listener for `keydown` events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._documentKeydownListener = () => {\n            // On keydown record the origin and clear any touch event that may be in progress.\n            this._lastTouchTarget = null;\n            this._setOriginForCurrentEventQueue('keyboard');\n        };\n        /**\n         * Event listener for `mousedown` events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._documentMousedownListener = (event) => {\n            // On mousedown record the origin only if there is not touch\n            // target, since a mousedown can happen as a result of a touch event.\n            if (!this._lastTouchTarget) {\n                // In some cases screen readers fire fake `mousedown` events instead of `keydown`.\n                // Resolve the focus source to `keyboard` if we detect one of them.\n                const source = isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse';\n                this._setOriginForCurrentEventQueue(source);\n            }\n        };\n        /**\n         * Event listener for `touchstart` events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._documentTouchstartListener = (event) => {\n            // When the touchstart event fires the focus event is not yet in the event queue. This means\n            // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to\n            // see if a focus happens.\n            if (this._touchTimeoutId != null) {\n                clearTimeout(this._touchTimeoutId);\n            }\n            this._lastTouchTarget = getTarget(event);\n            this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n        };\n        /**\n         * Event listener for `focus` events on the window.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._windowFocusListener = () => {\n            // Make a note of when the window regains focus, so we can\n            // restore the origin info for the focused element.\n            this._windowFocused = true;\n            this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\n        };\n        /**\n         * Event listener for `focus` and 'blur' events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._rootNodeFocusAndBlurListener = (event) => {\n            const target = getTarget(event);\n            const handler = event.type === 'focus' ? this._onFocus : this._onBlur;\n            // We need to walk up the ancestor chain in order to support `checkChildren`.\n            for (let element = target; element; element = element.parentElement) {\n                handler.call(this, event, element);\n            }\n        };\n        this._document = document;\n        this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0 /* IMMEDIATE */;\n    }\n    monitor(element, checkChildren = false) {\n        // Do nothing if we're not on the browser platform.\n        if (!this._platform.isBrowser) {\n            return of(null);\n        }\n        const nativeElement = coerceElement(element);\n        // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n        // the shadow root, rather than the `document`, because the browser won't emit focus events\n        // to the `document`, if focus is moving within the same shadow root.\n        const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n        const cachedInfo = this._elementInfo.get(nativeElement);\n        // Check if we're already monitoring this element.\n        if (cachedInfo) {\n            if (checkChildren) {\n                // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n                // observers into ones that behave as if `checkChildren` was turned on. We need a more\n                // robust solution.\n                cachedInfo.checkChildren = true;\n            }\n            return cachedInfo.subject.asObservable();\n        }\n        // Create monitored element info.\n        const info = {\n            checkChildren: checkChildren,\n            subject: new Subject(),\n            rootNode\n        };\n        this._elementInfo.set(nativeElement, info);\n        this._registerGlobalListeners(info);\n        return info.subject.asObservable();\n    }\n    stopMonitoring(element) {\n        const nativeElement = coerceElement(element);\n        const elementInfo = this._elementInfo.get(nativeElement);\n        if (elementInfo) {\n            elementInfo.subject.complete();\n            this._setClasses(nativeElement);\n            this._elementInfo.delete(nativeElement);\n            this._removeGlobalListeners(elementInfo);\n        }\n    }\n    focusVia(element, origin, options) {\n        const nativeElement = coerceElement(element);\n        this._setOriginForCurrentEventQueue(origin);\n        // `focus` isn't available on the server\n        if (typeof nativeElement.focus === 'function') {\n            // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.\n            nativeElement.focus(options);\n        }\n    }\n    ngOnDestroy() {\n        this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    _toggleClass(element, className, shouldSet) {\n        if (shouldSet) {\n            element.classList.add(className);\n        }\n        else {\n            element.classList.remove(className);\n        }\n    }\n    _getFocusOrigin(event) {\n        // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n        // 1) The window has just regained focus, in which case we want to restore the focused state of\n        //    the element from before the window blurred.\n        // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n        // 3) The element was programmatically focused, in which case we should mark the origin as\n        //    'program'.\n        if (this._origin) {\n            return this._origin;\n        }\n        if (this._windowFocused && this._lastFocusOrigin) {\n            return this._lastFocusOrigin;\n        }\n        else if (this._wasCausedByTouch(event)) {\n            return 'touch';\n        }\n        else {\n            return 'program';\n        }\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param element The element to update the classes on.\n     * @param origin The focus origin.\n     */\n    _setClasses(element, origin) {\n        this._toggleClass(element, 'cdk-focused', !!origin);\n        this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n        this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n        this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n        this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n    }\n    /**\n     * Sets the origin and schedules an async function to clear it at the end of the event queue.\n     * If the detection mode is 'eventual', the origin is never cleared.\n     * @param origin The origin to set.\n     */\n    _setOriginForCurrentEventQueue(origin) {\n        this._ngZone.runOutsideAngular(() => {\n            this._origin = origin;\n            if (this._detectionMode === 0 /* IMMEDIATE */) {\n                // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n                // tick after the interaction event fired. To ensure the focus origin is always correct,\n                // the focus origin will be determined at the beginning of the next tick.\n                this._originTimeoutId = setTimeout(() => this._origin = null, 1);\n            }\n        });\n    }\n    /**\n     * Checks whether the given focus event was caused by a touchstart event.\n     * @param event The focus event to check.\n     * @returns Whether the event was caused by a touch.\n     */\n    _wasCausedByTouch(event) {\n        // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n        // Consider the following dom structure:\n        //\n        // <div #parent tabindex=\"0\" cdkFocusClasses>\n        //   <div #child (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // If the user touches the #child element and the #parent is programmatically focused as a\n        // result, this code will still consider it to have been caused by the touch event and will\n        // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n        // relatively small edge-case that can be worked around by using\n        // focusVia(parentEl, 'program') to focus the parent element.\n        //\n        // If we decide that we absolutely must handle this case correctly, we can do so by listening\n        // for the first focus event after the touchstart, and then the first blur event after that\n        // focus event. When that blur event fires we know that whatever follows is not a result of the\n        // touchstart.\n        const focusTarget = getTarget(event);\n        return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n            (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @param event The focus event.\n     * @param element The monitored element.\n     */\n    _onFocus(event, element) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (!elementInfo.checkChildren && element !== getTarget(event))) {\n            return;\n        }\n        const origin = this._getFocusOrigin(event);\n        this._setClasses(element, origin);\n        this._emitOrigin(elementInfo.subject, origin);\n        this._lastFocusOrigin = origin;\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param event The blur event.\n     * @param element The monitored element.\n     */\n    _onBlur(event, element) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n            element.contains(event.relatedTarget))) {\n            return;\n        }\n        this._setClasses(element);\n        this._emitOrigin(elementInfo.subject, null);\n    }\n    _emitOrigin(subject, origin) {\n        this._ngZone.run(() => subject.next(origin));\n    }\n    _registerGlobalListeners(elementInfo) {\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        const rootNode = elementInfo.rootNode;\n        const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n        if (!rootNodeFocusListeners) {\n            this._ngZone.runOutsideAngular(() => {\n                rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n            });\n        }\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n        // Register global listeners when first element is monitored.\n        if (++this._monitoredElementCount === 1) {\n            // Note: we listen to events in the capture phase so we\n            // can detect them even if the user stops propagation.\n            this._ngZone.runOutsideAngular(() => {\n                const document = this._getDocument();\n                const window = this._getWindow();\n                document.addEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n                document.addEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n                document.addEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n                window.addEventListener('focus', this._windowFocusListener);\n            });\n        }\n    }\n    _removeGlobalListeners(elementInfo) {\n        const rootNode = elementInfo.rootNode;\n        if (this._rootNodeFocusListenerCount.has(rootNode)) {\n            const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n            if (rootNodeFocusListeners > 1) {\n                this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n            }\n            else {\n                rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                this._rootNodeFocusListenerCount.delete(rootNode);\n            }\n        }\n        // Unregister global listeners when last element is unmonitored.\n        if (!--this._monitoredElementCount) {\n            const document = this._getDocument();\n            const window = this._getWindow();\n            document.removeEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n            document.removeEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n            document.removeEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n            window.removeEventListener('focus', this._windowFocusListener);\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n            clearTimeout(this._windowFocusTimeoutId);\n            clearTimeout(this._touchTimeoutId);\n            clearTimeout(this._originTimeoutId);\n        }\n    }\n}\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) { return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8)); };\nFocusMonitor.ɵprov = ɵɵdefineInjectable({ factory: function FocusMonitor_Factory() { return new FocusMonitor(ɵɵinject(NgZone), ɵɵinject(Platform), ɵɵinject(DOCUMENT, 8), ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8)); }, token: FocusMonitor, providedIn: \"root\" });\nFocusMonitor.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FOCUS_MONITOR_DEFAULT_OPTIONS,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FocusMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n/** Gets the target of an event, accounting for Shadow DOM. */\nfunction getTarget(event) {\n    // If an event is bound outside the Shadow DOM, the `event.target` will\n    // point to the shadow root so we have to use `composedPath` instead.\n    return (event.composedPath ? event.composedPath()[0] : event.target);\n}\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nclass CdkMonitorFocus {\n    constructor(_elementRef, _focusMonitor) {\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this.cdkFocusChange = new EventEmitter();\n    }\n    ngAfterViewInit() {\n        this._monitorSubscription = this._focusMonitor.monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe(origin => this.cdkFocusChange.emit(origin));\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        if (this._monitorSubscription) {\n            this._monitorSubscription.unsubscribe();\n        }\n    }\n}\nCdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) { return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor)); };\nCdkMonitorFocus.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkMonitorFocus, selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]], outputs: { cdkFocusChange: \"cdkFocusChange\" } });\nCdkMonitorFocus.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor }\n];\nCdkMonitorFocus.propDecorators = {\n    cdkFocusChange: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkMonitorFocus, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FocusMonitor }]; }, { cdkFocusChange: [{\n            type: Output\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\nclass HighContrastModeDetector {\n    constructor(_platform, document) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    /** Gets the current high-contrast-mode for the page. */\n    getHighContrastMode() {\n        if (!this._platform.isBrowser) {\n            return 0 /* NONE */;\n        }\n        // Create a test element with an arbitrary background-color that is neither black nor\n        // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n        // appending the test element to the DOM does not affect layout by absolutely positioning it\n        const testElement = this._document.createElement('div');\n        testElement.style.backgroundColor = 'rgb(1,2,3)';\n        testElement.style.position = 'absolute';\n        this._document.body.appendChild(testElement);\n        // Get the computed style for the background color, collapsing spaces to normalize between\n        // browsers. Once we get this color, we no longer need the test element. Access the `window`\n        // via the document so we can fake it in tests. Note that we have extra null checks, because\n        // this logic will likely run during app bootstrap and throwing can break the entire app.\n        const documentWindow = this._document.defaultView || window;\n        const computedStyle = (documentWindow && documentWindow.getComputedStyle) ?\n            documentWindow.getComputedStyle(testElement) : null;\n        const computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\n        this._document.body.removeChild(testElement);\n        switch (computedColor) {\n            case 'rgb(0,0,0)': return 2 /* WHITE_ON_BLACK */;\n            case 'rgb(255,255,255)': return 1 /* BLACK_ON_WHITE */;\n        }\n        return 0 /* NONE */;\n    }\n    /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n    _applyBodyHighContrastModeCssClasses() {\n        if (this._platform.isBrowser && this._document.body) {\n            const bodyClasses = this._document.body.classList;\n            // IE11 doesn't support `classList` operations with multiple arguments\n            bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n            bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);\n            bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);\n            const mode = this.getHighContrastMode();\n            if (mode === 1 /* BLACK_ON_WHITE */) {\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n                bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);\n            }\n            else if (mode === 2 /* WHITE_ON_BLACK */) {\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n                bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);\n            }\n        }\n    }\n}\nHighContrastModeDetector.ɵfac = function HighContrastModeDetector_Factory(t) { return new (t || HighContrastModeDetector)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT)); };\nHighContrastModeDetector.ɵprov = ɵɵdefineInjectable({ factory: function HighContrastModeDetector_Factory() { return new HighContrastModeDetector(ɵɵinject(Platform), ɵɵinject(DOCUMENT)); }, token: HighContrastModeDetector, providedIn: \"root\" });\nHighContrastModeDetector.ctorParameters = () => [\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighContrastModeDetector, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass A11yModule {\n    constructor(highContrastModeDetector) {\n        highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n    }\n}\nA11yModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: A11yModule });\nA11yModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function A11yModule_Factory(t) { return new (t || A11yModule)(ɵngcc0.ɵɵinject(HighContrastModeDetector)); }, imports: [[PlatformModule, ObserversModule]] });\nA11yModule.ctorParameters = () => [\n    { type: HighContrastModeDetector }\n];\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, { declarations: function () { return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]; }, imports: function () { return [PlatformModule, ObserversModule]; }, exports: function () { return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(A11yModule, [{\n        type: NgModule,\n        args: [{\n                imports: [PlatformModule, ObserversModule],\n                declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n            }]\n    }], function () { return [{ type: HighContrastModeDetector }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, TOUCH_BUFFER_MS, isFakeMousedownFromScreenReader, FocusTrapManager as ɵangular_material_src_cdk_a11y_a11y_a, ConfigurableFocusTrapConfig as ɵangular_material_src_cdk_a11y_a11y_b };\n\n//# sourceMappingURL=a11y.js.map"],"sourceRoot":"webpack:///"}